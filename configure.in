dnl  Process this file with autoconf to produce a configure script.
dnl  Copyright (C) 1998 John Harper <john@dcs.warwick.ac.uk>
dnl  $Id$
dnl
dnl  This file is part of Jade.
dnl
dnl  Jade is free software; you can redistribute it and/or modify it
dnl  under the terms of the GNU General Public License as published by
dnl  the Free Software Foundation; either version 2, or (at your option)
dnl  any later version.
dnl
dnl  Jade is distributed in the hope that it will be useful, but
dnl  WITHOUT ANY WARRANTY; without even the implied warranty of
dnl  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl  GNU General Public License for more details.
dnl
dnl  You should have received a copy of the GNU General Public License
dnl  along with Jade; see the file COPYING.  If not, write to
dnl  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

AC_REVISION($Revision$)

AC_INIT(src/jade.h)
AC_CONFIG_HEADER(config.h)
AC_CONFIG_AUX_DIR(etc)

version="4.0"
jadedir='${datadir}/jade'
lispdir='${jadedir}/${version}/lisp'
jadeexecdir='${libexecdir}/jade/${version}/${host_type}'

output_files="man/Makefile jade/Makefile:src/Makefile.in\
 lib/Makefile:lib-src/Makefile.in lisp/Makefile Makedefs Makefile"

opt_enable_dumped=0
dumped_lisp_files="lisp backquote tilde windows buffers modes edit prompt\
 completion help keymap replace isearch lisp-mode c-mode text-mode fill"

dnl Find the system type; this isn't crucial
AC_CANONICAL_HOST

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_GCC_TRADITIONAL

dnl Checks for libraries.
AC_CHECK_LIB(nsl, xdr_void)
AC_CHECK_LIB(socket, bind)
AC_CHECK_LIB(dl, dlopen)

dnl Checks for header files.
AC_PATH_XTRA
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h sys/time.h sys/utsname.h unistd.h siginfo.h memory.h stropts.h termios.h)

dnl Check for Doug Lea's malloc in libc, otherwise compile gmalloc
doug_lea_malloc=yes
AC_CHECK_FUNC(malloc_get_state, , doug_lea_malloc=no)
AC_CHECK_FUNC(malloc_set_state, , doug_lea_malloc=no)
if test "$doug_lea_malloc" = "yes"; then
  AC_DEFINE(DOUG_LEA_MALLOC)
else
  JADE_LIBOBJS="${JADE_LIBOBJS} gmalloc.o"
fi

dnl Use r_alloc or not?
use_r_alloc=yes
AC_ARG_ENABLE(dumped,
 [  --enable-ralloc	  Use the GNU relocating allocator (default)
  --disable-ralloc	  Don't use the relocating alloc],
 [use_r_alloc="$enableval"])
if test "$use_r_alloc" = "yes"; then
  AC_CHECK_FUNC(r_re_alloc, , JADE_LIBOBJS="${JADE_LIBOBJS} ralloc.o")
  AC_DEFINE(USE_R_ALLOC)
fi

dnl Check for dynamic loading; currently only <dlfcn.h> with dlopen() etc
AC_CHECK_HEADER(dlfcn.h,
[AC_DEFINE(HAVE_DLFCN_H)
 AC_DEFINE(HAVE_DYNAMIC_LOADING)
 dynamic_file_suffix="so"
 dnl Flags given to compiler when compiling shared objects
 DL_CFLAGS=${DL_CFLAGS:-"-fpic -shared"}
 dnl Flags given to compiler when linking main program
 DL_LDFLAGS=""
 dnl Specific system checks
 case ${host} in
   *-linux-*)
     dnl Need -rdynamic to ensure the jade binary exports all symbols
     DL_LDFLAGS="${DL_LDFLAGS} -rdynamic" ;;
 esac
 AC_DEFINE(DYNAMIC_FILE_SUFFIX, "so")],
[AC_MSG_WARN([Can't figure out how to do dynamic loading])])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MEMCMP
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(getcwd gethostname select socket strcspn strerror strstr strtol psignal strsignal snprintf grantpt lrand48 getpagesize)
AC_REPLACE_FUNCS(realpath)

dnl Custom tests

dnl FIXME: Currently only GNU CC can compile Jade (some uses of
dnl FIXME: nested functions to aid debugging and laziness)
if test "x${GCC}" != "xyes"; then
  AC_MSG_ERROR([You currently need GNU CC to compile Jade.
Send abusive email to john@dcs.warwick.ac.uk to get this fixed!]);
fi

dnl If using GCC and it doesn't look as though the cflags have been
dnl set explicitly, add some warning options. Turn off implicit-int
dnl warnings since the X11 includes on Solaris generate a lot of these
if test "x${GCC}" = "xyes" -a "x$CFLAGS" = "x-g -O2"; then
  CFLAGS="${CFLAGS} -Wall -Wmissing-prototypes -Wno-implicit-int"
fi

dnl Does <unistd.h> declare char **environ?
AC_CACHE_CHECK([whether unistd.h declares environ], jade_cv_decl_environ,
 AC_TRY_COMPILE([#include <unistd.h>], [char **foo = environ;],
  [jade_cv_decl_environ=yes],
  [jade_cv_decl_environ=no]))
if test ${jade_cv_decl_environ} = no; then
  AC_DEFINE(ENVIRON_UNDECLARED)
fi

dnl Are ptys available, and if so, how?
AC_MSG_CHECKING([whether /dev/ptmx exists])
if test -r /dev/ptmx; then
  AC_MSG_RESULT([yes])
  AC_DEFINE(HAVE_PTYS)
  AC_DEFINE(HAVE_DEV_PTMX)
else
  AC_MSG_RESULT([no])
fi

dnl Look for old-style /dev/ptyXN devices
AC_CACHE_CHECK([whether /dev/ptyXN devices exist], jade_cv_sys_dev_pty,
 jade_cv_sys_dev_pty=no
 for c in p q r s t u v w x y z a b c d e f g h i j k l m n o; do
   if test -r "/dev/pty${c}0"; then
     jade_cv_sys_dev_pty=${c}
     break
   fi
 done)
if test ${jade_cv_sys_dev_pty} != no; then
  AC_DEFINE(HAVE_PTYS)
  AC_DEFINE_UNQUOTED(FIRST_PTY_LETTER, '${jade_cv_sys_dev_pty}')
fi

dnl Was X found or not (if not we're pretty much screwed)
if test "x${no_x}" != "xyes"; then
  HAVE_X11=1
  AC_DEFINE(HAVE_X11)
else
  HAVE_X11=0
  AC_MSG_ERROR([You need X11 to run Jade])
fi

dnl If GCC was found we can probably use __asm__ statements to inline
dnl LISP string constants
if test "x${GCC}" = "xyes"; then 
  AC_DEFINE(INLINE_STATIC_STRINGS)
  dump_flags="--enable-inline-strings"
else
  dump_flags="--disable-inline-strings"
fi

AC_ARG_ENABLE(swap-del-bs,
 [  --enable-swap-del-bs	  Swap the meaning of Delete and Backspace
			  event specifiers.
  --disable-swap-del-bs	  Don't swap delete and backspace (default)],
 [AC_DEFINE(SWAP_DELETE_KEYS)])

AC_ARG_ENABLE(dumped,
 [  --enable-dumped	  Dump LISP files into the jaded binary
  --disable-dumped	  Don't dump LISP files (default)],
 [if test "$enableval" != "no"; then opt_enable_dumped=1; fi])

dnl If making a jaded binary, add its Makefile to the list of outputs
if test "${opt_enable_dumped}" = "1"; then
  output_files="${output_files} jaded/Makefile:src/Makefile.in"
fi

dnl Assumption for now
HAVE_UNIX=1
AC_DEFINE(HAVE_UNIX)

dnl Nonstandard exported symbols
AC_SUBST(version)
AC_SUBST(jadedir)
AC_SUBST(jadeexecdir)
AC_SUBST(lispdir)
AC_SUBST(opt_enable_dumped)
AC_SUBST(dumped_lisp_files)
AC_SUBST(dump_flags)
AC_SUBST(HAVE_UNIX)
AC_SUBST(HAVE_X11)
AC_SUBST(dynamic_file_suffix)
AC_SUBST(DL_CFLAGS)
AC_SUBST(DL_LDFLAGS)
AC_SUBST(JADE_LIBOBJS)

dnl Build all files
AC_OUTPUT(${output_files})

dnl If it doesn't look like GNU Make is being used, give a friendly warning
tem=`make --version -f /dev/null 2>&1 | grep GNU`
if test "x$tem" = "x"; then
  AC_MSG_WARN([You need to use GNU Make when compiling Jade])
fi

dnl Local variables:
dnl major-mode: sh-mode
dnl End:
