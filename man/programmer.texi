@c The Programmer's Manual -*-Texinfo-*-

@chapter Programming Jade
@cindex Programming Jade
@cindex Lisp, Jade's programming language

This chapter of the manual is a full guide to Jade's Lisp programming
language, including documentation for most of the built-in functions.

@menu
* Intro::                       Introduction and Lisp conventions

* Data Types::                  Data types and values in Lisp
* Numbers::                     Integers and arithmetic functions
* Sequences::                   Ordered sequences of data values
* Symbols::                     Symbols are uniquely named objects

* Evaluation::                  Evaluating expressions
* Control Structures::          Special forms. Conditionals, loops, etc@dots{}
* Variables::                   Symbols represent named variables
* Functions::                   Functions are the building blocks of Lisp
                                  programs
* Macros::                      User-defined control structures

* Streams::                     Data sinks and sources; character streams
* Loading::                     Programs are stored in files
* Compiled Lisp::               Making programs run faster

* Hooks::                       Hooks allow the extending of Jade
* Buffers::                     Buffers allow editing of files
* Windows::                     Windows receive input and display buffers
* Positions::                   Coordinates in buffers and cursor movement
* Marks::                       Marks represent the position of a character
                                  in a file
* Glyph Tables::                Controlling the glyphs rendered for each
                                  ASCII character

* Input Events::                Objects which represent input events
* Keymaps::                     Mappings between events and commands
* Event Loop::                  The event loop reads input events and
                                  invokes commands

* Editing Files::               Files are edited in buffers
* Text::                        Functions to edit buffers with
* Writing Modes::               Creating new editing modes
* Prompting::                   Interactively asking the user a question

* Files::                       Manipulating files in the filing system
* Processes::                   Jade can launch and control subprocesses
                                  when running under Unix

* Miscellaneous Functions::     Functions which don't fit elsewhere in
                                  this manual

* Debugging::                   How to debug Lisp programs
* Tips::                        General recommendations for Lisp programmers
@end menu

@node Intro, Data Types, , Programming Jade
@section Introduction
@cindex Introduction, Lisp

As you have probably gathered by now, Jade is largely controlled by its
built in programming language: a dialect of Lisp containing many
extensions (non-standard data types and functions) to make it suitable
for controlling an editor. Through this language Jade can be customised and
extended.

I have attempted to make the ``standard'' portion of the language (i.e.
anything a normal Lisp would have; not related to editing) as compatible
with GNU Emacs Lisp as possible. In some areas this rule doesn't apply,
there will usually be a good reason for this. A few functions have been
inspired by Common Lisp.

The areas of the language which control the @emph{editor} are @emph{not}
compatible with Emacs; some functions may be similar but since the two
editors are fundamentally different I have not attempted to conform with
the Emacs API.

All programs written using only the information in this manual should
be compatible with future revisions of Jade.

This following sections explain some of the most important Lisp concepts
and the conventions I've used in this manual.

@menu
* nil and t::                   Boolean values in Lisp
* The Lisp Reader::             Basic program structure
* Notation::                    Special glyphs used
* Descriptions::                How functions and variables are documented
@end menu

@node nil and t, The Lisp Reader, , Intro
@subsection nil and t
@cindex nil and t
@cindex t
@cindex Boolean values

The two boolean values in Lisp are the symbols @code{nil} (FALSE) and
@code{t} (TRUE). Both these symbols always evaluate to themselves (so they
do not have to be quoted), any attempt to change their values is an error.

All of the conditional instructions regard @emph{anything} which is not
@code{nil} as being TRUE (i.e. not-FALSE). The actual symbol @code{t}
should be used where a TRUE boolean value must be explicitly stated to
increase the clarity of the code.

This is not the end of the story; @code{nil} actually has another meaning:
it represents the empty list. This is a consequence of how lists are
constructed in Lisp, a list of zero elements is stored as the symbol
@code{nil}.

To the Lisp system itself there is absolutely no difference between @code{()}
(the notation for a list with zero elements) and @code{nil} (the symbol nil).
When writing code however, the list notation is usually used when the
programmer regards the value as a list and the @code{nil} notation when
its value as a boolean is to be emphasised.

@node The Lisp Reader, Notation, nil and t, Intro
@subsection The Lisp Reader
@cindex The Lisp reader
@cindex Reader, the Lisp

Lisp programs and functions are stored internally as normal Lisp data
objects, the Lisp Reader is the process used to translate textual
descriptions of Lisp objects into the data structures used to represent
the objects.

The Lisp Reader is the collection of internal functions accessed by the
@code{read} Lisp function. It reads a character at a time from an input
stream until it has parsed a whole Lisp object.

@xref{Data Types}.

@node Notation, Descriptions, The Lisp Reader, Intro
@subsection Notation
@cindex Notation
@cindex Manual notation

Wherever an example of evaluating a Lisp form is shown it will be
formatted like this,

@lisp
(+ 1 2)
    @result{} 3
@end lisp

@noindent
The glyph @samp{@result{}} is used to show the computed value of a form.

When two forms are shown as being exactly equivalent to one another the
glyph @samp{@equiv{}} is used, for example,

@lisp
(car some-variable) @equiv{} (nth 0 some-variable)
@end lisp

Evaluating some forms result in an error being signalled, this is denoted
by the @samp{@error{}} glyph.

@lisp
(read-file "/tmp/foo")
    @error{} File error: No such file or directory, /tmp/foo
@end lisp

@node Descriptions, , Notation, Intro
@subsection Descriptions
@cindex Descriptions
@cindex Functions, descriptions of
@cindex Variables, descriptions of

The simplest type of descriptions are the descriptions of variables
(@pxref{Variables}), they look something like,

@defvar grains-of-sand
This imaginary variable contains the number of grains of sand in a
one-mile long stretch of an averagely sandy beach.
@end defvar

Hooks (@pxref{Hooks}) are also described in this format, the only
difference is that @samp{Variable:} is replaced by @samp{Hook:}.

Functions (@pxref{Functions}) and macros (@pxref{Macros}) have more complex
descriptions; as well as the name of the thing being described, they also
have a list of arguments which the thing will accept. Each argument in
the list is named and may be referred to in the body of the description.

Two `special' arguments may be used, @samp{&optional} and @code{&rest}.
They have the same meaning as when used in the lambda-list of a function
definition (@pxref{Lambda Expressions}), that is @samp{&optional} means
that all further arguments are optional, and @samp{&rest} means that
zero or more argument values are coalesced into a list to be used
as the value of the following argument.

An example function definition follows.

@defun useless-function first &optional second &rest tail
This function returns a list consisting of the values @var{second} (when
undefined the number 42 is used), all the items in the list @var{tail}
and @var{first}.

@lisp
(useless-function 'foo 'bar 'xyz 20)
    @result{} (bar xyz 20 foo)

(useless-function '50)
    @result{} (42 50)
@end lisp
@end defun

Macros and commands (@pxref{Commands}) are defined in the same way with
@samp{Macro:} or @samp{Command:} replacing @samp{Function:}.

Special forms (@pxref{Special Forms}) are described similarly to functions
except that the argument list is formatted differently since special forms
are, by definition, more flexible in how they treat their arguments. Optional
values are enclosed in square brackets (@samp{[@var{optional-arg}]}) and
three dots (@samp{@var{repeated-arg}@dots{}}) indicate where zero or
more arguments are allowed.

@node Data Types, Numbers, Intro, Programming Jade
@section Data Types
@cindex Data types

The way that data values are represented in Lisp is fundamentally different
to more ``conventional'' languages such as C or Pascal: in Lisp each piece
of data (a @dfn{Lisp Object}) has two basic attributes, the actual data
and a tag value defining the @emph{type} of the object. This means that type
checking is performed on the actual data itself, not on the ``variable''
holding the data.

All Lisp objects are a member of one of the primitive types; these are
types built into the Lisp system and can represent things like strings,
integers, cons cells, vectors, etc@dots{}

More complex types of object can be constructed from these primitive types,
for example a vector of three elements could be regarded as a type
@code{triple} if necessary. In general, each separate type provides a
predicate function which returns @code{t} when applied to an object of its
type.

@menu
* Types Summary::               List of the most common types
* Read Syntax::                 Some types can be constructed from source code
* Printed Representation::      All types can be printed
* Equality Predicates::         How to test two objects for equality
* Comparison Predicates::       Comparing two objects as scalars
* Type Predicates::             Each type has a predicate defining it
* Garbage Collection::          Reusing memory from stale objects
@end menu

@node Types Summary, Read Syntax, , Data Types
@subsection Types Summary
@cindex Types summary
@cindex Data types, summary of

Each separate data type is documented in its own section, this is a just a
table of the more common types.

@table @dfn
@item Integer
32-bit signed integers. @xref{Numbers}.

@item Cons cell
An object containing two other Lisp objects. @xref{Cons Cells}.

@item List
A sequence of objects, in Lisp lists are not primitive types, instead they
are made by chaining together Cons cells. @xref{Lists}.

@item Vector
A one-dimensional array of objects. @xref{Vectors}.

@item String
A vector of characters. @xref{Strings}.

@item Array
An ordered sequence of objects which can be accessed in constant time,
either a vector or a string. @xref{Sequences}.

@item Sequence
An ordered sequence of objects, either a list or an array.
@xref{Sequences}.

@item Symbol
A symbol is a named object; they are used to provide named variables and
functions. @xref{Symbols}.

@item File
A link to a file in the operating system's filing system, allows access
to the file as a stream. @xref{Files}.

@item Stream
Serial data sinks and sources. @xref{Streams}.

@item Void
No type, only used in symbols to represent an unset function or variable
value.

@item Buffer
A ``space'' in which text can be edited, buffers may be displayed in a
window and hence edited by the user. @xref{Buffers}.

@item Window
A physical window in the underlying window-system, used for input and
output.

@item Position
A pair of integers, used to represent the coordinates of a character in
a buffer. @xref{Positions}.

@item Mark
A position in a specified file, this file may either be a buffer in memory
or a named file. @xref{Marks}.

@item Process
An object through which processes may be created and controlled.
@xref{Processes}.

@item Glyph Table
A lookup-table which is used to map characters in a buffer to the sequence
of glyphs they are rendered as. @xref{Glyph Tables}.

@item Keymap
A set of key-sequence-to-command mappings; when installed in a buffer it
controls how the editor reacts to all input from the user. @xref{Keymaps}.

@item Event
An (input-) event from a window.
@end table

@node Read Syntax, Printed Representation, Types Summary, Data Types
@subsection Read Syntax
@cindex Read syntax
@cindex Syntax of objects

As previously noted the Lisp reader translates textual descriptions of
Lisp objects into the object they describe (source files are simply
descriptions of objects). However, not all data types can be created
in this way: in fact the only types which can are integers, strings,
symbols, cons cells (or lists) and vectors, all others have to be
created by calling functions.

@cindex Comments
Note that comments in a Lisp program are introduced by the semi-colon
character (@samp{;}). Whenever the Lisp reader encounters a semi-colon
where it's looking for the read syntax of a new Lisp object it will
discard the rest of the line of input. @xref{Comment Styles}.

The @dfn{read syntax} of an object is the string which when given to the
reader as input will produce the object. The read syntax of each type
of object is documented in that type's main section of this manual but
here is a small taste of how to write each type.

@table @asis
@item Integers
An integer is simply the number written in either decimal, octal (when the
number is preceded by @samp{0}) or hexadecimal (when the number is preceded
by @samp{0x}). An optional minus sign may be the first character in a
number. Some examples are,

@lisp
42
    @result{} 42

0177
    @result{} 127

0xff
    @result{} 255

-0x10
    @result{} -16
@end lisp

@item Strings
The read syntax of a string is simply the string with a double-quote
character (@samp{"}) at each end, for more details see @ref{Strings}.

@lisp
"This is a string"
@end lisp

@item Cons cells
A cons cell is written in what is known as @dfn{dotted pair notation} and is
just the two objects in the cell separated by a dot and the whole thing in
parentheses,

@lisp
(@var{car} . @var{cdr})
@end lisp

@item Lists
The syntax of a list is similar to a cons cell (since this is what lists
are made of): no dot is used and there may be zero or more objects,

@lisp
(@var{object1} @var{object2} @var{object3} @dots{})

("foo" ("bar" "baz") 100)
@end lisp

@noindent
The second example is a list of three elements, a string, another list and
a number.

@item Vectors
The read syntax of a vector is very similar to that of a list, simply
use square brackets instead of parentheses,

@lisp
[@var{object1} @var{object2} @var{object3} @dots{}]
@end lisp

@item Symbols
A symbol's read syntax is simply its name, for example the read syntax of
a symbol called @samp{my-symbol} is,

@lisp
my-symbol
@end lisp
@end table

@node Printed Representation, Equality Predicates, Read Syntax, Data Types
@subsection Printed Representation
@cindex Printed representation

The @dfn{printed representation} of an object is the string produced
when the object is printed (with one of the @code{print} functions), this
will usually be very similar to the read syntax of the object
(@pxref{Read Syntax}).

Objects which do not have a read syntax @emph{do} have a printed
representation, it will normally be of the form,

@lisp
#<relevant text>
@end lisp

@noindent
where the ``relevant text'' is object-dependent and usually describes
the object and its contents. The reader will signal an error if it
encounters a description of an object in the format @samp{#<@dots{}>}.

@node Equality Predicates, Comparison Predicates, Printed Representation, Data Types
@subsection Equality Predicates
@cindex Equality predicates
@cindex Predicates, equality

@defun eq arg1 arg2
Returns @code{t} when @var{arg1} and @var{arg2} are the same object. Two
objects are the same object when they occupy the same place in memory and
hence modifying one object would alter the other. The following Lisp
fragments may illustrate this,

@lisp
(eq "foo" "foo")	;the objects are distinct
    @result{} nil

(eq t t)		;the same object -- the symbol @code{t}
    @result{} t
@end lisp

Note that the result of @code{eq} is undefined when called on two integer
objects with the same value, see @code{eql}.
@end defun

@defun equal arg1 arg2
The function @code{equal} compares the structure of the two objects @var{arg1}
and @var{arg2}. If they are considered to be equivalent then @code{t} is
returned, otherwise @code{nil} is returned.

@lisp
(equal "foo" "foo")
    @result{} t

(equal 42 42)
    @result{} t

(equal 42 0)
    @result{} nil

(equal '(x . y) '(x . y))
    @result{} t
@end lisp
@end defun

@defun eql arg1 arg2
This function is a cross between @code{eq} and @code{equal}: if @var{arg1}
and @var{arg2} are both numbers then the value of these numbers are compared.
Otherwise it behaves in exactly the same manner as @code{eq} does.

@lisp
(eql 3 3)
    @result{} t

(eql 1 2)
    @result{} nil

(eql "foo" "foo")
    @result{} nil

(eql 'x 'x)
    @result{} t
@end lisp
@end defun

@node Comparison Predicates, Type Predicates, Equality Predicates, Data Types
@subsection Comparison Predicates
@cindex Comparison predicates
@cindex Predicates, comparison

These functions compare their two arguments in a scalar fashion, the arguments
may be of any type but the results are only meaningful for numbers, strings
(ASCII values of each byte compared until a non-matching pair is found then
those two values are compared as numbers) and positions.

@defun > arg1 arg2
Returns @code{t} when @var{arg1} is `greater than' @var{arg2}.
@end defun

@defun >= arg1 arg2
Returns @code{t} when @var{arg1} is `greater than or equal to' @var{arg2}.
@end defun

@defun < arg1 arg2
Returns @code{t} when @var{arg1} is `less than' @var{arg2}.
@end defun

@defun <= arg1 arg2
Returns @code{t} when @var{arg1} is `less than or equal to' @var{arg2}.
@end defun

@node Type Predicates, Garbage Collection, Comparison Predicates, Data Types
@subsection Type Predicates
@cindex Type predicates
@cindex Predicates, type

Each type has a corresponding predicate which defines the objects which
are members of that type.

@itemize @bullet
@item
@code{integerp}

@item
@code{numberp}

@item
@code{null}

@item
@code{consp}

@item
@code{listp}

@item
@code{vectorp}

@item
@code{subrp}

@item
@code{functionp}

@item
@code{sequencep}

@item
@code{stringp}

@item
@code{symbolp}

@item
@code{posp}

@item
@code{bufferp}

@item
@code{windowp}

@item
@code{markp}

@item
@code{processp}

@item
@code{filep}

@item
@code{keymapp}

@item
@code{eventp}

@item
@code{commandp}
@end itemize

The documentation for these functions is with the documentation for the
relevant type.

@node Garbage Collection, , Type Predicates, Data Types
@subsection Garbage Collection
@cindex Garbage collection

In Lisp, data objects are used very freely; a side effect of this is
that it is not possible to (easily) know when an object is @dfn{stale},
that is, no references to it exist and it can therefore be reused.

The @dfn{garbage collector} is used to overcome this problem; whenever
enough new data objects have been allocated to make it worthwhile,
everything stops and the garbage collector works its way through
memory deciding which objects are still in use and which are stale.
The stale objects are then recorded as being available for reuse and
evaluation continues again.

@defun garbage-collect
Runs the garbage collector, usually this function doesn't need to
be called manually.
@end defun

@defvar garbage-threshold
The number of bytes of data which must be allocated before evaluation
will pause and the garbage collector called.

Its default value is about 100K.
@end defvar

@xref{Idle Actions}.

@node Numbers, Sequences, Data Types, Programming Jade
@section Numbers
@cindex Numbers
@cindex Integers

Currently Jade is only capable of representing integers, for this it uses
signed 32-bit integers: this gives a range of -2147483648 through 0 to
2147483647.

The read syntax of an integer is simply the number written in decimal,
octal or hexadecimal. If the integer starts with the string @samp{0x} it
is assumed to be hexadecimal or if it starts with a zero it is treated
as octal. The first character may be an optional minus or plus sign (this
should come before any base-specifier). Examples of valid integer read
syntaxes for the number 42 could be @samp{42}, @samp{0x2a}, @samp{052},
@samp{+052}, @dots{}

An integer's printed representation is simply the number printed in
decimal with a preceding minus sign if it is negative.

@defun numberp object
This function returns @code{t} if @var{object} is a number.
@end defun

@defun integerp object
This function returns @code{t} when @var{object} is an integer.
@end defun

@menu
* Arithmetic Functions::        Adding and substracting@dots{}
* Bitwise Functions::           Using integers as bit-sequences
* Numeric Predicates::          Comparing numbers
* Characters::                  Integers are used to represent characters
@end menu

@node Arithmetic Functions, Bitwise Functions, , Numbers
@section Arithmetic Functions
@cindex Arithmetic Functions
@cindex Numbers, arithmetic functions

There are a number of functions which perform arithmetic operations on
numbers, they take a varying number of integer objects as their arguments
then return a new integer object as their result.

Note that none of these functions check for overflow.

@defun + number1 &rest numbers
This functions adds its arguments then returns their sum. 
@end defun

@defun - number1 &rest numbers
If this function is just given one argument (@var{number1}) that number is
negated and returned. Otherwise each of @var{numbers} is subtracted from
a running total starting with the value of @var{number1}.

@lisp
(- 20)
    @result{} -20

(- 20 10 5)
    @result{} 5
@end lisp
@end defun

@defun * number1 &rest numbers
This function multiplies its arguments then returns the result.
@end defun

@defun / number1 &rest numbers
This function performs division, a running-total (initialised from
@var{number1} is successively divided by each of @var{numbers} then
the result is returned.

@lisp
(/ 100 2)
    @result{} 50

(/ 200 2 5)
    @result{} 20
@end lisp
@end defun

@defun % dividend divisor
Returns the remainder from dividing @var{dividend} by @var{divisor}.

@lisp
(mod 5 3)
    @result{} 2
@end lisp
@end defun

@defun 1+ number
This function returns the result of adding one to @var{number}.

@lisp
(1+ 42)
    @result{} 43
@end lisp
@end defun

@defun 1- number
Returns @var{number} minus one.
@end defun

@node Bitwise Functions, Numeric Predicates, Arithmetic Functions, Numbers
@section Bitwise Functions
@cindex Bitwise functions
@cindex Numbers, bitwise functions

These functions operate on the bit string which an integer is made of.

@defun lsh number count
This function bit-shifts the integer @var{number} @var{count} bits to the
left, if @var{count} is negative @var{number} is shifted to the right
instead.

@lisp
(lsh 1 8)
    @result{} 256

(lsh 256 -8)
    @result{} 1
@end lisp
@end defun

@defun ash number count
Similar to @code{lsh} except that an arithmetical shift is done, this means
that the sign of @var{number} is always preserved.

@lisp
(ash 1 8)
    @result{} 256

(ash -1 2)
    @result{} -4
@end lisp
@end defun

@defun logand number1 &rest numbers
This function uses a bit-wise logical `and' operation to combine all its
arguments (there must be at least one argument).

@lisp
(logand 15 8)
    @result{} 8

(logand 15 7 20)
    @result{} 4
@end lisp
@end defun

@defun logior number1 &rest numbers
Uses a bit-wise logical `inclusive-or' to combine all its arguments (there
must always be at least one argument).

@lisp
(logior 1 2 4)
    @result{} 7
@end lisp
@end defun

@defun logxor number1 &rest numbers
Uses a bitwise logical `exclusive-or' to combine all its arguments
(there must be at least one).

@lisp
(logxor 7 3)
    @result{} 4
@end lisp
@end defun

@defun lognot number
This function inverts all the bits in @var{number}.

@lisp
(lognot 0)
    @result{} -1

(lognot 2)
    @result{} -3

(lognot -1)
    @result{} 0
@end lisp
@end defun

@node Numeric Predicates, Characters, Bitwise Functions, Numbers
@section Numeric Predicates
@cindex Numeric predicates
@cindex Numbers, predicates on
@cindex Predicates on numbers

For the documentation of the functions @code{>}, @code{<}, @code{>=} and
@code{<=} see @ref{Comparison Predicates}.

@defun = number1 number2
This function returns @code{t} if the two integers @var{number1} and
@var{number2} have the same value.

@lisp
(= 1 1)
    @result{} t

(= 1 0)
    @result{} nil
@end lisp
@end defun

@defun /= number1 number2
This function will return @code{t} if @var{number1} and @var{number2}
and not equal to each other.

@lisp
(/= 1 1)
    @result{} nil

(/= 1 0)
    @result{} t
@end lisp
@end defun

@defun zerop number
Returns @code{t} if @var{number} is equal to zero.
@end defun

@node Characters, , Numeric Predicates, Numbers
@subsection Characters
@cindex Characters

In Jade characters are stored in integers. Their read syntax is a question
mark followed by the character itself which may be an escape sequence
introduced by a backslash. For details of the available escape sequences
see @ref{Strings}.

@lisp
?a
    @result{} 97

?\n
    @result{} 10

?\177
    @result{} 127
@end lisp

@defun alpha-char-p character
This function returns @code{t} when @var{character} is one of the
alphabetic characters.

@lisp
(alpha-char-p ?a)
    @result{} t
@end lisp
@end defun

@defun upper-case-p character
When @var{character} is one of the upper-case characters this function
returns @code{t}.
@end defun

@defun lower-case-p character
Returns @code{t} when @var{character} is lower-case.
@end defun

@defun digit-char-p character
This function returns @code{t} when @var{character} is one of the decimal
digit characters.
@end defun

@defun alphanumericp character
This function returns @code{t} when @var{character} is either an alphabetic
character or a decimal digit character.
@end defun

@defun space-char-p character
Returns @code{t} when @var{character} is a white-space character (space, tab,
newline or form feed).
@end defun

@defun char-upcase character
This function returns the upper-case equivalent of @var{character}. If
@var{character} is already upper-case or has no upper-case equivalent it
is returned unchanged.

@lisp
(char-upcase ?a)
    @result{} 65                       ;`A'

(char-upcase ?A)
    @result{} 65                       ;`A'

(char-upcase ?!)
    @result{} 33                       ;`!'
@end lisp
@end defun

@defun char-downcase character
Returns the lower-case equivalent of the character @var{character}.
@end defun

@node Sequences, Symbols, Numbers, Programming Jade
@section Sequences
@cindex Sequences
@cindex Arrays

Sequences are ordered groups of objects, there are several primitive
types which can be considered sequences, each with its own good and
bad points.

A sequence is either an array or a list, where an array is either a vector
or a string.

@defun sequencep object
This function returns @code{t} if @var{object} is a sequence, @code{nil}
otherwise.
@end defun

@menu
* Cons Cells::                  An ordered pair of two objects
* Lists::                       Chains of cons cells
* Vectors::                     A chunk of memory holding a number of objects
* Strings::                     Strings are efficiently-stored vectors
* Array Functions::             Accessing elements in vectors and strings
* Sequence Functions::          These work on any type of sequence
@end menu

@node Cons Cells, Lists, , Sequences
@subsection Cons Cells
@cindex Cons cells
@cindex Sequences, cons cells

A @dfn{cons cell} is an ordered pair of two objects, the @dfn{car} and
the @dfn{cdr}.

The read syntax of a cons cell is an opening parenthesis followed by the
read syntax of the car, a dot, the read syntax of the cdr and a closing
parenthesis. For example a cons cell with a car of 10 and a cdr of
the string @samp{foo} would be written as,

@lisp
(10 . "foo")
@end lisp

@defun cons car cdr
This function creates a new cons cell. It will have a car of @var{car} and
a cdr of @var{cdr}.

@lisp
(cons 10 "foo")
    @result{} (10 . "foo")
@end lisp
@end defun

@defun consp object
This function returns @code{t} if @var{object} is a cons cell and @code{nil}
otherwise.

@lisp
(consp '(1 . 2))
    @result{} t

(consp nil)
    @result{} nil

(consp (cons 1 2))
    @result{} t
@end lisp
@end defun

@cindex Atom
In Lisp an @dfn{atom} is any object which is not a cons cell (and is,
therefore, atomic).

@defun atom object
Returns @code{t} if @var{object} is an atom (not a cons cell).
@end defun

Given a cons cell there are a number of operations which can be performed
on it.

@defun car cons-cell
This function returns the object which the car of the cons cell @var{cons-cell}.

@lisp
(car (cons 1 2))
    @result{} 1

(car '(1 . 2))
    @result{} 1
@end lisp
@end defun

@defun cdr cons-cell
This function returns the cdr of the cons cell @var{cons-cell}.

@lisp
(cdr (cons 1 2))
    @result{} 2

(cdr '(1 . 2))
    @result{} 2
@end lisp
@end defun

@defun rplaca cons-cell new-car
This function sets the value of the car in the cons cell @var{cons-cell} to
@var{new-car}. The value returned is @var{new-car}.

@lisp
(setq x (cons 1 2))
    @result{} (1 . 2)
(rplaca x 3)
    @result{} 3
x
    @result{} (3 . 2)
@end lisp
@end defun

@defun rplacd cons-cell new-cdr
This function is similar to @code{rplacd} except that the cdr slot of
@var{cons-cell} is modified.
@end defun

@node Lists, Vectors, Cons Cells, Sequences
@subsection Lists
@cindex Lists

A list is a sequence of zero or more objects, the main difference between
lists and vectors is that lists are more dynamic: they can change size,
be split, reversed, concatenated, etc@dots{} very easily.

In Lisp lists are not a primitive type; instead singly-linked lists are
created by chaining cons cells together (@pxref{Cons Cells}).

@defun listp object
This functions returns @code{t} when its argument, @var{object}, is a
list (i.e. either a cons cell or @code{nil}).
@end defun

@menu
* List Structure::              How lists are built from cons cells
* Building Lists::              Dynamically creating lists
* Accessing List Elements::     Getting at the elements which make the list
* Modifying Lists::             How to alter the contents of a list
* Association Lists::           Lists can represent relations
* Infinite Lists::              Circular data structures in Lisp
@end menu

@node List Structure, Building Lists, , Lists
@subsubsection List Structure
@cindex List structure

Each element in a list is given its own cons cell and stored in the car of
that cell. The list object is then constructed by making the cdr of a cell
contain the cons cell of the next element (and hence the whole tail of the
list). The cdr of the cell containing the last element in the list is
@code{nil}. A list of zero elements is represented by the symbol @code{nil}.

The read syntax of a list is an opening parenthesis, followed by the read
syntax of zero or more space-separated objects, followed by a closing
parenthesis. Alternatively, lists can be constructed `manually' using
dotted-pair notation.

All of the following examples result in the same list of five elements: the
numbers from zero to four.

@lisp
(0 1 2 3 4)

(0 . (1 . (2 . (3 . (4 . nil)))))

(0 1 2 . (3 4))
@end lisp

An easy way to visualise lists and how they are constructed is to see each
cons cell in the list as a separate @dfn{box} with pointers to its car and
cdr,

@example
+-----+-----+
|  o  |  o----> cdr
+--|--+-----+
   |
    --> car
@end example

Complex box-diagrams can now be drawn to represent lists. For example the
following diagram represents the list @code{(1 2 3 4)}.

@example
+-----+-----+   +-----+-----+   +-----+-----+   +-----+-----+
|  o  |  o----> |  o  |  o----> |  o  |  o----> |  o  |  o----> nil
+--|--+-----+   +--|--+-----+   +--|--+-----+   +--|--+-----+
   |               |               |               |
    --> 1           --> 2           --> 3           --> 4
@end example

A more complex example, the list @code{((1 2) (foo bar))} can be drawn as,

@example
+-----+-----+                          +-----+-----+
|  o  |  o---------------------------> |  o  |  o----> nil
+--|--+-----+                          +--|--+-----+
   |                                      |
+-----+-----+   +-----+-----+          +-----+-----+   +-----+-----+
|  o  |  o----> |  o  |  o----> nil    |  o  |  o----> |  o  |  o----> nil
+--|--+-----+   +--|--+-----+          +--|--+-----+   +--|--+-----+
   |               |                      |               |
    --> 1           --> 2                  --> foo         --> bar
@end example

Sometimes when manipulating complex list structures it is very helpful to
make a diagram of what it is that's being manipulated.

@node Building Lists, Accessing List Elements, List Structure, Lists
@subsubsection Building Lists
@cindex Building lists
@cindex Lists, building

It has already been shown how you can create lists using the Lisp reader;
this method does have a drawback though: the list created is effectively
static. If you modify the contents of the list and that list was created
when a function was defined the list will remain modified for all future
invocations of that function. This is not usually a good idea, consider
the following function definition,

@lisp
(defun bogus-function (x)
  "Return a list whose first element is nil and whose second element is X."
  (let
      ((result '(nil nil)))     ;Static list which is filled in each time
    (rplaca (cdr result) x)     ; the function is called
    result))
@end lisp

@noindent
This function does in fact do what its documentation claims, but a problem
arises when it is called more than once,

@lisp
(setq x (bogus-function 'foo))
    @result{} (nil foo)
(setq y (bogus-function 'bar))
    @result{} (nil bar)               ;The first result has been destroyed
x
    @result{} (nil bar)               ;See!
@end lisp

This example is totally contrived --- no one would ever write a function
like the one in the example but it nicely demonstrates the need for
a dynamic method of creating lists.

@defun list &rest elements
This function creates a list out of its arguments, if zero arguments are
given the empty list, @code{nil}, is returned.

@lisp
(list 1 2 3)
    @result{} (1 2 3)

(list (major-version-number) (minor-version-number))
    @result{} (3 2)

(list)
    @result{} nil               ;Equivalent to `()'
@end lisp
@end defun

@defun make-list length &optional initial-value
This function creates a list @var{length} elements long. If the
@var{initial-value} argument is given it defines the value of all elements
in the list, if it is not given they are all @code{nil}.

@lisp
(make-list 2)
    @result{} (nil nil)

(make-list 3 t)
    @result{} (t t t)

(make-list 0)
    @result{} nil
@end lisp
@end defun

@defun append &rest lists
This function creates a new list with the elements of each of its arguments
(which must be lists). Unlike the function @code{nconc} this function
preserves all of its arguments.

@lisp
(append '(1 2 3) '(4 5))
    @result{} (1 2 3 4 5)

(append)
    @result{} nil
@end lisp

What actually happens is that all arguments but the last are copied
then the last argument is linked on to the end of the list (uncopied).

@lisp
(setq foo '(1 2))
    @result{} (1 2)
(setq bar '(3 4))
    @result{} (3 4)
(setq baz (append foo bar))
    @result{} (1 2 3 4)
(eq (nthcdr 2 baz) bar)
    @result{} t
@end lisp

The following diagram shows the final state of the three variables more
clearly,

@example
foo--> +-----+-----+   +-----+-----+
       |  o  |  o----> |  o  |     |
       +--|--+-----+   +--|--+-----+
          |               |
          o--> 1          o--> 2   bar
          |               |          ->
baz--> +--|--+-----+   +--|--+-----+   +-----+-----+   +-----+-----+
       |  o  |  o----> |  o  |  o----> |  o  |  o----> |  o  |     |
       +-----+-----+   +-----+-----+   +--|--+-----+   +--|--+-----+
                                          |               |
                                           --> 3           --> 4
@end example

Note how @code{foo} and the first half of @code{baz} use the @emph{same}
objects for their elements --- copying a list only copies its cons cells, its
elements are reused. Also note how the variable @code{bar} actually
references the mid-point of @code{baz} since the last list in an @code{append}
call is not copied.
@end defun

@defun reverse list
This function returns a new list; it is made from the elements of the list
@var{list} in reverse order. Note that this function does not alter its
argument.

@lisp
(reverse '(1 2 3 4))
    @result{} (4 3 2 1)
@end lisp
@end defun

As a postscript to this section, the function used as an example at the
beginning could now be written as,

@lisp
(defun not-so-bogus-function (x)
  (list nil x))
@end lisp

Also note that the @code{cons} function can be used to create lists by hand
and to add new elements onto the front of a list.

@node Accessing List Elements, Modifying Lists, Building Lists, Lists
@subsubsection Accessing List Elements
@cindex Accessing list elements
@cindex Lists, accessing elements

The most powerful method of accessing an element in a list is via a
combination of the @code{car} and @code{cdr} functions. There are other
functions which provide an easier way to get at the elements in a flat
list. These will usually be faster than a string of @code{car} and @code{cdr}
operations.

@defun nth count list
This function returns the element @var{count} elements down the list,
therefore to access the first element use a @var{count} of zero (or even
better the @code{car} function). If there are too few elements in the list
and no element number @var{count} can be found @code{nil} is returned.

@lisp
(nth 3 '(0 1 2 3 4 5))
    @result{} 3

(nth 0 '(foo bar)
    @result{} foo
@end lisp
@end defun

@defun nthcdr count list
This function takes the cdr of the list @var{list} @var{count} times,
returning the last cdr taken.

@lisp
(nthcdr 3 '(0 1 2 3 4 5))
    @result{} (3 4 5)

(nthcdr 0 '(foo bar))
    @result{} (foo bar)
@end lisp
@end defun

@defun last list
This function returns the last element in the list @var{list}. If the
list has zero elements @code{nil} is returned.

@lisp
(last '(1 2 3))
    @result{} 3

(last '())
    @result{} nil
@end lisp
@end defun

@defun member object list
This function scans through the list @var{list} until it finds an element
which is @code{equal} to @var{object}. The tail of the list (the cons cell
whose car is the matched object) is then returned. If no elements match
@var{object} then the empty list @code{nil} is returned.

@lisp
(member 'c '(a b c d e))
    @result{} (c d e)

(member 20 '(1 2))
    @result{} nil
@end lisp
@end defun

@defun memq object list
This function is similar to @code{member} except that comparisons are
performed by the @code{eq} function not @code{equal}.
@end defun

@node Modifying Lists, Association Lists, Accessing List Elements, Lists
@subsubsection Modifying Lists
@cindex Modifying lists
@cindex Lists, modifying

The @code{nthcdr} function can be used in conjunction with the @code{rplaca}
function to modify an arbitrary element in a list. For example,

@lisp
(rplaca (nthcdr 2 '(0 1 2 3 4 5)) 'foo)
    @result{} foo
@end lisp

@noindent
sets the third element of the list @code{(0 1 2 3 4 5)} to the symbol
called @code{foo}.

There are also functions which modify the structure of a whole list. These
are called @dfn{destructive} operations because they modify the actual
structure of a list --- no copy is made. This can lead to unpleasant
side effects if care is not taken.

@defun nconc &rest lists
This function is the destructive equivalent of the function @code{append},
it modifies its arguments so that it can return a list which is the
concatenation of the elements in its arguments lists.

Like all the destructive functions this means that the lists given as
arguments are modified (specifically, the cdr of their last cons cell
is made to point to the next list). This can be seen with the
following example (similar to the example in the @code{append} documentation).

@lisp
(setq foo '(1 2))
    @result{} (1 2)
(setq bar '(3 4))
    @result{} (3 4)
(setq baz (nconc foo bar))
    @result{} (1 2 3 4)
foo
    @result{} (1 2 3 4)                ;`foo' has been altered!
(eq (nthcdr 2 baz) bar)
    @result{} t
@end lisp

The following diagram shows the final state of the three variables more
clearly,

@example
foo-->                           bar-->
baz--> +-----+-----+   +-----+-----+   +-----+-----+   +-----+-----+
       |  o  |  o----> |  o  |  o----> |  o  |  o----> |  o  |     |
       +--|--+-----+   +--|--+-----+   +--|--+-----+   +--|--+-----+
          |               |               |               |
           --> 1           --> 2             --> 3           --> 4
@end example
@end defun

@defun nreverse list
This function rearranges the cons cells constituting the list @var{list}
so that the elements are in the reverse order to what they were.

@lisp
(setq foo '(1 2 3))
    @result{} (1 2 3)
(nreverse foo)
    @result{} (3 2 1)
foo
    @result{} (1)                      ;`foo' wasn't updated when the list
                                ; was altered.
@end lisp
@end defun

@defun delete object list
This function destructively removes all elements of the list @var{list}
which are @code{equal} to @var{object} then returns the modified list.

@lisp
(delete t '(nil t nil t nil))
    @result{} (nil nil nil)
@end lisp

When this function is used to remove an element from a list which is stored
in a variable that variable must be set to the return value of the
@code{delete} function. Otherwise, if the first element of the list
has to be deleted (because it is @code{equal} to @var{object}) the value
of the variable will not change.

@lisp
(setq foo '(1 2 3))
    @result{} (1 2 3)
(delete 1 foo)
    @result{} (2 3)
foo
    @result{} (1 2 3)
(setq foo (delete 1 foo))
    @result{} (2 3)
@end lisp
@end defun

@defun delq object list
This function is similar to the @code{delete} function, the only difference
is that the @code{eq} function is used to compare @var{object} with each
of the elements in @var{list}, instead of the @code{equal} function which
is used by @code{delete}.
@end defun

@node Association Lists, Infinite Lists, Modifying Lists, Lists
@subsubsection Association Lists
@cindex Association lists
@cindex Alists
@cindex Lists, association

An @dfn{association list} (or @dfn{alist}) is a list mapping key values to
to other values. Each element of the alist is a cons cell, the car of which
is the @dfn{key}, the cdr is the value that it associates to. For example
an alist could look like,

@lisp
((fred . 20)
 (bill . 30))
@end lisp

@noindent
this alist has two keys, @code{fred} and @code{bill} which both associate
to an integer (20 and 30 respectively).

It is possible to make the associated values lists, this looks like,

@lisp
((fred 20 male)
 (bill 30 male)
 (sue  25 female))
@end lisp

@noindent
in this alist the symbol @code{fred} is associated with the list
@code{(20 male)}.

There are a number of functions which let you interrogate an alist with
a given key for its association.

@defun assoc key alist
This function scans the association list @var{alist} for the first element
whose car is @code{equal} to @var{key}, this element is then returned. If
no match of @var{key} is found @code{nil} is returned.

@lisp
(assoc 'two '((one . 1) (two . 2) (three . 3)))
    @result{} (two . 2)
@end lisp
@end defun

@defun assq key alist
Similar to the function @code{assoc} except that the function @code{eq} is
used to compare elements instead of @code{equal}.

It is not usually wise to use @code{assq} when the keys of the alist may not
be symbols --- @code{eq} won't think two objects are equivalent unless they
are the @emph{same} object!

@lisp
(assq "foo" '(("bar" . 1) ("foo" . 2)))
    @result{} nil
(assoc "foo" '(("bar" . 1) ("foo" . 2)))
    @result{} ("foo" . 2)
@end lisp
@end defun

@defun rassoc association alist
This function searches through @var{alist} until it finds an element whose
cdr is @code{equal} to @var{association}, that element is then returned.
@code{nil} will be returned if no elements match.

@lisp
(rassoc 2 '((one . 1) (two . 2) (three . 3)))
    @result{} (two . 2)
@end lisp
@end defun

@defun rassq association alist
This function is equivalent to @code{rassoc} except that it uses @code{eq}
to make comparisons.
@end defun

@node Infinite Lists, , Association Lists, Lists
@subsubsection Infinite Lists
@cindex Infinite lists
@cindex Circular lists
@cindex Lists, circular

Sometimes it is useful to be able to create `infinite' lists --- that is,
lists which appear to have no last element --- this can easily be done
in Lisp by linking the cdr of the last cons cell in the list structure
back to the beginning of the list.

@example
 ----------------------------------- 
|                                   |
 --> +-----+-----+   +-----+-----+  |
     |  o  |  o----> |  o  |  o----- 
     +--|--+-----+   +--|--+-----+
        |               |
         --> 1           --> 2
@end example

The diagram above represents the infinite list @code{(1 2 1 2 1 2 @dots{})}.

Infinite lists have a major drawback though, many of the standard list
manipulation functions can not be used on them. These functions work by
moving through the list until they reach the end. If the list has @emph{no}
end the function may never terminate and the only option is to send Jade an
interrupt signal (@pxref{Interrupting Jade}).

The only functions which may be used on circular lists are: the cons cell
primitives (@code{cons}, @code{car}, @code{cdr}, @code{rplaca}, @code{rplacd}),
@code{nth} and @code{nthcdr}.

Also note that infinite lists can't be printed.

@node Vectors, Strings, Lists, Sequences
@subsection Vectors

A vector is a fixed-size sequence of Lisp objects, each element may be
accessed in constant time --- unlike lists where the time taken to access
an element is proportional to the position of the element.

The read syntax of a vector is an opening square bracket, followed by zero
or more space-separated objects, followed by a closing square bracket. For
example,

@lisp
[zero one two three]
@end lisp

In general it is best to use vectors when the number of elements to be
stored is known and lists when the sequence must be more dynamic.

@defun vectorp object
This function returns @code{t} if its argument, @var{object}, is a vector.
@end defun

@defun vector &rest elements
This function creates a new vector containing the arguments given to the
function.

@lisp
(vector 1 2 3)
    @result{} [1 2 3]

(vector)
    @result{} []
@end lisp
@end defun

@defun make-vector size &optional initial-value
Returns a new vector, @var{size} elements big. If @var{initial-value} is
defined each element of the new vector is set to @var{initial-value}, otherwise
they are all @code{nil}.

@lisp
(make-vector 4)
    @result{} [nil nil nil nil]

(make-vector 2 t)
    @result{} [t t]
@end lisp
@end defun

@node Strings, Array Functions, Vectors, Sequences
@subsection Strings

A string is a vector of characters (@pxref{Characters}), they are generally
used for storing and manipulating pieces of text. Jade puts no restrictions
on the values which may be stored in a string --- specifically, the null
character (@samp{^@@}) may be stored with no problems.

The read syntax of a string is a double quote character, followed by the
contents of the string, the object is terminated by a second double quote
character. For example, @code{"abc"} is the read syntax of the string
@samp{abc}.

@cindex Escape sequences in strings
@cindex Strings, escape sequences
Any backslash characters in the string's read syntax introduce an escape
sequence; one or more of the following characters are treated specially to
produce the next @emph{actual} character in the string.

The following escape sequences are supported (all are shown without their
leading backslash @samp{\} character).

@table @samp
@item n
A newline character.

@item r
A carriage return character.

@item f
A form feed character.

@item t
A TAB character.

@item a
A `bell' character (this is Ctrl-g).

@item ^@var{c}
The `control' code of the character @var{c}. This is calculated by toggling
the seventh bit of the @emph{upper-case} version of @var{c}.

For example,

@lisp
\^C             ;A Ctrl-c character (ASCII value 3)
\^@@            ;The NUL character (ASCII value 0)
@end lisp

@item 012
The character whose ASCII value is the octal value @samp{012}. After the
backslash character the Lisp reader reads up to three octal digits and
combines them into one character.

@item x12
The character whose ASCII value is the hexadecimal value @samp{12}, i.e.
an @samp{x} character followed by one or two hex digits.
@end table

@defun stringp object
This function returns @code{t} if its argument is a string.
@end defun

@defun make-string length &optional initial-character
Creates a new string containing @var{length} characters, each character
is initialised to @var{initial-character} (or to spaces if
@var{initial-character} is not defined).

@lisp
(make-string 3)
    @result{} "   "

(make-string 2 ?$)
    @result{} "$$"
@end lisp
@end defun

@defun concat &rest args
This function concatenates all of its arguments, @var{args}, into a single
string which is returned. If no arguments are given then the null string
(@samp{}) results.

Each of the @var{args} may be a string, a character or a list or vector of
characters. Characters are stored in strings modulo 256.

@lisp
(concat "foo" "bar")
    @result{} "foobar"

(concat "a" ?b)
    @result{} "ab"

(concat "foo" [?b ?a ?r])
    @result{} "foobar"

(concat)
    @result{} ""
@end lisp
@end defun

@defun substring string start &optional end
This function creates a new string which is a partial copy of the string
@var{string}. The first character copied is @var{start} characters from
the beginning of the string. If the @var{end} argument is defined it is
the index of the character to stop copying at, if it is not defined
all characters until the end of the string are copied.

@lisp
(substring "xxyfoozwx" 3 6)
    @result{} "foo"

(substring "xyzfoobar" 3)
    @result{} "foobar"
@end lisp
@end defun

@defun string= string1 string2
This function compares the two strings @var{string1} and @var{string2} --- if
they are made from the same characters in the same order then @code{t} is
returned, else @code{nil}.

@lisp
(string= "one" "one")
    @result{} t

(string= "one" "two")
    @result{} nil
@end lisp

Note that an alternate way to compare strings (or anything!) is to use the
@code{equal} function.
@end defun

@defun string< string1 string2
This function returns @code{t} if @var{string1} is `less' than @code{string2}.
This is determined by comparing the two strings a character at a time, the
first pair of characters which do not match each other are then compared
with a normal `less-than' function.

In Jade the standard @code{<} function understands strings so @code{string<}
is just a macro calling that function.

@lisp
(string< "abc" "abd")
    @result{} t

(string< "abc" "abb")
    @result{} nil
@end lisp
@end defun

Functions are also available which match regular expressions with strings
(@pxref{Search and Match Functions}) and which apply a mapping to each
character in a string (@pxref{Translation Functions}).

@node Array Functions, Sequence Functions, Strings, Sequences
@subsection Array Functions
@cindex Array functions

@defun arrayp object
This function returns @code{t} if @var{object} is an array.
@end defun

@defun aref array position
Returns the element of the array (vector or string) @var{array} @var{position}
elements from the first element (i.e. the first element is numbered zero).
If no element exists at @var{position} in @var{array}, @code{nil} is
returned.

@lisp
(aref [0 1 2 3] 2)
    @result{} 2

(aref "abcdef" 3)
    @result{} 100                      ;`d'
@end lisp
@end defun

@defun aset array position value
This function sets the element of the array @var{array} with an index of
@var{position} (counting from zero) to @var{value}. An error is signalled
if element @var{position} does not exist. The result of the function is
@var{value}.

@lisp
(setq x [0 1 2 3])
    @result{} [0 1 2 3]
(aset x 2 'foo)
    @result{} foo
x
    @result{} [0 1 foo 3]
@end lisp
@end defun

@node Sequence Functions, , Array Functions, Sequences
@subsection Sequence Functions
@cindex Sequence functions

@defun length sequence
This function returns the length (an integer) of the sequence @var{sequence}.

@lisp
(length "abc")
    @result{} 3

(length '(1 2 3 4))
    @result{} 4

(length [x y])
    @result{} 2
@end lisp
@end defun

@defun copy-sequence sequence
Returns a new copy of the sequence @var{sequence}. Where possible (in lists
and vectors) only the `structure' of the sequence is newly allocated: the
same objects are used for the elements in both sequences.

@lisp
(copy-sequence "xy")
    @result{} "xy"

(setq x '("one" "two"))
    @result{} ("one" "two")
(setq y (copy-sequence x))
    @result{} ("one" "two")
(eq x y)
    @result{} nil
(eq (car x) (car y))
    @result{} t
@end lisp
@end defun

@defun elt sequence position
This function returns the element of @var{sequence} @var{position} elements
from the beginning of the sequence.

This function is a combination of the @code{nth} and @code{aref} functions.

@lisp
(elt [0 1 2 3] 1)
    @result{} 1

(elt '(foo bar) 0)
    @result{} foo
@end lisp
@end defun

@node Symbols, Evaluation, Sequences, Programming Jade
@section Symbols
@cindex Symbols

Symbols are objects with a name (usually a unique name), they are one of
the most important data structures in Lisp since they are used to
provided named variables (@pxref{Variables}) and functions (@pxref{Functions}).

@defun symbolp object
This function returns @code{t} when its argument is a symbol.
@end defun

@menu
* Symbol Syntax::               The read syntax of symbols
* Symbol Attributes::           The objects stored in a symbol
* Obarrays::                    Vectors used to store symbols
* Creating Symbols::            Allocating new symbols
* Interning::                   Putting a symbol into an obarray
* Property Lists::              Each symbol has a set of properties
@end menu

@node Symbol Syntax, Symbol Attributes, , Symbols
@subsection Symbol Syntax
@cindex Symbol syntax

The read syntax of a symbol is simply its name; if the name contains
any meta-characters (whitespace or any from @samp{()[]'";|}) they will have
to be entered specially. There are two ways to tell the reader that a
meta-character is actually part of the symbol's name:

@enumerate
@item
Precede the meta-character by a backslash character (@samp{\}), for example:

@lisp
xy\(z\)                 ;the symbol whose name is @samp{xy(z)}
@end lisp

@item
Enclose part of the name in vertical lines (two @samp{|} characters). All
characters after the starting vertical line are copied as-is until the
closing vertical line is encountered. For example:

@lisp
xy|(z)|                 ;the symbol @samp{xy(z)}
@end lisp
@end enumerate

Here are some example read syntaxes.

@lisp
setq                    ; @samp{setq}
|setq|                  ; @samp{setq}
\s\e\t\q                ; @samp{setq}
1                       ; the @emph{number} 1
\1                      ; the @emph{symbol} @samp{1}
|!$%zf78&|              ; @samp{!$%zf78&}
foo|(bar)|              ; @samp{foo(bar)}
foo\(bar\)              ; @samp{foo(bar)}
@end lisp

@node Symbol Attributes, Obarrays, Symbol Syntax, Symbols
@subsection Symbol Attributes
@cindex Symbol attributes

All symbols have four basic attributes, most important is the @dfn{print name}
of the symbol. This is a string containing the name of the symbol, after it
has been defined (when the symbol is first created) it may not be changed.

@defun symbol-name symbol
This function returns the print name of the symbol @var{symbol}.

@lisp
(symbol-name 'unwind-protect)
    @result{} "unwind-protect"
@end lisp
@end defun

Each symbol also has a @dfn{value} cell storing the value of this symbol when
it is referenced as a variable. Usually this cell is accessed implicitly by
evaluating a variable form but it can also be read via the @code{symbol-value}
function@footnote{Actually buffer-local variables complicate matters but
you'll learn about that later.} (@pxref{Variables}).

Similar to the value cell each symbol also has a @dfn{function} cell which
contains the function definition of the symbol (@pxref{Named Functions}). The
@code{symbol-function} function can be used to read this cell and the
@code{fset} function to set it.

Lastly, there is the symbol's @dfn{property list}, this is similar to an
alist (@pxref{Association Lists}) and provides a method of storing arbitrary
extra values in each symbol. @xref{Property Lists}.

@node Obarrays, Creating Symbols, Symbol Attributes, Symbols
@subsection Obarrays
@cindex Obarrays
@cindex Symbols, obarrays

An @dfn{obarray} is the structure used to ensure that no two symbols have
the same name and to provide quick access to a symbol given its name. An
obarray is basically a vector (with a slight wrinkle), each element of
the vector is a chain of symbols which share the same hash-value (a
@dfn{bucket}). These symbols are chained together through links which
are invisible to Lisp programs: if you examine an obarray you will see that
each bucket looks as though it has at most one symbol stored in it.

The normal way to reference a symbol is simply to type its name in the
program, when the Lisp reader encounters a name of a symbol it looks
in the default obarray for a symbol of that name. If the named symbol
doesn't exist it is created and hashed into the obarray --- this
process is known as @dfn{interning} the symbol, for more details see
@ref{Interning}.

@defvar obarray
This variable contains the obarray that the @code{read} function uses when
interning symbols. If you change this I hope you know what you're doing.
@end defvar

@defun make-obarray size
This function creates a new obarray with @var{size} hash buckets (this
should be a prime number for best results).

This is the only correct way of making an obarray.
@end defun

@defun find-symbol symbol-name &optional obarray
This function scans the specified obarray (@var{obarray} or the value of
the variable @code{obarray} if @var{obarray} is undefined) for a symbol
whose name is the string @var{symbol-name}. The value returned is the
symbol if it can be found or @code{nil} otherwise.

@lisp
(find-symbol "setq")
    @result{} setq
@end lisp
@end defun

@defun apropos regexp &optional predicate obarray
Returns a list of symbols from the obarray @var{obarray} (or the default)
whose print name matches the regular expression @var{regexp}. If
@var{predicate} is defined and not @code{nil}, each symbol which matches
@var{regexp} is applied to the function @var{predicate}, if the value
is @code{t} it is considered a match.

The @var{predicate} argument is useful for restricting matches to a certain
type of symbol, for example only commands.

@lisp
(apropos "^yank" 'commandp)
    @result{} (yank-rectangle yank yank-to-mouse)
@end lisp
@end defun

@node Creating Symbols, Interning, Obarrays, Symbols
@subsection Creating Symbols
@cindex Creating symbols
@cindex Symbols, creating

It is possible to allocate symbols dynamically, this is normally only
necessary when the symbol is to be interned in the non-default obarray
or the symbol is a temporary object which should not be interned (for
example: labels in a compiler?).

@defun make-symbol print-name
This function creates and returns a new, uninterned, symbol whose print
name is the string @var{print-name}. Its variable and function value cells
are void and it will have an empty property list.

@lisp
(make-symbol "foo")
    @result{} foo
@end lisp
@end defun

@defun gensym
This function returns a new, uninterned, symbol which has a unique print
name.

@lisp
(gensym)
    @result{} G0001

(gensym)
    @result{} G0002
@end lisp
@end defun

@node Interning, Property Lists, Creating Symbols, Symbols
@subsection Interning
@cindex Interning
@cindex Symbols, interning

@dfn{Interning} a symbol means to store it in an obarray so that it can
be found in the future: all variables and named-functions are stored in
interned symbols.

When a symbol is interned a hash function is applied to its print name to
determine which bucket in the obarray it should be stored in. Then it is
simply pushed onto the front of that bucket's chain of symbols.

Normally all interning is done automatically by the Lisp reader. When it
encounters the name of a symbol which it can't find in the default obarray
(the value of the variable @code{obarray}) it creates a new symbol of that
name and interns it. This means that no two symbols can have the same print
name, and that the read syntax of a particular symbol always produces the
same object (unless the value of @code{obarray} is altered).

@lisp
(eq 'some-symbol 'some-symbol)
    @result{} t
@end lisp

@defun intern symbol-name &optional obarray
This function uses @code{find-symbol} to search the @var{obarray} (or the
standard obarray) for a symbol called @var{symbol-name}. If a symbol of
that name is found it is returned, otherwise a new symbol of that name is
created, interned into the obarray, and returned.

@lisp
(intern "setq")
    @result{} setq

(intern "my-symbol" my-obarray)
    @result{} my-symbol
@end lisp
@end defun

@defun intern-symbol symbol &optional obarray
Interns the symbol @var{symbol} into the obarray @var{obarray} (or the
standard one) then returns the symbol. If @var{symbol} is currently
interned in an obarray an error is signalled.

@lisp
(intern-symbol (make-symbol "foo"))
    @result{} foo

(intern-symbol 'foo)
    @error{} Error: Symbol is already interned, foo
@end lisp
@end defun

@defun unintern symbol &optional obarray
This function removes the symbol @var{symbol} from the obarray @var{obarray}
then returns the symbol.

Beware! this function must be used with @emph{extreme} caution --- once you
unintern a symbol there's no way to recover it.

@lisp
(unintern 'setq)                ;This is extremely stupid
    @result{} setq
@end lisp
@end defun

@node Property Lists, , Interning, Symbols
@subsection Property Lists
@cindex Property lists
@cindex Symbols, property lists

Each symbol has a property list (or @dfn{plist}), this is a structure which
associates an arbitrary Lisp object with a key (usually a symbol). The
keys in a plist may not have any duplications (so that each property is
only defined once).

The concept of a property list is very similar to an association list
(@pxref{Association Lists}) but there are two main differences:

@enumerate
@item
Structure; each element of an alist represents one key/association pair. In
a plist each pair of elements represents an association: the first
is the key, the second the property. For example, where an alist may
be,

@lisp
((one . 1) (two . 2) (three . 3))
@end lisp

@noindent
a property list would be,

@lisp
(one 1 two 2 three 3)
@end lisp

@item
Plists have their own set of functions to modify the list. This is done
destructively, altering the property list (since the plist is stored in
only one location, the symbol, this is quite safe).
@end enumerate

@defun get symbol property
This function searches the property list of the symbol @var{symbol} for
a property @code{eq} to @var{property}. If such a property is found it
is returned, else the value @code{nil} is returned.

@lisp
(get 'if 'lisp-indent)
    @result{} 2

(get 'set 'lisp-indent)
    @result{} nil
@end lisp
@end defun

@defun put symbol property new-value
@code{put} sets the value of the property @var{property} to @var{new-value}
in the property list of the symbol @var{symbol}. If there is an
existing value for this property it is overwritten. The value returned
is @var{new-value}.

@lisp
(put 'foo 'prop 200)
    @result{} 200
@end lisp
@end defun

@defun symbol-plist symbol
Returns the property list of the symbol @var{symbol}.

@lisp
(symbol-plist 'if)
    @result{} (lisp-indent 2)
@end lisp
@end defun

@defun setplist symbol plist
This function sets the property list of the symbol @var{symbol} to
@var{plist}.

@lisp
(setplist 'foo '(zombie yes))
    @result{} (zombie yes)
@end lisp
@end defun

@node Evaluation, Control Structures, Symbols, Programming Jade
@section Evaluation
@cindex Evaluation
@cindex Evaluating Lisp forms
@cindex Lisp forms, evaluating

So far I have only discussed a few of the various data types available
and how the Lisp reader can convert textual descriptions of these types
into Lisp objects. Obviously there has to be a way of actually computing
something --- it would be difficult to write a useful program otherwise.

What sets Lisp apart from other languages is that in Lisp there is no
difference between programs and data: a Lisp program is just a
sequence of Lisp objects which will be interpreted when the program
is run.

The subsystem which does this interpreting is called the
@dfn{Lisp evaluator} and each expression to be evaluated is called
a @dfn{form}. The evaluator (the function @code{eval}) examines the
structure of the form that is applied to and computes the value of the
form within the current environment.

A form can be any type of data object; the only types which
the evaluator treats specially are symbols (which stand for variables)
and lists, anything else is returned as-is (and is called a
@dfn{self-evaluating form}).

@defun eval form
This function computes the value of the form which is its argument, within
the current environment. The computed value is then returned.
@code{eval} is the basic function for interpreting Lisp objects.
@end defun

@menu
* Symbol Forms::                How variables are accessed
* List Forms::                  Subroutine calls
* Self-Evaluating Forms::       Forms which don't get evaluated
* Quoting::                     How to prevent evaluation of forms
@end menu

@node Symbol Forms, List Forms, , Evaluation
@subsection Symbol Forms
@cindex Symbol forms
@cindex Forms, symbol
@cindex Forms, variable

When the evaluator is applied to a symbol the computed value of the form
is the object stored in the symbol's variable slot. Basically this means
that to get the value of a variable you simply write its name. For example,

@lisp
buffer-list
    @result{} (#<buffer *jade*> #<buffer programmer.texi>)
@end lisp

@noindent
this extract from a Lisp session shows the read syntax of a form to
get the value of the variable @code{buffer-list} and the result when
this form is evaluated.

Since forms are evaluated within the current environment the value of
a variable is its newest binding, or in the case of buffer-local variables,
its value in the current buffer. @xref{Variables}.

If the value of an evaluated symbol is void an error is signalled.

@node List Forms, Self-Evaluating Forms, Symbol Forms, Evaluation
@subsection List Forms
@cindex List forms

Forms which are lists are used to call a subroutine. The first element
of the list is the subroutine which is to be called; all further elements
are arguments to be applied to the subroutine.

There are several different types of subroutines available: functions,
macros, special forms and autoloads. When the evaluator finds a form
which is a list it tries to classify the form into one of these four types.
First of all it looks at the first element of the list, if it is a symbol
it gets the value from the function slot of the symbol (note that the
first element of a list form is @emph{never} evaluated itself). This value
(either the first element or the symbol's function value) is enough
to classify the form into one of the four types.

@menu
* Function Call Forms::         `Normal' subroutines
* Macro Call Forms::            Source code expansions
* Special Forms::               Abnormal control structures
* Autoload Forms::              Loading subroutines from files on the fly
@end menu

@node Function Call Forms, Macro Call Forms, , List Forms
@subsubsection Function Call Forms
@cindex Function call forms
@cindex Forms, function call

The first element of a function call form is the name of the function, this
can be either a symbol (in which case the symbol's function value is
indirected through to get the real function definition) or a lambda
expression (@pxref{Lambda Expressions}).

Any other elements of the list are forms to be evaluated (in left to
right order) and their values become the arguments to the function. The
function is applied to these arguments and the result that it returns
becomes the value of the form.

For example, consider the form @code{(/ 100 (1+ 4))}. This is a function
call to the function @code{/}. First the @code{100} form is evaluated: it
returns the value @code{100}, next the form @code{(1+ 4)} is evaluated. This
is also a function call and computes to a value of @code{5} which becomes
the second argument to the @code{/} function. Now the @code{/} function is
applied to its arguments of @code{100} and @code{5} and it returns the
value @code{20} which then becomes the value of the form @code{(/ 100 (1+ 4))}.

@lisp
(/ 100 (1+ 4))
@equiv{} (/ 100 5)
@result{} 20
@end lisp

Or another example,

@lisp
(+ (- 10 (1- 7)) (* (1+ 2) 4)
@equiv{} (+ (- 10 6) (* (1+ 2) 4)
@equiv{} (+ 4 (* (1+ 2) 4)
@equiv{} (+ 4 (* 3 4))
@equiv{} (+ 4 12)
@result{} 16
@end lisp

@node Macro Call Forms, Special Forms, Function Call Forms, List Forms
@subsubsection Macro Call Forms
@cindex Macro call forms
@cindex Forms, macro call

Macros are source code expansions, the general idea is that a macro
is a function which using the unevaluated arguments applied to it,
computes another form (the expansion of the macro and its arguments)
which is then evaluated to provide the value of the form. For more
details see @ref{Macros}.

@node Special Forms, Autoload Forms, Macro Call Forms, List Forms
@subsubsection Special Forms
@cindex Special forms
@cindex Forms, special

Special forms are built-in functions which the evaluator knows must be
handled specially. The main difference between a special form and a function
is that the arguments applied to a special form are @emph{not} automatically
evaluated --- if necessary the special form will evaluate arguments itself.
This will be noted in the documentation of the special form.

Special forms are generally used to provide control structures, for example,
all of the conditional constructs are special forms (if all of their arguments,
including the forms to be conditionally evaluated, were evaluated automatically
this would defeat the object of being conditional!).

The special forms supported by Jade are: @code{and}, @code{catch}, @code{cond},
@code{defconst}, @code{defmacro}, @code{defun}, @code{defvar},
@code{error-protect}, @code{function}, @code{if}, @code{let}, @code{let*},
@code{or}, @code{prog1}, @code{prog2}, @code{progn}, @code{quote}, @code{setq},
@code{setq-default}, @code{unless}, @code{unwind-protect}, @code{when},
@code{while}, @code{with-buffer}, @code{with-window}.

@node Autoload Forms, , Special Forms, List Forms
@subsubsection Autoload Forms
@cindex Autoload forms
@cindex Forms, autoload

Not all modules of Jade are needed at once, autoload forms provide a
means of marking that a function (or macro) is contained by a specific
file of Lisp code. The first time that the function is accessed the
autoload form will be evaluated; this loads the file that the function
is contained by then re-evaluates the list form.

By then the autoload form will have been overwritten in the symbol's
function slot by the true function (when it was loaded) so the form
will execute properly.

An autoload form is a list whose first element is the symbol @code{autoload},
for full details see @ref{Autoloading}.

@node Self-Evaluating Forms, Quoting, List Forms, Evaluation
@subsection Self-Evaluating Forms
@cindex Self-evaluating forms
@cindex Forms, self-evaluating
@cindex Forms, constant

The computed value of any form which is not a symbol or a list will
simply be the form itself and the form is said to be a @dfn{self-evaluating
form}.

Usually the only forms to be evaluated in this way will be numbers, strings
and vectors (since they are the only other data types which have read
syntaxes) but the effect is the same for other types of data.

This means that forms you know are self-evaluating do not have to be
quoted to be used as constants (like lists and symbols do).

@lisp
"foo"
    @result{} "foo"

(eval (current-buffer))
    @result{} #<buffer programmer.texi>
@end lisp

@node Quoting, , Self-Evaluating Forms, Evaluation
@subsection Quoting
@cindex Quoting

As the above sections explain some types of Lisp object have special
meaning to the Lisp evaluator (namely the symbol and list types) this
means that if you want to refer to a symbol or a list in a program you
can't (yet) because the evaluator will treat the form as either a
variable reference or a function call respectively.

To get around this Lisp uses something called @dfn{quoting}, the
@code{quote} special form simply returns its argument, without evaluating
it. For example,

@lisp
(quote my-symbol)
    @result{} my-symbol
@end lisp

@noindent
the @code{quote} form prevents the @code{my-symbol} being treated as a
variable --- it is effectively `hidden' from the evaluator.

Writing @samp{quote} all the time would be a bit boring so there is a
shortcut: the Lisp reader treats any form @var{x} preceded by a single quote
character (@samp{'}) as the form @code{(quote @var{x})}. So the example
above would normally be written as,

@lisp
'my-symbol
    @result{} my-symbol
@end lisp

@defspec quote form
This special form returns its single argument without evaluating it. This
is used to @dfn{quote} constant objects to prevent them from being
evaluated.
@end defspec

@node Control Structures, Variables, Evaluation, Programming Jade
@section Control Structures
@cindex Control Structures

Control structures are special forms or macros which control which forms
get evaluated, when they get evaluated and the number of times to
evaluate them. This includes conditional structures, loops, etc@dots{}

The simplest control structures are the sequencing structures; they are
used to evaluate a list of forms in left to right order.

@menu
* Sequencing Structures::       Evaluating several forms in sequence
* Conditional Structures::      Making decisions based on truth values
* Looping Structures::          `while' loops
* Non-Local Exits::             Exiting from several levels of evaluation
@end menu

@node Sequencing Structures, Conditional Structures, , Control Structures
@subsection Sequencing Structures
@cindex Sequencing structures
@cindex Control structures, sequencing

Each of the special forms in this section simply evaluates its argument
forms in left-to-right order. The only difference is the result they return.

The most widely used sequencing special form is @code{progn}: it
evaluates all its argument forms and returns the computed value of the last
one. Many other control structures are said to perform an @dfn{implicit progn},
this means that they call @code{progn} with a list of forms.

@code{progn} in Lisp is nearly analogous to a @code{begin@dots{}end} block
in Pascal; it is used in much the same places --- to allow you to
evaluate a sequence of form where only one form was allowed (for example
the true clause of an @code{if} structure).

@defspec progn forms@dots{}
All of the @var{forms} are evaluated sequentially (from left-to-right),
the result of the last evaluated @var{form} is the return value of this
structure. If no arguments are given to @code{progn} it returns @code{nil}.

@lisp
(progn 'one (+ 1 1) "three")
    @result{} "three"

(progn)
    @result{} nil
@end lisp
@end defspec

@defspec prog1 first forms@dots{}
This special form evaluates its @var{first} form then performs an
implicit progn on the rest of its arguments. The result of this
structure is the computed value of the first form.

@lisp
(prog1 'one (+ 1 1) "three")
    @result{} one
@end lisp
@end defspec

@defspec prog2 first second forms@dots{}
This is similar to @code{prog1} except that the evaluated value of
its @var{second} form is returned.

The @var{first} form is evaluated, then its @var{second}, then it
performs an implicit progn on the remaining arguments.

@lisp
(prog2 'one (+ 1 1) "three")
    @result{} 2
@end lisp
@end defspec

@node Conditional Structures, Looping Structures, Sequencing Structures, Control Structures
@subsection Conditional Structures
@cindex Conditional structures
@cindex Control structures, conditionals

Lisp provides a number of conditional constructs, the most complex of
which (@code{cond}) will take a list of conditions, the first of which
is @code{t} then has its associated list of forms evaluated. Theoretically
this is the only conditional special form necessary --- the rest could
be implemented as macros.

@defspec if condition true-form else-forms@dots{}
The @code{if} construct is the nearest thing in Lisp to the @dfn{if-then-else}
construct found in most programming languages.

First the @var{condition} form is evaluated, if it returns @code{t} (not
@code{nil}) the @var{true-form} is evaluated and its result returned. Otherwise
the result of an implicit progn on the @var{else-forms} is returned. If there
are no @var{else-forms} @code{nil} is returned.

Note that one of the @var{true-form} or the @var{else-forms} is completely
ignored --- it is not evaluated.

@lisp
(if (special-form-p 'if)
    "`if' is a special form"
  "`if' is not a special form")
    @result{} "`if' is a special form"
@end lisp
@end defspec

@defspec when condition true-forms@dots{}
@var{condition} is evaluated, if it is @code{t} the result of an implicit progn
on the @var{true-forms} is returned, otherwise @code{nil} is returned.

@lisp
(when t
  (message "Pointless")
  'foo)
    @result{} foo
@end lisp
@end defspec

@defspec unless condition else-forms@dots{}
This special forms first evaluates @var{condition}, if its computed value is
not @code{nil} its value is returned. Otherwise the @var{else-forms} are
evaluated sequentially, the value of the last is returned.
@end defspec

@defspec cond clause@dots{}
The @code{cond} special form is used to choose between an arbitrary number
of conditions. Each @var{clause} is a list; its car is the @var{condition}
the list which is the cdr of the @var{clause} is the @var{body-forms}. This
means that each @var{clause} looks something like:

@lisp
(@var{condition} @var{body-forms}@dots{})
@end lisp

@noindent
and a whole @code{cond} form looks like:

@lisp
(cond
 (@var{condition-1} @var{body-forms-1}@dots{})
 (@var{condition-2} @var{body-forms-2}@dots{})
 @dots{})
@end lisp

The @var{condition} in each @var{clause} is evaluated in sequence
(@var{condition-1}, then @var{condition-2}, @dots{}), the first one
which evaluates to a non-@code{nil} has an implicit progn performed on
its @var{body-forms}, the value of which is the value returned by the
@code{cond} form.

If the true @var{condition} has no @var{body-forms} the value returned
by @code{cond} is the value of the @var{condition}. If none of the
clauses has a non-@code{nil} @var{condition} the value of the @code{cond}
is @code{nil}.

Often you want a @dfn{default} clause; one which has its @var{body-forms}
to be evaluated if none of the other clauses are true. The way to
do this is to add a clause with a @var{condition} of @code{t} and
@var{body-forms} of whatever you want the default action to be.

@lisp
(cond
 ((stringp buffer-list))        ;Clause with no @var{body-forms}
 ((consp buffer-list)
  (setq x buffer-list)          ;Two @var{body-forms}
  t)
 (t                             ;Default clause
  (error "`buffer-list' is corrupted!")))
    @result{} t
@end lisp

All of the other conditionals can be written in terms of @code{cond},

@lisp
(if @var{c} @var{t} @var{e}@dots{}) @equiv{} (cond (@var{c} @var{t}) (t @var{e}@dots{}))

(when @var{c} @var{t}@dots{}) @equiv{} (cond (@var{c} @var{t}@dots{}))

(unless @var{c} @var{e}@dots{}) @equiv{} (cond (@var{e}) (t @var{e}@dots{}))
@end lisp
@end defspec

There are also a number of special forms which combine conditions together
by the normal logical rules.

@defspec or forms@dots{}
The first of the @var{forms} is evaluated, if it is non-@code{nil} its value
becomes the value of the @code{or} form and no more of @code{forms} are
evaluated. Otherwise this step is repeated for the next member of @var{forms}.

If all of the @var{forms} have been evaluated and none have a non-@code{nil}
value @code{nil} becomes the value of the @code{or} form.

If there are no @var{forms} @code{nil} is returned.

@lisp
(or nil 1 nil (beep))           ;@code{(beep)} won't be evaluated
    @result{} 1
@end lisp
@end defspec

@defspec and forms@dots{}
The first of the @var{forms} is evaluated. If it is @code{nil} no more
of the @var{forms} are evaluated and @code{nil} becomes the value of the
@code{and} structure. Otherwise the next member of @var{forms} is evaluated
and its value tested. If none of the @var{forms} are @code{nil} the computed
value of the last member of @var{forms} becomes the value of the @code{and}
form.

@lisp
(and 1 2 nil (beep))            ;@code{(beep)} won't be evaluated
    @result{} nil

(and 1 2 3)                     ;All forms are evaluated
    @result{} 3
@end lisp
@end defspec

@defun not object
This function inverts the boolean value of its argument. If @var{object}
is non-@code{nil}, @code{nil} is returned, otherwise @code{t} is returned.

@lisp
(not nil)
    @result{} t

(not t)
    @result{} nil

(not 42)
    @result{} nil
@end lisp
@end defun

@node Looping Structures, Non-Local Exits, Conditional Structures, Control Structures
@subsection Looping Structures
@cindex Looping structures
@cindex Control structures, looping

Jade's version of Lisp has only one structure for looping --- a @dfn{while}
loop similar to those found in most programming languages.

@defspec while condition body-forms@dots{}
The @var{condition} form is evaluated. If it is non-@code{nil} an implicit
progn is performed on the @var{body-forms} and the whole thing is repeated
again.

This continues until the @var{condition} form evaluates to @code{nil}. The
value of any @code{while} structure is @code{nil}.

@code{while} can be recursively defined in terms of @code{when}:

@lisp
(while @var{c} @var{b} @dots{})
@equiv{}
(when @var{c} (progn @var{b} @dots{} (while @var{c} @var{b} @dots{})))
@end lisp

@lisp
;; Step through a list @var{x}
(while @var{x}
  ;; Do something with the current element, @code{(car @var{x})}
  (setq @var{x} (cdr @var{x})))
@end lisp
@end defspec

@node Non-Local Exits, , Looping Structures, Control Structures
@subsection Non-Local Exits
@cindex Non-local exits
@cindex Control structures, non-local exits

A @dfn{non-local exit} is a transfer of control from the current point
of evaluation to a different point (somewhat similar to the much-maligned
@code{goto} statement in some imperative languages).

Non-local exits can either be used explicitly (@code{catch} and @code{throw})
or implicitly (errors).

@menu
* Catch and Throw::             Programmed non-local exits
* Function Exits::              Returning values from a function
* Cleanup Forms::               Forms which will always be evaluated
* Errors::                      Signalling that an error occurred
@end menu

@node Catch and Throw, Function Exits, , Non-Local Exits
@subsubsection Catch and Throw
@cindex Catch and throw
@cindex Non-local exits, catch and throw

The @code{catch} and @code{throw} structures are used to perform
explicit transfers of control. First a @code{catch} form is used to
setup a @dfn{tag}, this acts like a label for the C language's @code{goto}
statement. To transfer control a @code{throw} form is then used to
transfer to the named tag. The tag is destroyed and the @code{catch}
form exits with the value provided by the @code{throw}.

In a program this looks like,

@lisp
(catch '@var{tag}
  ;; Forms which may `throw' back to @var{tag}
  @dots{}
  (throw '@var{tag} @var{value})
  ;; Control has now passed to the `catch',
  ;; no more forms in this progn will be evaluated.
  @dots{})
    @result{} @var{value}
@end lisp

@noindent
where @var{tag} is the tag to be used (this is normally a symbol) and
@var{value} is the result of the @code{catch} form.

When a throw actually happens all catches in scope are searched for
one with a tag which is @code{eq} to the tag in the throw. If more than
one exists the most-recent is chosen. Now that the catch has been located
the environment is `wound-back' to the catch's position (i.e. local variables
are unbound, cleanup forms removed, unused catches forgotten, etc@dots{})
and all Lisp constructs between the current point of control and
the catch are exited.

For example,

@lisp
(let
    ((test 'outer))
  (cons (catch 'foo
          (let
              ((test 'inner))
            (throw 'foo test)
            (setq test 'unreachable)))  ;Never reached
        test))
    @result{} (inner . outer)
@end lisp

@noindent
when the throw executes the second binding of @code{test} is unwound and
the first binding comes back into effect. For more details on variable
binding see @ref{Local Variables}.

Note that catch tags are @emph{dynamically} scoped, the thrower does not
have to be within the same lexical scope (this means you can throw through
functions).

@defspec catch tag body-forms@dots{}
This special form defines a catch tag which will be accessible while the
@var{body-forms} are being evaluated.

@var{tag} is evaluated and recorded as the tag for this catch. Next the
@var{body-forms} are evaluated as an implicit progn. The value of the
@code{catch} form is either the value of the progn, or, if a @code{throw}
happened, the value specified in the @var{throw} form.

Before exiting the tag installed by this form is removed.
@end defspec

@defun throw tag &optional catch-value
This function transfers the point of control to the catch form with a
tag which is @code{eq} to @var{tag}. The value returned by this catch
form is either @var{catch-value} or @code{nil} if @var{catch-value} is
undefined.

If there is no catch with a tag of @var{tag} an error is signalled and
the editor returns to the top-level of evaluation.
@end defun

@node Function Exits, Cleanup Forms, Catch and Throw, Non-Local Exits
@subsubsection Function Exits
@cindex Function exits
@cindex Non-local exits, function exits

It is often useful to be able to immediately return control from a function
definition (like the C @code{return} statement). Jade's version of Lisp has
the @code{return} function for this.

@defun return &optional value
This function transfers control out of the most-recent lambda-expression
(i.e. a function or macro definition) so that the result of the lambda-
expression is @var{value}.

@lisp
(funcall '(lambda () (return 'x) 'y))
    @result{} x
@end lisp

The @code{'y} form is never evaluated since control is passed straight from
the @code{(return 'y)} form back to the @code{funcall} form.
@end defun

@node Cleanup Forms, Errors, Function Exits, Non-Local Exits
@subsubsection Cleanup Forms
@cindex Cleanup forms
@cindex Non-local exits, cleanup forms

It is sometimes necessary to be sure that a certain form is @emph{always}
evaluated, even when a non-local exit would normally bypass that form.
The @code{unwind-protect} special form is used to stop this happening.

@defspec unwind-protect body-form cleanup-forms@dots{}
The @var{body-form} is evaluated, if it exits normally the @var{cleanup-forms}
are evaluated sequentially then the value which the @var{body-form}
returned becomes the value of the @code{unwind-protect} form. If the
@var{body-form} exits abnormally though (i.e. a non-local exit happened)
the @var{cleanup-forms} are evaluated anyway and the non-local exit
continues.

One use of this is to ensure that an opened file is always closed, for
example,

@lisp
(catch 'foo
  (unwind-protect
      (let
          ((temporary-file (open (tmp-file-name) "w")))
        ;; Use @code{temporary-file}
        (write temporary-file "A test\n")
        ;; Now force a non-local exit
        (throw 'foo))
    ;; This is the @var{cleanup-form} it will @emph{always}
    ;; be evaluated no matter what happens.
    (close temporary-file)))
    @result{} nil
@end lisp
@end defspec

@node Errors, , Cleanup Forms, Non-Local Exits
@subsubsection Errors
@cindex Errors
@cindex Non-local exits, errors

Errors are a type of non-local exit; when a form can not be evaluated
properly an error is normally @dfn{signalled}. If an error-handler has
been installed for that type of error control is unwound back to the
handler and evaluation continues. If there is no suitable handler
control is passed back to the event loop of the most-recent recursive
edit and a suitable error message is printed.

@defun signal error-symbol data
Signals that an error has happened. @var{error-symbol} is a symbol
classifying the type of error, it should have a property @code{error-message}
(a string) which is the error message to be printed.

@var{data} is a list of objects which are relevant to the error --- they will
be made available to any error-handler or printed with the error message
otherwise.

@lisp
(signal 'void-value '(some-symbol))
    @error{} Value as variable is void: some-symbol
@end lisp
@end defun

@defvar debug-on-error
This variable is consulted by the function @code{signal}. If its value
is either @code{t} or a list containing the @var{error-symbol} to
@code{signal} as one of its elements, the Lisp debugger is entered.
When the debugger exits the error is signalled as normal.
@end defvar

When you expect an error to occur and need to be able to regain control
afterwards the @code{error-protect} form can be used.

@defspec error-protect body-form error-handlers@dots{}
@code{error-protect} evaluates the @var{body-form} with error
handlers in place.

Each of the @var{error-handlers} is a list whose car is a symbol
defining the type of error which this handler catches. The cdr of
the list is a list of forms to be evaluated sequentially when the
handler is invoked.

While the forms of the error handler are being evaluated the variable
@code{error-info} is bound to the value @code{(@var{error-symbol} . @var{data})}
(these were the arguments to the @code{signal} form which caused the
error).

The special value, the symbol @code{error}, in the car of one of the
@var{error-handlers} will catch @emph{all} types of errors.

@lisp
(error-protect
    (signal 'file-error '("File not found" "/tmp/foo"))
  (file-error
   error-info)
  (error
   (setq x z)))         ;Default handler
    @result{} (file-error "File not found" "/tmp/foo")
@end lisp
@end defspec

@node Variables, Functions, Control Structures, Programming Jade
@section Variables
@cindex Variables

In Lisp symbols are used to represent variables. Each symbol contains a
slot which is used to contain the value of the symbol when it is used
as a symbol.

The normal way to obtain the current value of a variable is simply to
evaluate the symbol it lives in (i.e. write the name of the variable
in your program).

@defun symbol-value variable
This function returns the value of the symbol @var{variable} in
the current environment.
@end defun

@menu
* Local Variables::             Creating temporary variables
* Setting Variables::           Altering a variable's value
* Scope and Extent::            Technical jargon
* Buffer-Local Variables::      Variables with distinct values in
                                  each buffer.
* Void Variables::              Some variables have no values
* Constant Variables::          Variables which may not be altered
* Defining Variables::          How to define a variable before
                                  using it
@end menu

@node Local Variables, Setting Variables, , Variables
@subsection Local Variables
@cindex Local variables
@cindex Variables, local

A @dfn{local variable} is a variable which has a temporary value
while a program is executing, for example, when a function is called
the variables which are the names of its arguments are temporarily
bound (a @dfn{binding} is a particular instance of a local variable)
to the values of the arguments passed to the function. When the function
call exits its arguments are unbound and the previous definitions of
the variables come back into view.

Even if a variable has more than one binding still `active' only the
most recent is visible --- there is absolutely no way the previous
bindings can be accessed until the bindings are unbound one-by-one.

A nice way of visualising variable binding is to think of each variable
as a stack. When the variable is bound to, a new value is pushed onto
the stack, when it is unbound the top of the stack is popped. Similarly
when the stack is empty the value of the variable is void
(@pxref{Void Variables}). Assigning a value to the variable
(@pxref{Setting Variables}) overwrites the top value on the stack with
a new value. When the value of the variable is required it is simply
read from the top of the stack.

Apart from function calls there are two special forms which perform
variable binding (i.e. creating local variables), @code{let} and @code{let*}.

@defspec let bindings body-forms@dots{}
@code{let} creates new variable bindings as specified by the @var{bindings}
argument then evaluates the @var{body-forms} in order. The variables
are then unbound to their state before this @code{let} form and the
value of the implicit progn of the @var{body-forms} becomes the value
of the @code{let} form.

The @var{bindings} argument is a list of the bindings to perform. Each
binding is either a symbol, in which case that variable is bound to
nil, or a list whose car is a symbol. The cdr of this list is a list
of forms which, when evaluated, give the value to bind the variable to.

@lisp
(setq foo 42)
    @result{} 42
(let
    ((foo (+ 1 2))
     bar)
  ;; Body forms
  (setq foo (1+ foo))   ;This sets the new binding
  (cons foo bar))
    @result{} (4 . nil)
foo
    @result{} 42        ;The original values is back
@end lisp

Note that no variables are bound until all the new values have been
computed (unlike in @code{let*}). For example,

@lisp
(setq foo 42)
    @result{} 42
(let
    ((foo 100)
     (bar foo))
  (cons foo bar))
    @result{} (100 . 42)
@end lisp

@noindent
Although @code{foo} is given a new binding this is not actually done
until all the new bindings have been computed, hence @code{bar} is bound to
the @emph{old} value of @code{foo}.
@end defspec

@defspec let* bindings body-forms@dots{}
This special form is exactly the same as @code{let} except for one
important difference: the new bindings are installed @emph{as they are
computed}.

You can see the difference by comparing the following example with the
last example in the @code{let} documentation (above),

@lisp
(setq foo 42)
    @result{} 42
(let*                   ;Using @code{let*} this time
    ((foo 100)
     (bar foo))
  (cons foo bar))
    @result{} (100 . 100)
@end lisp

@noindent
By the time the binding of @code{bar} is computed the new binding of
@code{foo} has already been installed.
@end defspec

@node Setting Variables, Scope and Extent, Local Variables, Variables
@subsection Setting Variables
@cindex Setting variables
@cindex Variables, setting

@dfn{Setting} a variable means to overwrite its current value (that is, the
value of its most recent binding) with a new one. The old value is
irretrievably lost (unlike when a new value is bound to a variable,
@pxref{Local Variables}).

@defspec setq variable form @dots{}
The special form @code{setq} is the usual method of altering the value of
a variable. Each @var{variable} is set to the result of evaluating its
corresponding @var{form}. The last value assigned becomes the value of
the @code{setq} form.

@lisp
(setq x 20 y (+ 2 3))
    @result{} 5
@end lisp

@noindent
In the above example the variable @code{x} is set to @code{20} and @code{y}
is set to the value of the form @code{(+ 2 3)} (5).

When the variable is marked as being buffer-local (@pxref{Buffer-Local
Variables}) the current buffer's instance of the variable is set.
@end defspec

@defun set variable new-value
The value of the variable @var{variable} (a symbol) is set to @var{new-value}
and the @var{new-value} is returned.

This function is used when the @var{variable} is unknown until run-time, and
therefore has to be computed from a form.

@lisp
(set 'foo 20)
@equiv{}
(setq foo 20)           ;@code{setq} means `set-quoted'
    @result{} 20
@end lisp
@end defun

@node Scope and Extent, Buffer-Local Variables, Setting Variables, Variables
@subsection Scope and Extent
@cindex Scope and extent
@cindex Variables, scope and extent of

In Jade's version of Lisp all variables have @dfn{indefinite scope} and
@dfn{dynamic extent}. What this means is that references to variables
may occur anywhere in a program (i.e. bindings established in one
function are not only accessible within that function, that's lexical
scope) and that references may occur at any point in the time between
the binding being created and it being unbound.

The combination of indefinite scope and dynamic extent is often
termed @dfn{dynamic scope}.

As an aside, Lisp objects have @dfn{indefinite extent}, meaning that
the object will exist for as long as there is a possibility of it
being referenced (and possibly longer --- until the garbage collector
runs).

Note that in Common Lisp only those variables declared `special' have
indefinite scope and dynamic extent.

Try not to abuse the dynamic scoping, although it is often very useful
to be able to bind a variable in one function and use it in another
this can be confusing if not controlled and documented properly.

A quick example of the use of dynamic scope,

@lisp
(defun foo (x)
  (let
      ((foo-var (* x 20)))
    (bar x)
    @dots{}

(defun bar (y)
  ;; Since this function is called from
  ;; the function @code{foo} it can refer
  ;; to any bindings which @code{foo} can.
  (setq y (+ y foo-var))
  @dots{}
@end lisp

@node Buffer-Local Variables, Void Variables, Scope and Extent, Variables
@subsection Buffer-Local Variables
@cindex Buffer-local variables
@cindex Variables, buffer-local

It is often very useful to be able to give variables different values for
different editor buffers --- most major modes need to record some
buffer-specific information. Jade allows you to do this by giving a
variable buffer-local bindings.

There are two strengths of buffer-local variables: you can either give
a variable a buffer-local value in a single buffer, with other buffers
treating the variable as normal, or a variable can be marked as being
@emph{automatically} buffer-local, each time the variable is set the
current buffer's value of the variable is updated.

Each buffer maintains an alist of the symbols which have buffer-local
values in the buffer and the actual values themselves, this alist may
be read with the @code{buffer-variables} function.

When the value of a variable is referenced (via the @code{symbol-value}
function) the current buffer's alist of local values is examined for
a binding of the variable being referenced; if one is found that is
the value of the variable, otherwise the @dfn{default value} (the
value stored in the symbol's value cell) is used.

Setting a variable also searches for a buffer-local binding; if one
exists its value is modified, not the default value. If the
variable has previously been marked as being automatically buffer-local
(by @code{make-variable-buffer-local}) a buffer-local binding is
automatically created if one doesn't already exist.

Currently there is one main problem with buffer-local variables:
they can't have temporary values bound to them (or rather, they can
but I guarantee it won't work how you expect), so for the time
being, don't try to bind local values (with @code{let} or @code{let*})
to a buffer-local variable.

@defun make-local-variable symbol
This function gives the variable @var{symbol} a buffer-local binding in
the current buffer. The value of this binding will be the same as the
variable's default value.

If @var{symbol} already has a buffer-local value in this buffer nothing
happens.

Returns @var{symbol}.
@end defun

@defun make-variable-buffer-local symbol
This function marks the variable @var{symbol} as being automatically
buffer-local.

This means that any attempts at setting the value of @var{symbol} will
actually set the current buffer's local value (if necessary a new
buffer-local binding will be created in the buffer).

Returns @var{symbol}.

@lisp
(make-variable-buffer-local 'buffer-modtime)
    @result{} buffer-modtime
@end lisp
@end defun

@defun default-value symbol
This function returns the default value of the variable @var{symbol}.

@lisp
(setq foo 'default)
    @result{} default
(make-local-variable 'foo)      ;Create a value in this buffer
    @result{} foo
(setq foo 'local)
    @result{} local
foo
    @result{} local
(symbol-value 'foo)
    @result{} local
(default-value 'foo)
    @result{} default
@end lisp
@end defun

@defun default-boundp symbol
Returns @code{t} if the variable @var{symbol} has a non-void default
value.
@end defun

@defspec setq-default symbol form @dots{}
Similar to the @code{setq} special form except that the default value
of each @var{variable} is set. In non-buffer-local symbols there is
no difference between @code{setq} and @code{setq-default}.
@end defspec

@defun set-default symbol new-value
Sets the default value of the variable @var{symbol} to @var{new-value},
then returns @var{new-value}.
@end defun

@defun kill-local-variable symbol
This function removes the buffer-local binding of the variable @var{symbol}
from the current buffer (if one exists) then returns @var{symbol}.
@end defun

@defun kill-all-local-variables
This function removes all the buffer-local bindings associated with the
current buffer. Subsequently, any buffer-local variables referenced
while this buffer is current will use their default values.
@end defun

The usual way to define an automatically buffer-local variable is to use
@code{defvar} and @code{make-variable-buffer-local}, for example,

@lisp
(defvar my-local-variable @var{default-value}
  "Doc string for @code{my-local-variable}.")
(make-variable-buffer-local 'my-local-variable)
@end lisp

Note that if you want to reference the value of a buffer-local variable
in a buffer other than the current buffer, use the @code{with-buffer}
special form (@pxref{The Current Buffer}). For example, the form,

@lisp
(with-buffer @var{other-buffer} @var{some-variable})
@end lisp

@noindent
will produce the value of the variable @var{some-variable} in the
buffer @var{other-buffer}.

@node Void Variables, Constant Variables, Buffer-Local Variables, Variables
@subsection Void Variables
@cindex Void variables
@cindex Variables, void

A variable which has no value is said to be @dfn{void}, attempting to
reference the value of such a symbol will result in an error. It is
possible for the most recent binding of a variable to be void even though
the inactive bindings may have values.

@defun boundp variable
Returns @code{t} if the symbol @var{variable} has a value, @code{nil} if
its value is void.
@end defun

@defun makunbound variable
This function makes the current binding of the symbol @var{variable} be
void, then returns @var{variable}.

@lisp
(setq foo 42)
    @result{} 42
foo
    @result{} 42
(boundp 'foo)
    @result{} t
(makunbound 'foo)
    @result{} foo
(boundp 'foo)
    @result{} nil
foo
    @error{} Value as variable is void: foo
@end lisp
@end defun

@node Constant Variables, Defining Variables, Void Variables, Variables
@subsection Constant Variables
@cindex Constant variables
@cindex Variables, constant

In Lisp constants are represented by variables which have been marked as
being read-only. Any attempt to alter the value of a constant results
in an error.

Two of the most commonly used constants are @code{nil} and @code{t}.

@defun set-const-variable variable &optional read-write
This function defines whether or not the value of the symbol @var{variable}
may be modified. If @var{read-write} is @code{nil} or undefined the variable
is marked to be constant, otherwise it's marked to be a normal variable.
The value returned is @var{variable}.
@end defun

@defun const-variable-p variable
Returns @code{t} if the value of the symbol @var{variable} may be altered,
@code{nil} otherwise.
@end defun

Constants may behave a bit strangely when you compile the program they
are used in: the value of the constant is likely to be hardwired into
the compiled functions it is used in, and the constant is unlikely to
be @code{eq} to itself!

The compiler assumes that constant is always the same, whenever it is
evaluated. It may even be evaluated more than once. @xref{Compiled Lisp}.

The special form @code{defconst} can be used to define constants,
see @ref{Defining Variables}.

@node Defining Variables, , Constant Variables, Variables
@subsection Defining Variables
@cindex Defining variables
@cindex Variables, defining

The special forms @code{defvar} and @code{defconst} allow you to define
the global variables which will be used in a program. This is entirely
optional; it is highly recommended though.

@defspec defvar variable form [doc-string]
This special form defines a global variable, the symbol @var{variable}. If
the value of @var{variable} is void the @var{form} is evaluated and its
value is stored as the value of @var{variable} (note that the default
value is modified, never a buffer-local value).

If the @var{doc-string} argument is defined it is a string documenting
@var{variable}. This string is then stored as the symbol's
@code{variable-documentation} property and can be accessed by the
@code{describe-variable} function.

@lisp
(defvar my-variable '(x y)
  "This variable is an example showing the usage of the @code{defvar}
special form.")
    @result{} my-variable
@end lisp
@end defspec

@defspec defconst constant form [doc-string]
@code{defconst} defines a constant, the symbol @var{constant}. Its value
(in the case of a buffer-local symbol, its default value) is set to the
result of evaluating @var{form}. Note that unlike @code{defvar} the value
of the symbol is @emph{always} set, even if it already has a value.

The @var{doc-string} argument, if defined, is the documentation string
for the constant.

@lisp
(defconst the-answer 42
  "An example constant.")
    @result{} the-answer
@end lisp

@xref{Constant Variables}.
@end defspec

@node Functions, Macros, Variables, Programming Jade
@section Functions
@cindex Functions

A @dfn{function} is a Lisp object which, when applied to a sequence of
argument values, produces a value --- the function's @dfn{result}. It
may also produce side-effects. All Lisp functions return results --- there
is nothing like a procedure in Pascal.

Functions are the main building-block in Lisp programs, each program is
usually a system of inter-related functions.

There are two types of function: @dfn{primitive functions} are functions
written in the C language, these are sometimes called built-in functions,
the object containing the C code itself is called a @dfn{subr}. All other
functions are written in Lisp.

@defun functionp object
Returns @code{t} if @var{object} is a function (i.e. it can be used
as the function argument of @code{funcall}.

@lisp
(functionp 'set)
    @result{} t

(functionp 'setq)
    @result{} nil

(functionp #'(lambda (x) (+ x 2)))
   @result{} t
@end lisp
@end defun

@menu
* Lambda Expressions::          Structure of a function object
* Named Functions::             Functions can be named by symbols,
* Anonymous Functions::         Or they can be un-named
* Predicate Functions::         Functions which return boolean values
* Defining Functions::          How to write a function definition
* Calling Functions::           Functions can be called by hand
* Mapping Functions::           Map a function to the elements of a list
@end menu

@node Lambda Expressions, Named Functions, , Functions
@subsection Lambda Expressions
@cindex Lambda expressions
@cindex Functions, lambda expressions

@dfn{Lambda expressions} are used to create an object of type function
from other Lisp objects, it is a list whose first element is the
symbol @code{lambda}. All functions written in Lisp (as opposed to the
primitive functions in C) are represented by a lambda expression.

Note that a lambda expression is @emph{not} an expression, evaluating a
lambda expression will give an error (unless there is a function called
@code{lambda}).

The format of a lambda expression is:

@lisp
(lambda @var{lambda-list} [@var{doc}] [@var{interactive-declaration}] @var{body-forms}@dots{} )
@end lisp

@noindent
Where @var{lambda-list} is the argument specification of the function,
@var{doc} is an optional documentation string, @var{interactive-declaration}
is only required by editor commands (@pxref{Commands}) and the
@var{body-forms} is the actual function code (when the function is called
each form is evaluated in sequence, the last form's value is the result
returned by the function).

The @var{lambda-list} is a list, it defines how the argument values
applied to the function are bound to local variables which represent
the arguments within the function. At its simplest it is simply a
list of symbols, each symbol will have the corresponding argument
value bound to it. For example, the lambda list,

@lisp
(lambda (x y) (+ x y))
@end lisp

@noindent
takes two arguments, @code{x} and @code{y}. When this function is called
with two arguments the first will be bound to @code{x} and the second
to @code{y} (then the function will return their sum).

To complicate matters there are several @dfn{lambda-list keywords} which
modify the meaning of symbols in the lambda-list. Each keyword is
a symbol whose name begins with an ampersand, they are:

@table @code
@item &optional
All the variables following this keyword are considered @dfn{optional} (all
variables before the first keyword are @dfn{required}: an error will be
signalled if a required argument is undefined in a function call). If
an optional argument is undefined it will simply be given the value @code{nil}.

Note that optional arguments must be specified if a later optional argument
is also specified. Use @code{nil} to explicitly show that an optional
argument is undefined.

For example, if a function @code{foo} takes two optional arguments and
you want to call it with only the second argument defined, the first
argument must be specified as @code{nil} to ensure that the correct argument
value is bound to the correct variable.

@lisp
(defun foo (&optional arg-1 arg-2)
  @dots{}

(foo nil arg-2-value)   ;Leave the first argument undefined
@end lisp

@item &rest
The @code{&rest} keyword allows a variable number of arguments to be
applied to a function, all the argument values which have not been
bound to argument variables are simply consed into a list and bound
to the variable after the @code{&rest} keyword. For example, in,

@lisp
(lambda (x &rest y) @dots{})
@end lisp

@noindent
the first argument, @code{x}, is required. Any other arguments applied
to this function are made into a list and this list is bound to the
@code{y} variable.
@end table

When a function represented by a lambda-list is called the first thing that
happens is to bind the argument values to the argument variables. The
@var{lambda-list} and the list of argument values applied to the
function are worked through in parallel. Any required arguments which are
left undefined when the end of the argument values has been reached
causes an error.

After the arguments have been processed the @var{body-forms} are evaluated
by an implicit progn, the value of which becomes the value of the function
call. Finally, all argument variables are unbound and control passes
back to the caller.

@node Named Functions, Anonymous Functions, Lambda Expressions, Functions
@subsection Named Functions
@cindex Named functions
@cindex Functions, named

Functions are normally associated with symbols, the name of the symbol
being the same as the name of its associated function. Each symbol
has a special function cell (this is totally separate from the symbol's
value as a variable --- variables and functions may have the same name
without any problems occurring) which is used to store the function's
definition, either a lambda expression (@pxref{Lambda Expressions}) or
a subr (C code) object.

The evaluator knows to indirect through the function value of a symbol
in any function call (@pxref{Function Call Forms}) so the normal way
to call a function is simply write its name as the first element in
a list, any arguments making up the other elements in the list.
@xref{List Forms}.

The functions and special forms which take functions as their arguments
(i.e. @code{funcall}) can also take symbols. For example,

@lisp
(funcall 'message "An example")
@equiv{}
(message "An example")
@end lisp

@defun symbol-function symbol
Returns the value of the function cell in the symbol @var{symbol}.

@lisp
(symbol-function 'symbol-function)
    @result{} #<subr symbol-function>
@end lisp
@end defun

@defun fboundp symbol
This function returns @code{t} if the symbol @var{symbol} has a
non-void value in its function cell, @code{nil} otherwise.

@lisp
(fboundp 'setq)
    @result{} t
@end lisp
@end defun

@defun fset symbol new-value
Sets the value of the function cell in the symbol @var{symbol} to
@var{new-value}, then returns @var{new-value}.

This function is rarely used, see @ref{Defining Functions}.
@end defun

@defun fmakunbound symbol
This function makes the value of the function cell in @var{symbol} void,
then returns @var{symbol}.
@end defun

@node Anonymous Functions, Predicate Functions, Named Functions, Functions
@subsection Anonymous Functions
@cindex Anonymous functions
@cindex Functions, anonymous

When giving function names as arguments to functions it is useful to
give an actual function @emph{definition} (i.e. a lambda expression)
instead of the name of a function.

In Lisp, unlike most other programming languages, functions have no
inherent name. As seen in the last section named-functions are created
by storing a function in a special slot of a symbol, if you want, a
function can have many different names: simply store the function in
many different symbols!

So, when you want to pass a function as an argument there is the option
of just writing down its definition. This is especially useful with
functions like @code{mapcar} and @code{delete-if}. For example, the
following form removes all elements from the @var{list} which are
even and greater than 20.

@lisp
(setq @var{list} (delete-if #'(lambda (x)
                                (and (zerop (% x 2))
                                     (> x 20)))
                            @var{list}))
@end lisp

The lambda expression is very simple, it combines two predicates applied
to its argument.

Note that the function definition is quoted by @code{#'}, not the
normal @code{'}. This is a special shortcut for the @code{function} special
form (like @code{'} is a shortcut to @code{quote}). In general,
@code{#'@var{x}} is expanded by the Lisp reader to @code{(function @var{x})}.

@defspec function arg
This special form is nearly identical to the @code{quote} form, it
always returns its argument without evaluating it. The difference is
that the Lisp compiler knows to compile the @var{arg} into a byte-code
form (unless @var{arg} is a symbol in which case it is not compiled).

What this means is when you have to quote a function, use the @code{#'}
syntax.
@end defspec

@node Predicate Functions, Defining Functions, Anonymous Functions, Functions
@subsection Predicate Functions
@cindex Predicate functions
@cindex Boolean values, predicate functions

In Lisp, a function which returns a boolean `true' or boolean `false'
value is called a @dfn{predicate}. As is the convention in Lisp a
value of @code{nil} means false, anything else means true. The symbol
@code{t} is often used to represent a true value (in fact, sometimes
the symbol @code{t} should be read as @emph{any} non-@code{nil} value).

Another Lisp convention is that the names of predicate functions should
be the concept the predicate is testing for and either @samp{p} or @samp{-p}.

The @samp{p} variant is used when the concept name does not contain
any hyphens.

For example a predicate to test for the concept @dfn{const-variable} (a
variable which has a constant value, @pxref{Constant Variables}) would
be called @code{const-variable-p}. On the other hand a predicate
to test for the concept @dfn{buffer} (a Lisp object which is a buffer)
would be called @code{bufferp}.

@node Defining Functions, Calling Functions, Predicate Functions, Functions
@subsection Defining Functions
@cindex Defining functions
@cindex Functions, defining

Named functions are normally defined by the @code{defun} special form.

@defspec defun name lambda-list body-forms@dots{}
@code{defun} initialises the function definition of the symbol @var{name}
to the lambda expression resulting from the concatenation of the
symbol @code{lambda}, @var{lambda-list} and the @var{body-forms}. So,

@lisp
(defun foo (x y)
  @dots{}
@equiv{}
(fset 'foo #'(lambda (x y)
               @dots{}
@end lisp

The @var{body-forms} may contain a documentation string for the function
as its first form and an interactive calling specification as its first (if
there is no doc-string) or second form if the function may be called
interactively by the user (@pxref{Commands}).
@end defspec

An example function definition (actually a command) taken from Jade's
source is,

@lisp
(defun upcase-word (count)
  "Makes the next COUNT words from the cursor upper-case."
  (interactive "p")
  (let
      ((pos (forward-word count)))
    (upcase-area (cursor-pos) pos)
    (goto-char pos)))
@end lisp

@node Calling Functions, Mapping Functions, Defining Functions, Functions
@subsection Calling Functions
@cindex Calling functions
@cindex Functions, calling

Most of the time function calls are done by the evaluator when it detects
a function call form (@pxref{List Forms}); when the function to be called
is not known until run-time it is easier to use a special function to
call the function directly than create a custom form to apply to the
@code{eval} function.

@defun funcall function &rest args
Applies the argument values @var{args} to the function @var{function}, then
returns its result.

Note that the argument values @var{args} are @emph{not} evaluated again. This
also means that @code{funcall} can @emph{not} be used to call macros
or special forms --- they would need the unevaluated versions of @var{args},
which are not available to @code{funcall}.

@lisp
(funcall '+ 1 2 3)
    @result{} 6
@end lisp
@end defun

@defun apply function &rest args
Similar to @code{funcall} except that the last of its arguments is
a @emph{list} of arguments which are appended to the other members of
@var{args} to form the list of argument values to apply to the
function @var{function}.

Constructs a list of arguments to apply to the function @var{function}
from @var{args}.
@end defun

@node Mapping Functions, , Calling Functions, Functions
@subsection Mapping Functions
@cindex Mapping functions
@cindex Functions, mapping
@cindex Lists, mapping

A @dfn{mapping function} applies a function to each of a collection of
objects. Jade currently has two mapping functions, @code{mapcar} and
@code{mapc}.

@defun mapcar function list
Each element in the list @var{list} is individually applied to the
function @var{function}. The values returned are made into a new
list which is returned.

The @var{function} should be able to be called with one argument.

@lisp
(mapcar '1+ '(1 2 3 4 5))
    @result{} (2 3 4 5 6)
@end lisp
@end defun

@defun mapc function list
Similar to @code{mapcar} except that the values returned when each element
is applied to the function @var{function} are discarded. The value returned
is @var{list}.

This function is generally used where the side effects of calling the
function are the important thing, not the results.
@end defun

The two following functions are also mapping functions of a sort. They
are variants of the @code{delete} function (@pxref{Modifying Lists})
and use predicate functions to classify the elements of the list
which are to be deleted.

@defun delete-if predicate list
This function is a variant of the @code{delete} function. Instead of
comparing each element of @var{list} with a specified object, each
element of @var{list} is applied to the predicate function @var{predicate}.
If it returns @code{t} (i.e. not @code{nil}) then the element is destructively
removed from @var{list}.

@lisp
(delete-if 'stringp '(1 "foo" 2 "bar" 3 "baz"))
    @result{} (1 2 3)
@end lisp
@end defun

@defun delete-if-not predicate list
This function does the inverse of @code{delete-if}. It applies @var{predicate}
to each element of @var{list}, if it returns @code{nil} then the element
is destructively removed from the list.

@lisp
(delete-if-not 'stringp '(1 "foo" 2 "bar" 3 "baz"))
    @result{} ("foo" "bar" "baz")
@end lisp
@end defun

@node Macros, Streams, Functions, Programming Jade
@section Macros
@cindex Macros

@dfn{Macros} are used to extend the Lisp language, they are basically
a function which instead of returning its value, return a new form
which will produce the macro call's value when evaluated.

When a function being compiled calls a macro the macro is expanded
immediately and the resultant form is open-coded into the compiler's
output.

@menu
* Defining Macros::             Macros are defined like functions
* Macro Expansion::             How macros are used by the evaluator
* Compiling Macros::            The compiler expands macros at compile-
                                  time.
@end menu

@node Defining Macros, Macro Expansion, , Macros
@subsection Defining Macros
@cindex Defining macros
@cindex Macros, defining

Macros are defined in the same style as functions, the only difference
is the name of the special form used to define them.

A macro object is a list whose car is the symbol @code{macro}, its
cdr is the function which creates the expansion of the macro when
applied to the macro calls unevaluated arguments.

@defspec defmacro name lambda-list body-forms@dots{}
Defines the macro stored in the function cell of the symbol @var{name}.
@var{lambda-list} is the lambda-list specifying the arguments to the
macro (@pxref{Lambda Expressions}) and @var{body-forms} are the forms
evaluated when the macro is expanded. The first of @var{body-forms}
may be a documentation string describing the macro's use.
@end defspec

Here is a simple macro definition, it is a possible definition for
the @code{when} construct (which might even be useful if @code{when} wasn't
already defined as a special form@dots{}),

@lisp
(defmacro when (condition &rest body)
  "Evaluates @var{condition}, if it's non-@code{nil} evaluates the @var{body}
forms."
  (list 'if condition (cons 'progn body)))
@end lisp

@noindent
When a form of the type @code{(when @var{c} @var{b} @dots{})} is evaluated
the macro definition of @code{when} expands to the form
@code{(if @var{c} (progn @var{b} @dots{}))} which is then evaluated to
perform my when-construct.

When you define a macro ensure that the forms which produce the expansion
have no side effects; it would fail spectacularly when you attempt to
compile your program!

@node Macro Expansion, Compiling Macros, Defining Macros, Macros
@subsection Macro Expansion
@cindex Macro expansion

When a macro call is detected (@pxref{List Forms}) the function which
is the cdr of the macro's definition (@pxref{Defining Macros}) is applied
to the macro call's arguments. Unlike in a function call, the arguments
are @emph{not evaluated}, the actual forms are the arguments to the
macro's expansion function. This is so these forms can be rearranged by
the macro's expansion function to create the new form which will be evaluated.

There is a function which performs macro expansion, its main use is to
let the Lisp compiler expand macro calls at compile time.

@defun macroexpand form &optional environment
If @var{form} is a macro call @code{macroexpand} will expand that call
by calling the macro's expansion function (the cdr of the macro definition).
If this expansion is another macro call the process is repeated until
an expansion is obtained which is not a macro call, this form is
then returned.

The optional @var{environment} argument is an alist of macro
definitions to use as well as the existing macros; this is mainly used
for compiling purposes.

@lisp
(defmacro when (condition &rest body)
  "Evaluates @var{condition}, if it's non-@code{nil} evaluates the @var{body}
forms."
  (list 'if condition (cons 'progn body)))
    @result{} when

(macroexpand '(when x (setq foo bar)))
    @result{} (if x (progn (setq foo bar)))
@end lisp
@end defun

@node Compiling Macros, , Macro Expansion, Macros
@subsection Compiling Macros
@cindex Compiling macros
@cindex Macros, compiling

Although it may seem odd that macros return a form to produce a result
and not simply the result this is their most important feature. It
allows the expansion and the evaluation of the expansion to happen
at different times.

The Lisp compiler makes use of this; when it comes across a macro call
in a form it is compiling it uses the @code{macroexpand} function to
produce the expansion of that form which it then compiles straight into
the object code. Obviously this is good for performance (why evaluate the
expansion every time it is needed when once will do?).

Some rules do need to be observed to make this work properly:

@itemize @bullet
@item
When the compiler compiles a file it remembers the macros which have been
defined by that file; it can only expand a macro call if the definition
of the macro appears before the macro call itself (it can't read your mind).

@item
The macro expansion function (i.e. the definition of the macro) should
not have any side effects or evaluate its arguments (the value of a symbol
at compile-time probably won't be the same as its value at run-time).

@item
Macros which are defined by another file must be loaded so they can be
recognised. Use the @code{require} function, the compiler will evaluate
any top-level @code{require} forms it sees to bring in any macro
definitions used.
@end itemize

@node Streams, Loading, Macros, Programming Jade
@section Streams
@cindex Streams
@cindex Input and output

A @dfn{stream} is a Lisp object which is either a data sink (an
@dfn{output stream}) or a data source (an @dfn{input stream}). In
Jade all streams produce or consume sequences of 8-bit characters.

Streams are very flexible, functions using streams for their input
and output do not need to know what type of stream it is. For example
the Lisp reader (the @code{read} function) takes an input stream as its
one argument, it then reads characters from this stream until it has
parsed a whole object. This stream could be a file, a position in a
buffer, a function or even a string; the @code{read} function can not
tell the difference.

@defun streamp object
This function returns @code{t} if its argument is a stream.
@end defun

@menu
* Input Streams::               Types of input stream
* Output Streams::              Types of output stream
* Input Functions::             Functions to read from streams
* Output Functions::            How to output to a stream
@end menu

@node Input Streams, Output Streams, , Streams
@subsection Input Streams
@cindex Input streams
@cindex Streams, input

These are the possible types of input stream, for the functions which
use them see @ref{Input Functions}.

@table @code
@item @var{file}
Characters are read from the file object @var{file}, for the functions
which manipulate file objects see @ref{Files}.

@item @var{mark}
The marker @var{mark} points to the next character that will be read. Each
time a character is read the position that @var{mark} points to will
be advanced to the following character. @xref{Marks}.

@item @var{buffer}
Reads from the position of the cursor in the buffer @var{buffer}. This
position is advanced as characters are read.

@item (@var{buffer} . @var{position})
Characters are read from the position @var{position} in the buffer @var{buffer}.
@var{position} is advanced to the next character as each character is read.

@item @var{function}
Each time an input character is required the @var{function} is called with
no arguments. It should return the character read (an integer) or @code{nil}
if for some reason no character is available.

@var{function} should also be able to `unread' one character. When this
happens the function will be called with one argument --- the value of
the last character read. The function should arrange it so that the
next time it is called it returns this character. A possible implementation
could be,

@lisp
(defvar ms-unread-char nil
  "If non-nil the character which was pushed back.")

(defun my-stream (&optional unread-char)
  (if unread-char
      (setq ms-unread-char unread-char)
    (if ms-unread-char
        (prog1
          ms-unread-char
          (setq ms-unread-char nil))
      ;; Normal case -- read and return a character from somewhere
      @dots{}
@end lisp

@item nil
Read from the stream stored in the variable @code{standard-input}.
@end table

It is also possible to use a string as an input stream. The string to
be read from must be applied to the @code{make-string-input-stream} function
and the result from this function used as the input stream.

@defun make-string-input-stream string &optional start
Returns an input stream which will supply the characters of the string
@var{string} in order starting with the character at position @var{start}
(or from position zero if this argument is undefined).

@lisp
(read (make-string-input-stream "(1 . 2)"))
    @result{} (1 . 2)
@end lisp
@end defun

@defvar standard-input
The input stream which is used when no other is specified or is @code{nil}.
@end defvar

@node Output Streams, Input Functions, Input Streams, Streams
@subsection Output Streams
@cindex Output streams
@cindex Streams, output

These are the different types of output stream, for the functions which
use them see @ref{Output Functions}.

@table @code
@item @var{file}
Writes to the file object @var{file}. @xref{Files}.

@item @var{mark}
Writes to the position pointed to by the marked @var{mark}, then advances the
position of the mark.

@item @var{buffer}
Writes to @var{buffer} at the position of the cursor in that buffer, which is
then advanced.

@item (@var{buffer} . @var{position})
@var{position} in the buffer @var{buffer}. @var{position} is then moved over
the written text.

@item (@var{buffer} . t)
Writes to the end of the buffer @var{buffer}.

@item @var{function}
The function @var{function} is called with one argument, either a string
or a character. This should be used as the circumstances dictate. If the
function returns a number it is the number of characters actually used,
otherwise it is assumed that all the characters were successful.

@item @var{process}
Writes to the standard input of the process object @var{process}. If
@var{process} isn't running an error is signalled. @xref{Processes}. 

@item t
Appends the character(s) to the end of the status line message.

@item nil
Write to the stream stored in the variable @code{standard-output}.
@end table

It is also possible to store the characters sent to an output stream
in a string.

@defun make-string-output-stream
Returns an output stream. It accumulates the text sent to it for the benefit
of the @code{get-output-stream-string} function.
@end defun

@defun get-output-stream-string string-output-stream
Returns a string consisting of the text sent to the @var{string-output-stream}
since the last call to @var{get-output-stream-string} (or since this stream
was created by @code{make-string-output-stream}).

@lisp
(setq stream (make-string-output-stream))
    @result{} ("" . 0)
(prin1 keymap-path stream)
    @result{} ("(lisp-mode-keymap global-keymap)" . 64)
(get-output-stream-string stream)
    @result{} "(lisp-mode-keymap global-keymap)"
@end lisp
@end defun

@defvar standard-output
This variable contains the output stream which is used when no other
is specified (or when the given output stream is @code{nil}).
@end defvar

@node Input Functions, Output Functions, Output Streams, Streams
@subsection Input Functions
@cindex Input functions
@cindex Functions, input

@defun read-char stream
Read and return the next character from the input stream @var{stream}. If
the end of the stream is reached @code{nil} is returned.
@end defun

@defun read-line stream
This function reads one line of characters from the input stream @var{stream},
creates a string containing the line (including the newline character
which terminates the line) and returns it.

If the end of stream is reached before any characters can be read @code{nil}
is returned, if the end of stream is reached but some characters have
been read (but not the newline) these characters are made into a string
and returned.

Note that unlike the Common Lisp function of the same name, the newline
character is not removed from the returned string.
@end defun

@defun read stream
This function is the function which contains the Lisp reader
(@pxref{The Lisp Reader}). It reads as many characters from the input
stream @var{stream} as it needs to make the read syntax of a single
Lisp object (@pxref{Read Syntax}), this object is then returned.
@end defun

@defun read-from-string string &optional start
Reads one Lisp object from the string @var{string}, the first character
is read from position @var{start} (or position zero).

@lisp
(read-from-string @var{string} @var{start})
@equiv{}
(read (make-string-input-stream @var{string} @var{start}))
@end lisp
@end defun

@node Output Functions, , Input Functions, Streams
@subsection Output Functions
@cindex Output functions
@cindex Functions, output

@defun write stream data &optional length
Writes the specified character(s) to the output stream @var{stream}.
@var{data} is either the character or the string to be written. If
@var{data} is a string the optional argument @var{length} may
specify how many characters are to be written. The value returned
is the number of characters successfully written.

@lisp
(write standard-output "Testing 1.. 2.. 3..")
    @print{} Testing 1.. 2.. 3..
    @result{} 19
@end lisp
@end defun

@defun copy-stream input-stream output-stream
This function copies all characters which may be read from @var{input-stream}
to @var{output-stream}. The copying process is not stopped until the
end of the input stream is read. Returns the number of characters copied.

Be warned, if you don't choose the streams carefully you may get a deadlock
which only an interrupt signal can break!
@end defun

@defun print object &optional stream
Outputs a newline character to the output stream @var{stream}, then writes
a textual representation of @var{object} to the stream.

If possible, this representation will be such that @code{read} can
turn it into an object structurally similar to @var{object}. This will
@emph{not} be possible if @var{object} does not have a read syntax.

@var{object} is returned.

@lisp
(print '(1 2 3))
    @print{}
    @print{} (1 2 3)
    @result{} (1 2 3)
@end lisp
@end defun

@defun prin1 object &optional stream
Similar to @code{print} but no initial newline is output.

@lisp
(prin1 '(1 2 3))
    @print{} (1 2 3)
    @result{} (1 2 3)

(prin1 '|(xy((z]|)              ;A strange symbol
    @print{} \(xy\(\(z\]
    @result{} \(xy\(\(z\]
@end lisp
@end defun

@defun prin1-to-string object
Returns a string containing the characters that @code{prin1} would
output when it prints @var{object}.

@lisp
(prin1-to-string '(1 2 3))
    @result{} "(1 2 3)"
@end lisp
@end defun

@defun princ object &optional stream
Prints a textual representation of @var{object} to the output stream
@var{stream}. No steps are taken to create output that @code{read} can
parse and no quote characters surround strings.

@lisp
(princ "foo")
    @print{} foo
    @result{} "foo"

(princ '|(xy((z]|)
    @print{} (xy((z]
    @result{} \(xy\(\(z\]
@end lisp
@end defun

@defun format stream template &rest values
Writes to a stream, @var{stream}, a string constructed from the
format string, @var{template}, and the argument @var{values}.

If @var{stream} is @code{nil} the resulting string will be returned, not
written to a stream.

@var{template} is a string which may contain format specifiers, these are
a @samp{%} character followed by another character telling how to print
the next of the @var{values}. The following options are available

@table @samp
@item s
Write the printed representation of the value without quoting (as if from
the @code{princ} function).

@item S
Write the printed representation @emph{with} quoting enabled (like the
@code{prin1} function).

@item d
Output the value as a decimal number.

@item o
Write the value in octal.

@item x
In hexadecimal.

@item c
Write the character specified by the value.

@item %
Print a literal percent character. None of the @var{values} are used.
@end table

The function works through the @var{template} a character at a time. If
the character is a format specifier (a @samp{%}) it inserts the correct
string (as defined above) into the output. Otherwise, the character is
simply put into the output stream.

If @var{stream} isn't @code{nil} (i.e. the formatted string is returned) the
value of @var{stream} is returned.

@lisp
(format nil "foo %S bar 0x%x" '(x . y) 255)
    @result{} "foo (x . y) bar 0xff"

(format standard-output "The %s is %s!" "dog" "purple")
    @print{} The dog is purple!
    @result{} #<buffer *jade*>
@end lisp
@end defun

@node Loading, Compiled Lisp, Streams, Programming Jade
@section Loading
@cindex Loading
@cindex Loading programs
@cindex Protrams, loading

In Lisp, programs (also called @dfn{modules}) are stored in files. Each file
is a sequence of Lisp forms (known as @dfn{top-level forms}). Most of the
top-level forms in a program will be definitions (i.e. function, macro or
variable definitions) since generally each module is a system of related
functions and variables.

Before the program can be used it has to be @dfn{loaded} into the editor's
workspace; this involves reading and evaluating each top-level form in
the file.

@menu
* Load Function::               The function which loads programs
* Autoloading::                 Functions can be loaded on reference
* Features::                    Module management functions
@end menu

@node Load Function, Autoloading, , Loading
@subsection Load Function
@cindex Load function
@cindex Functions, loading

@defun load program &optional no-error no-path no-suffix
This function loads the file containing the program called @var{program};
first the file is located then each top-level form contained by the file
is read and evaluated in order.

Each directory named by the variable @code{load-path} is searched until
the file containing @var{program} is found. In each directory three
different file names are tried,

@enumerate
@item
@var{program} with @samp{.jlc} appended to it. Files with a @samp{.jlc}
suffix are usually compiled Lisp files. @xref{Compiled Lisp}.

@item
@var{program} with @samp{.jl} appended, most uncompiled Lisp programs are
stored in files with names like this.

@item
@var{program} with no modifications.
@end enumerate

If none of these gives a result the next directory is searched in the
same way, when all directories in @code{load-path} have been exhausted
and the file still has not been found an error is signalled.

Next the file is opened for reading and Lisp forms are read from it
one at a time, each form is evaluated before the next form is read. When
the end of the file is reached the file has been loaded and this function
returns @code{t}.

The optional arguments to this function are used to modify its behaviour,

@table @var
@item no-error
When this argument is non-@code{nil} no error is signalled if the file
can not be located. Instead the function returns @code{nil}.

@item no-path
The variable @code{load-path} is not used, @var{program} must point to
the file from the current working directory.

@item no-suffix
When non-@code{nil} no @samp{.jlc} or @samp{.jl} suffixes are applied to
the @var{program} argument when locating the file.
@end table

If a version of the program whose name ends in @samp{.jlc} is older than
a @samp{.jl} version of the same file (i.e. the source code is newer than
the compiled version) a warning is displayed and the @samp{.jl} version
is used.

@lisp
(load "foobar")
    @error{} File error: Can't open lisp-file, foobar

(load "foobar" t)
    @result{} nil
@end lisp
@end defun

@defvar load-path
A list of strings, each element is the name of a directory which is
prefixed to the name of a program when Lisp program files are being
searched for.

@lisp
load-path
    @result{} ("" "/usr/local/lib/jade/3.2/lisp/")
@end lisp

The element @code{""} means the current directory, note that directory
names should have an ending @samp{/} (or whatever) so that when concatenated
with the name of the file they make a meaningful filename.
@end defvar

@defvar lisp-lib-dir
The name of the directory in which the standard Lisp files are stored.

@lisp
lisp-lib-dir
    @result{} "/usr/local/lib/jade/3.2/lisp/"
@end lisp
@end defvar

@node Autoloading, Features, Load Function, Loading
@subsection Autoloading
@cindex Autoloading
@cindex Loading, on reference

Obviously, not all the features of the editor are always used. @dfn{Autoloading}
allows modules to be loaded when they are referenced. This speeds up the
initialisation process and may save memory.

Functions which may be autoloaded have a special form in their symbol's
function cell --- an autoload form. This is a list whose first element
is the symbol @code{autoload}. When the function call dispatcher finds
one of these forms it loads the program file specified in the form
then re-evaluates the function call. The true function definition will
have been loaded and therefore the call may proceed as normal.

The structure of an autoload form is:

@lisp
(autoload @var{program-file} [@var{is-command}])
@end lisp

@var{program-file} is the argument to give to the @code{load} function when
the function is to be loaded. It should be the program containing a definition
of the autoloaded function.

The optional @var{is-command} object specifies whether or not the function
may be called interactively (i.e. it is an editor command).

@defun autoload symbol &rest autoload-defn
Installs an autoload form into the function cell of the symbol @var{symbol}.
The form is a cons cell whose car is @code{autoload} and whose cdr is
the argument @var{autoload-defn}.

Returns the resulting autoload form.

@lisp
(autoload 'foo "foos-file")
    @result{} (autoload "foos-file")
(symbol-function 'foo)
    @result{} (autoload "foos-file")

(autoload 'bar "bars-file" t)
    @result{} (autoload "bars-file" t)
(commandp 'bar)
    @result{} t
@end lisp
@end defun

It is not necessary to call the @code{autoload} function manually. Simply
prefix the definitions of all the functions which may be autoloaded (i.e.
the entry points to your module; @emph{not} all the internal functions!)
with the magic comment @code{;;;###autoload}. Then the @code{add-autoloads}
command can be used to create the necessary calls to the autoload function
in the @file{autoloads.jl} Lisp file (this file which lives in the Lisp
library directory is loaded when the editor is initialised).

@table @kbd
@item Meta-x add-autoloads
@kindex Meta-x add-autoloads
Scans the current buffer for any autoload definitions. Functions with
the comment @code{;;;###autoload} preceding them have autoload forms
inserted into the @file{autoloads.jl} file. Simply save this file's
buffer and the new autoloads will be used the next time Jade is
initialised.

It is also possible to mark arbitrary forms for inclusion in the
@file{autoloads.jl} file: put them on a single line which starts with
the comment @code{;;;###autoload} call the command.

The unsaved @file{autoloads.jl} buffer will become the current buffer.

@lisp
;;;###autoload
(defun foo (bar)                ;@code{foo} is to be autoloaded
  @dots{}

;;;###autoload (setq x y)       ;Form to eval on initialisation
@end lisp

@item Meta-x remove-autoloads
@kindex Meta-x remove-autoloads
Remove all autoload forms from the @file{autoloads.jl} file which
are marked by the @code{;;;###autoload} comment in the current buffer.

The unsaved @file{autoloads.jl} buffer will become the current buffer.
@end table

@node Features, , Autoloading, Loading
@subsection Features
@cindex Features

@dfn{Features} correspond to modules of the editor. Each feature is
loaded separately. Each feature has a name, when a certain feature is
required its user asks for it to be present (with the @code{require}
function), the feature may then be used as normal.

When a feature is loaded one of the top-level forms evaluated is a call to
the @code{provide} function. This names the feature and installs it into
the list of present features.

@defvar features
A list of the features currently present (that is, loaded). Each feature
is represented by a symbol. Usually the print name of the symbol (the
name of the feature) is the same as the name of the file it was loaded
from, minus any @samp{.jl} or @samp{.jlc} suffix.

@lisp
features
    @result{} (info isearch fill-mode texinfo-mode lisp-mode xc)
@end lisp
@end defvar

@defun provide feature
Adds @var{feature} (a symbol) to the list of features present. A call
to this function is normally one of the top-level forms in a module.

@lisp
;;;; maths.jl -- the @code{maths} module

(provide 'maths)
@dots{}
@end lisp
@end defun

@deffn Command require feature &optional file
Show that the caller is planning to use the feature @var{feature} (a symbol).
This function will check the @code{features} variable to see if @var{feature}
is already loaded, if so it will return immediately.

If @var{feature} is not present it will be loaded. If @var{file} is
non-@code{nil} it specifies the first argument to the @code{load} function,
else the print name of the symbol @var{feature} is used.

@lisp
;;;; physics.jl -- the @code{physics} module

(require 'maths)                ;Need the @code{maths} module
(provide 'physics)
@dots{}
@end lisp

When called interactively the symbol @var{feature} is prompted for.
@end deffn

@node Compiled Lisp, Hooks, Loading, Programming Jade
@section Compiled Lisp
@cindex Compiled Lisp

Jade contains a rudimentary Lisp compiler; this takes a Lisp form or
program and compiles it into a @dfn{byte-code} form. This byte-code form
contains a string of byte instructions, a vector of data constants and
some other information.

The main reason for compiling your programs is to increase their speed, it
is difficult to quantify the speed increase gained --- some programs
(especially those using a lot of macros) will execute many times
quicker than their uncompiled version whereas others may only execute
a bit quicker.

@menu
* Compilation Functions::       How to compile Lisp programs
* Compilation Tips::            Getting the most out of the compiler
* Disassembly::                 Examining compiled functions
@end menu

@node Compilation Functions, Compilation Tips, , Compiled Lisp
@subsection Compilation Functions
@cindex Compilation functions
@cindex Functions, compilation

@defun compile-form form
This function compiles the Lisp form @var{form} into a byte-code form
which is returned.

@lisp
(compile-form '(setq foo bar))
    @result{} (jade-byte-code "F!" [bar foo] 2)
@end lisp
@end defun

@deffn Command compile-function function
This function replaces the uncompiled body of the function @var{function}
(a symbol) with a compiled version, then returns @var{function}.
@end deffn

@deffn Command compile-file file-name
This function compiles the file called @var{file-name} into a file of
compiled Lisp forms whose name is @var{file-name} with @samp{c} appended
to it (i.e. if @var{file-name} is @file{foo.jl} it will be compiled to
@file{foo.jlc}).

If an error occurs while the file is being compiled any semi-written
file will be deleted.

When called interactively this function will ask for the value of
@var{file-name}.
@end deffn

@deffn Command compile-directory directory &optional force exclude
Compiles all the Lisp files in the directory called @var{directory} which
either haven't been compiled or whose compiled version is older than
the source file (Lisp files are those ending in @samp{.jl}).

If the optional argument @var{force} is non-@code{nil} @emph{all} Lisp files
will be recompiled whatever the status of their compiled version.

The @var{exclude} argument may be a list of filenames, these files will
@emph{not} be compiled.

When this function is called interactively it prompts for the directory.
@end deffn

@defun compile-lisp-lib &optional force
Uses @code{compile-directory} to compile the library of standard Lisp files.
If @var{force} is non-@code{nil} all of these files will be compiled.

The @file{autoloads.jl} is @emph{never} compiled since it is often
modified and wouldn't really benefit from compilation anyway.
@end defun

@defun jade-byte-code byte-codes constants max-stack
Interprets the string of byte instructions @var{byte-codes} with
the vector of constants @var{constants}. @var{max-stack} defines the
maximum number of stack cells required to interpret the code.

This function is @emph{never} called by hand. The compiler will produce
calls to this function when it compiles a form or a function.

@lisp
(setq x 1
      y 3)
    @result{} 3
(setq comp (compile-form '(cons x y)))
    @result{} (jade-byte-code "K" [x y] 2)
(eval comp)
    @result{} (1 . 3)
@end lisp
@end defun

@node Compilation Tips, Disassembly, Compilation Functions, Compiled Lisp
@subsection Compilation Tips
@cindex Compilation tips
@cindex Tips, compilation

Here are some tips for making compiled code run fast:

@itemize @bullet
@item
Always favour iteration over recursion; function calls are relatively
slow. The compiler doesn't know about tail recursion or whatever so
you'll have to do this explicitly.

For example, the most elegant way of searching a list is to use
recursion,

@lisp
(defun scan-list (list elt)
  "Search the LIST for an element ELT. Return it if one is found."
  (if (eq (car list) elt)
      elt
    (scan-list (cdr list) elt)))
@end lisp

@noindent
but this is fairly slow. Instead, iterate through each element,

@lisp
(defun scan-list (list elt)
  (while (consp list)
    (when (eq (car list) elt)
      (return elt))
    (setq list (cdr list))))
@end lisp

@item
In some cases the functions @code{member}, @code{memq}, @code{assoc},
etc@dots{} can be used to search lists. Since these are primitives written
in C they will run @emph{much} faster than an equivalent Lisp function.

So the above @code{scan-list} example can be rewritten as,

@lisp
(defun scan-list (list elt)
  (car (memq elt list)))
@end lisp

Also note that the @code{mapcar} and @code{mapc} functions are useful
(and efficient) when using lists.

@item
Whenever possible use the @code{when} and @code{unless} conditional
structures; they are more efficient than @code{cond} or @code{if}.

@item
Careful use of named constants (@pxref{Constant Variables}) can increase
the speed of some programs. For example, in the Lisp compiler itself
all the opcode values (small integers) are defined as constants.

I must stress that in some cases constants are @emph{not} suitable;
they may drastically increase the size of the compiled program (when
the constants are `big' objects, i.e. long lists) or even introduce
subtle bugs (since two references to the same constant may not be
@code{eq} whereas two references to the same variable are always
@code{eq}).

@item
Many primitives have corresponding byte-code instructions; these primitives
will be quicker to call than those that don't (and incur a normal function
call). Currently, the functions which have byte-code instructions (apart
from all the special forms) are:

@code{cons}, @code{car}, @code{cdr}, @code{rplaca}, @code{rplacd}, @code{nth},
@code{nthcdr}, @code{aset}, @code{aref}, @code{length}, @code{eval}, @code{+},
@code{*}, @code{/}, @code{%}, @code{lognot}, @code{not}, @code{logior},
@code{logand}, @code{equal}, @code{eq}, @code{=}, @code{/=}, @code{>},
@code{<}, @code{>=}, @code{<=}, @code{1+}, @code{1-}, @code{-}, @code{set},
@code{fset}, @code{lsh}, @code{zerop}, @code{null}, @code{atom}, @code{consp},
@code{listp}, @code{numberp}, @code{stringp}, @code{vectorp}, @code{throw},
@code{fboundp}, @code{boundp}, @code{symbolp}, @code{get}, @code{put},
@code{signal}, @code{return}, @code{reverse}, @code{nreverse}, @code{assoc},
@code{assq}, @code{rassoc}, @code{rassq}, @code{last}, @code{mapcar}, @code{mapc},
@code{member}, @code{memq}, @code{delete}, @code{delq}, @code{delete-if},
@code{delete-if-not}, @code{copy-sequence}, @code{sequencep}, @code{functionp},
@code{special-formp}, @code{subrp}, @code{eql}, @code{set-current-buffer},
@code{current-buffer}, @code{bufferp}, @code{markp}, @code{windowp}.

@item
When a file is being compiled each top-level form it contains is inspected
to see if it should be compiled into a byte-code form. Different types
of form are processed in different ways:

@itemize @bullet
@item
Function and macro definitions have their body forms compiled into a single
byte-code form. The doc-string and interactive declaration are not compiled.

@item
Calls to the @code{require} function are evaluated then the unevaluated form
is written as-is to the output file. The reason it is evaluated is so that
any macros defined in the required module are loaded before they are
called by the program being compiled.

@item
If the form is a list form (@pxref{List Forms}) and the symbol which is
the car of the list is one of:

@code{if}, @code{cond}, @code{when}, @code{unless}, @code{let}, @code{let*},
@code{catch}, @code{unwind-protect}, @code{error-protect}, @code{with-buffer},
@code{with-window}, @code{progn}, @code{prog1}, @code{prog2}, @code{while},
@code{and}, @code{or}.

@noindent
then the form is compiled. Otherwise it is just written to the output file
in its uncompiled state.
@end itemize

If your program contains a lot of top-level forms which you know will
not be compiled automatically, consider putting them in a @code{progn}
block to make the compiler coalesce them into one byte-code form.
@end itemize

@node Disassembly, , Compilation Tips, Compiled Lisp
@subsection Disassembly
@cindex Disassembly
@cindex Compilation, disassembly of forms

It is possible to disassemble byte-code forms; originally this was so
I could figure out why the compiler wasn't working but if you're
curious about how the compiler compiles a form it may be of use to
you.

Naturally, the output of the disassembler is a listing in Jade's
pseudo-machine language --- it won't take a byte-code form and produce
the equivalent Lisp code!

@deffn Command disassemble-fun function &optional stream
This function disassembles the compile Lisp function @var{function}. It
writes a listing to the output stream @var{stream} (normally the
value of the @code{standard-output} variable).

When called interactively it will prompt for a function to disassemble.
@end deffn

When reading the output of the disassembler bear in mind that Jade
simulates a stack machine for the code to run on. All calculations are
performed on the stack, the value left on the stack when the piece
of code ends is the value of the byte-code form.

@node Hooks, Buffers, Compiled Lisp, Programming Jade
@section Hooks
@cindex Hooks

A @dfn{hook} allows you to wedge your own pieces of Lisp code into
the editor's operations. These pieces of code are evaluated via the hook
and the result is available to the hook's caller.

@menu
* Functions As Hooks::          Some hooks are a single function,
* Normal Hooks::                Others may be a list of pieces of code
                                  to evaluate.
* Standard Hooks::              A table of the predefined hooks
@end menu

@node Functions As Hooks, Normal Hooks, , Hooks
@subsection Functions As Hooks
@cindex Functions as hooks
@cindex Hooks, functions as

Some hooks only allow a single piece of code to be hooked in. Usually
a normally-undefined function is used; to install your hook defined
a function with the name of the hook. When the hook is to be evaluated
the function is called.

Generally the name of the hook's function will end in @code{-function}.

An alternative scheme is to use a variable to store the hook, its value
should be the function to call.

@node Normal Hooks, Standard Hooks, Functions As Hooks, Hooks
@subsection Normal Hooks
@cindex Normal hooks
@cindex Hooks, normal

This is the standard type of hook, it is a variable whose value is a
list of functions. When the hook is evaluated each of the named functions
will be called in turn until one of them returns a value which is not
@code{nil}. This value becomes the value of the hook and no more of
the functions are called. If all of the functions in the hook return
@code{nil} the value of the hook is @code{nil}.

The names of hooks of this type will normally end in @code{-hook}.

@defun add-hook hook function &optional at-end
This function adds a new function @var{function} to the list of functions
installed in the (list) hook @var{hook} (a symbol).

If @var{at-end} is non-@code{nil} the new function is added at the end of
the hook's list of functions (and therefore will be called last when the
hook is evaluated), otherwise the new function is added to the front
of the list.

@lisp
text-mode-hook
    @result{} (fill-mode-on)
(add-hook 'text-mode-hook 'my-function)
    @result{} (my-function fill-mode-on)
@end lisp
@end defun

@defun remove-hook hook function
This function removes the function @var{function} from the list of functions
stored in the (list) hook @var{hook} (a symbol).

@emph{All} instances of @var{function} are deleted from the hook.

@lisp
text-mode-hook
    @result{} (my-function fill-mode-on)
(remove-hook 'text-mode-hook 'my-function)
    @result{} (fill-mode-on)
@end lisp
@end defun

@defun eval-hook hook &rest args
Evaluates the (list) hook @var{hook} (a symbol) with argument values @var{args}.

Each function stored in the hook is applied to the @var{args} in turn until
one returns non-@code{nil}. This non-@code{nil} value becomes the result
of the hook. If all functions return @code{nil} then the result of the
hook is @code{nil}.
@end defun

Note that most functions which are installed in hooks should always return
@code{nil} to ensure that all the functions in the hook are evaluated.

@node Standard Hooks, , Normal Hooks, Hooks
@subsection Standard Hooks
@cindex Standard hooks
@cindex Hooks, predefined

This is a table of the predefined hooks in Jade:

@table @code
@item asm-cpp-mode-hook
@xref{Asm mode}.

@item asm-mode-hook
@xref{Asm mode}.

@item auto-save-hook
@xref{Controlling Auto-Saves}.

@item buffer-menu-mode-hook

@item c-mode-hook
@xref{C mode}.

@item destroy-window-hook
@xref{Closing Windows}.

@item gdb-hook

@item idle-hook
@xref{Idle Actions}.

@item indented-text-mode-hook
@xref{Indented-Text mode}.

@item insert-file-hook
@xref{Reading Files Into Buffers}.

@item kill-buffer-hook
@xref{Destroying Buffers}.

@item lisp-mode-hook
@xref{Lisp mode}.

@item make-window-hook
@xref{Opening Windows}.

@item open-file-hook
@xref{Reading Files Into Buffers}.

@item read-file-hook
@xref{Reading Files Into Buffers}.

@item shell-callback-function
@item shell-mode-hook

@item texinfo-mode-hook
@xref{Texinfo mode}.

@item text-mode-hook
@xref{Text mode}.

@item unbound-key-hook
@xref{Event Loop}.

@item window-closed-hook
@xref{Event Loop}.

@item write-file-hook
@xref{Writing Buffers}.
@end table

@node Buffers, Windows, Hooks, Programming Jade
@section Buffers
@cindex Buffers

A @dfn{buffer} is a Lisp object containing a `space' in which files (or any
pieces of text) may be edited, either directly by the user or by Lisp
programs.

Each window (@pxref{Windows}) may display any one buffer at any time, the
buffer being displayed by the current window is known as the
@dfn{current buffer}. This is the buffer which functions will operate
on by default.

@defun bufferp object
Returns @code{t} if its argument is a buffer.
@end defun

@menu
* Buffer Attributes::           Data contained in a buffer object
* Creating Buffers::            How to create empty buffers
* Modifications to Buffers::    Is a buffer modified?
* Read-Only Buffers::           Unmodifiable buffers
* Destroying Buffers::          Deleting a buffer and its contents
* Special Buffers::             Program-controlled buffers
* The Buffer List::             Each window has a list of buffers
* The Current Buffer::          One buffer is the default buffer
@end menu

@node Buffer Attributes, Creating Buffers, , Buffers
@subsection Buffer Attributes
@cindex Buffer attributes

All buffer objects store a set of basic attributes, some of these
are:

@table @dfn
@item name
@cindex Buffers, names of
Each buffer has a unique name.

@defun buffer-name &optional buffer
Returns the name of the buffer @var{buffer}, or of the current buffer if
@var{buffer} is undefined.

@lisp
(buffer-name)
    @result{} "programmer.texi"
@end lisp
@end defun

@defun set-buffer-name name &optional buffer
Sets the name of the buffer @var{buffer} (or the current buffer) to
the string @var{name}.

Note that @var{name} is not checked for uniqueness, use the
@code{make-buffer-name} function if you want a guaranteed unique name.
@end defun

@defun make-buffer-name name
Returns a unique version of the string @var{name} so that no existing
buffer has the same string as its name. If a clash occurs a suffix
@samp{<@var{N}>} is appended to @var{name}, where @var{n} is the first
number which guarantees the uniqueness of the result.
@end defun

@defun get-buffer name
Returns the existing buffer whose name is @var{name}, or @code{nil} if
no such buffer exists.
@end defun

@item file name
@cindex Buffers, file names of
Since buffers often contain text belonging to files on disk the buffer
stores the name of the file its text was read from. @xref{Editing Files}.

@defun buffer-file-name &optional buffer
Returns the name of the file stored in @var{buffer}. If no file is stored
in the buffer the null string (@samp{}) is returned.

@lisp
(buffer-file-name)
    @result{} "man/programmer.texi"
@end lisp
@end defun

@defun set-buffer-file-name name &optional buffer
This function sets the file-name of the buffer to the string @var{name}.
@end defun

@defun get-file-buffer file-name
Searches for an existing buffer containing the file @var{file-name} then
returns it, or @code{nil} if no such buffer exists.
@end defun

@item contents
@cindex Buffers, contents of
The contents of a buffer is the text it holds. This is stored as an array
of lines. @xref{Text}.

@item tab size
@cindex Buffers, tab size
This is the spacing of tab stops. When the contents of the buffer is being
displayed (in a window) this value is used.

@defvar tab-size
A buffer-local variable which holds the size of tab stops in the buffer.
@end defvar

@item glyph table
@cindex Buffers, glyph table
Each buffer has its own glyph table which is used when the buffer is
being displayed. @xref{Buffer Glyph Tables}.

@item local variables
@cindex Buffers, local variables
Each buffer can have its own value for any variable, these local values
are stored in an alist which lives in the buffer object.
@xref{Buffer-Local Variables}.

@defun buffer-variables &optional buffer
Returns the alist of local variables in the buffer. Each alist element
is structured like, @code{(@var{symbol} . @var{local-value})}.
@end defun

@item modification counter
@cindex Buffers, modification counter
Each modification made to the buffer increments its modification counter.
@xref{Modifications to Buffers}.

@defun buffer-changes &optional buffer
Returns the number of modifications made to the buffer since it was
created.
@end defun

@item undo information
@cindex Buffers, undo information
When a modification is made to a buffer enough information is recorded
so that the modification can later be undone. @xref{Controlling Undo}.
@end table

All other buffer-specific information is kept in buffer-local variables.

@node Creating Buffers, Modifications to Buffers, Buffer Attributes, Buffers
@subsection Creating Buffers
@cindex Creating buffers
@cindex Buffers, creating

@defun make-buffer name
Creates and returns a new buffer object. Its name will be a unique version
of @var{name} (created by the @code{make-buffer-name} function).

The buffer will be totally empty and all its attributes will have standard
values.

@lisp
(make-buffer "foo")
    @result{} #<buffer foo>
@end lisp
@end defun

@defun open-buffer name
If no buffer called @var{name} exists, creates a new buffer of that name
and adds it to the end of each windows @code{buffer-list}. This function
always returns the buffer called @var{name}.
@end defun

For more ways of creating buffers see @ref{Editing Files}.

@node Modifications to Buffers, Read-Only Buffers, Creating Buffers, Buffers
@subsection Modifications to Buffers
@cindex Modifications to buffers
@cindex Buffers, modifications

Each buffer maintains a counter which is incremented each time the
contents of the buffer is modified. It also holds the value of this
counter when the buffer was last saved, when the two numbers are
different the buffer is classed as have being @dfn{modified}.

@defun buffer-modified-p &optional buffer
This function returns @code{t} when the buffer has been modified.
@end defun

@defun set-buffer-modified buffer status
Sets the modified status of the buffer @var{buffer}. When @var{status}
is @code{nil} the buffer will appear to be unmodified, otherwise it
will look modified.
@end defun

@node Read-Only Buffers, Destroying Buffers, Modifications to Buffers, Buffers
@subsection Read-Only Buffers
@cindex Read-only buffers
@cindex Buffers, read-only

When a buffer has been marked as being read-only no modifications may be
made to its contents (neither by the user nor a Lisp program).

@defun buffer-read-only-p &optional buffer
Returns @code{t} when the buffer is read-only.
@end defun

@defun set-buffer-read-only buffer read-only
When @var{read-only} is non-@code{nil} the buffer @var{buffer} is marked
as being read-only, otherwise it is read-write.
@end defun

@defvar inhibit-read-only
When this variable is non-@code{nil} any buffer may be modified, even if
it is marked as being read-only.

Lisp programs can temporarily bind a non-@code{nil} value to this
variable when they want to edit one of their normally read-only
buffers.
@end defvar

@node Destroying Buffers, Special Buffers, Read-Only Buffers, Buffers
@subsection Destroying Buffers
@cindex Destroying buffers
@cindex Killing buffers
@cindex Buffers, destroying

Since all Lisp objects have indefinite extent (i.e. they live until
there are no references to them) a buffer will be automatically
destroyed when all references to it disappear.

Alternatively one of the following functions can be used to explicitly
kill a buffer; the buffer object will still exist but all data associated
with it (including the text it contains) will be released.

@deffn Command kill-buffer buffer
Removes the buffer @var{buffer} (a buffer or the name of a buffer) from
all windows (any windows displaying @var{buffer} will be changed to display
the previous buffer they showed) and destroys the buffer.

The hook @code{kill-buffer-hook} is evaluated before the buffer is killed
with @var{buffer} as its argument.

If the buffer contains unsaved modifications the user will be asked
if they really want to lose them before the buffer is killed (if the answer is
yes).

When called interactively a buffer will be prompted for.
@end deffn

@defvr Hook kill-buffer-hook
Hook called by @code{kill-buffer} before it does anything. If a function
in the hook doesn't want the buffer deleted it should signal some
sort of error.
@end defvr

@defun destroy-buffer buffer
This function may be used to remove all data stored in the buffer
object manually. Also, any marks in this buffer are made non-resident.

After applying this function to a buffer the buffer will contain
one empty line.

Use this function wisely, there are no safety measures taken to ensure
valuable data is not lost.
@end defun

@node Special Buffers, The Buffer List, Destroying Buffers, Buffers
@subsection Special Buffers
@cindex Special buffers
@cindex Buffers, special

When a buffer is @dfn{special}  it means that it is controlled by a Lisp
program, not by the user typing into it (although this can happen as well).

Special buffers are used for things like the `*jade*' or `*Info*' buffers (in
fact most of the buffers whose names are surrounded by asterisks are special).

What the special attribute actually does is make sure that the buffer is
never truly killed (@code{kill-buffer} removes it from each window's
@code{buffer-list} but doesn't call @code{destroy-buffer} on it) and
modifications don't cause the @samp{+} flag to appear in the status line.

@defun buffer-special-p &optional buffer
Returns @code{t} if the buffer is marked as being special.
@end defun

@defun set-buffer-special buffer special
Sets the value of the special flag in the buffer @var{buffer} to the
value of @var{special} (@code{nil} means non-special, anything else
means special).
@end defun

Another type of special buffer exists; the @dfn{mildly-special buffer}.

@defvar mildly-special-buffer
When this buffer-local variable is set to @code{t} (it is @code{nil}
by default) and the buffer is marked as being special, the
@code{kill-buffer} function is allowed to totally destroy the buffer.
@end defvar

@node The Buffer List, The Current Buffer, Special Buffers, Buffers
@subsection The Buffer List
@cindex Buffer list
@cindex Buffers, the list of

Each window (@pxref{Windows}) has a list of buffers which may be displayed
in that window. It is arranged is @dfn{most-recently-used} order, so that
the car of the list is the buffer currently being shown in the window, the
second element the window previously being shown and so on.

@defvar buffer-list
A variable, local to each window, which contains a list of the buffers
available in the window. The list is maintained in most-recently-used
order.

@lisp
buffer-list
    @result{} (#<buffer programmer.texi> #<buffer *Help*>
               #<buffer buffers.c> #<buffer buffers.jl>
               #<buffer edit.c> #<buffer edit.h>
               #<buffer *jade*> #<buffer lisp.jl>
               #<buffer *compilation*> #<buffer *Info*>)
@end lisp
@end defvar

Generally each window's @code{buffer-list} contains the same buffers, each
window has its own value for the variable so it can be kept in the correct
order (each window will probably be displaying different buffers).

@defun add-buffer buffer
This function ensures that the buffer @var{buffer} is in each window's
@code{buffer-list}. If it isn't it is appended to the end of the list.
@end defun

@defun remove-buffer buffer
Deletes all references to @var{buffer} in each window's @code{buffer-list}.
@end defun

@deffn Command bury-buffer &optional buffer all-windows
Puts @var{buffer} (or the currently displayed buffer) at the end of the
current window's @code{buffer-list} then switch to the buffer at the head
of the list.

If @var{all-windows} is non-@code{nil} this is done in all windows (the
same buffer will be buried in each window though).
@end deffn

@deffn Command rotate-buffers-forward
Moves the buffer at the head of the @code{buffer-list} to be last in the
list, the new head of the @code{buffer-list} is displayed in the current
window.
@end deffn

@node The Current Buffer, , The Buffer List, Buffers
@subsection The Current Buffer
@cindex Current buffer
@cindex Buffers, current

The @dfn{current buffer} is the buffer being displayed in the current window
(@pxref{Windows}), all functions which take an optional @var{buffer}
argument will operate on the current buffer if this argument is undefined.
Similarly if a @var{window} argument to a function is left undefined the
current window will be used.

@defun current-buffer &optional window
Returns the buffer being displayed by the window @var{window} (or the current
window).

@lisp
(current-buffer)
    @result{} #<buffer programmer.texi>
@end lisp
@end defun

The @code{set-current-buffer} function sets the current buffer of a window.
If, when the window is next redisplayed (i.e. after each command), the
current buffer is different to what it was at the last redisplay the new
buffer will be displayed in the window.

@defun set-current-buffer buffer &optional window
Sets the buffer that the window is displaying.

Usually a window's current buffer will be the buffer which is at the head
of the window's @code{buffer-list}. The function @code{goto-buffer} can
be used to set both of these at once.
@end defun

@defun goto-buffer buffer
Set the current buffer to @var{buffer} which is either a buffer or a string
naming a buffer. The selected buffer is moved to the head of the window's
@code{buffer-list}.

If @var{buffer} is a string and no buffer exists of that name a new
one is created.
@end defun

Often you will want to temporarily switch to a different current buffer,
that is what the @code{with-buffer} special form is for.

@defspec with-buffer buffer forms@dots{}
Temporarily sets the current buffer to the value of evaluating @var{buffer},
then evaluates the @var{forms} in sequence. The old value of the current
buffer is reinstated and the structure returns the value of the last of
the @var{forms} to be evaluated.

If the implicit progn evaluating @var{forms} is exited abnormally the
old value of the current buffer will still be reinstated.

If the window is redisplayed while the @var{forms} are being evaluated (i.e.
in a recursive edit) the new buffer will be drawn into the window.

@lisp
(with-buffer new-buffer         ;Enter a recursive edit in
  (recursive-edit))             ; the buffer @code{new-buffer}.
@end lisp
@end defspec

@node Windows, Positions, Buffers, Programming Jade
@section Windows
@cindex Windows

A @dfn{window} is a Lisp object representing a window (a rectangular
section of the display) open in the windowing-system you are running Jade in.

Windows have two main functions, firstly to provide a means of seeing
the contents of a buffer and secondly to receive input events. For more
details about event handling see @ref{Event Loop}.

A window @emph{always} displays a buffer and there is @emph{always} at
least one window open. The editor remembers which of the open windows is
the @dfn{current window}, this is normally the window it last received
an input event from, though it can be set by programs.

For some basic details about using windows see @ref{Using Windows}.

@defun windowp object
This function returns @code{t} if its argument is a window.
@end defun

@defvar window-list
This variable's value is a list of all the currently open windows. The order
of the elements in the list is insignificant.

@lisp
window-list
    @result{} (#<window 20971528 *Info*> #<window 20971524 *jade*>)
@end lisp
@end defvar

@menu
* Opening Windows::             Creating new windows
* Closing Windows::             Deleting windows
* Iconifying Windows::          Temporarily removing windows
* Displaying Messages::         Messages to the user
* The Current Window::          The activated window, used by default
* Window Font::                 Each window may use a different font
* Window Information::          Details of a window's current state
* Rendering::                   How buffers are drawn in windows
* Block Marking::               Highlighting a region of a window
@end menu

@node Opening Windows, Closing Windows, , Windows
@subsection Opening Windows
@cindex Opening windows
@cindex Windows, opening

@defun open-window &optional buffer x y width height
Opens a new window and returns it. If @var{buffer} is defined it is the
buffer to display in the new window, otherwise the current buffer is
displayed.

The @var{x} and @var{y} arguments are the pixel coordinates of the new window's
top left corner in the display. The @var{width} and @var{height} arguments
are the size of the window in columns and rows of characters respectively.

What happens when the position and size of the window is undefined will
depend on the underlying window system, on the Amiga the window will
probably be the same as the current window, in X11 the window manager
will probably let the user size it interactively.

The new window will have its @code{buffer-list} variable initialised
suitably and it will be added to the head of the @code{window-list}
variable.
@end defun

The @code{make-window} function is the lowest level of creating a new
window, @code{open-window} uses it to open the window.

@defun make-window &optional x y width height
Creates a new window and returns it, the arguments are similar to
those of the same name in the @code{open-window} function. The window
will display the current buffer.

After the window is created the @code{make-window-hook} will be called
with the window as its argument.
@end defun

@defvr Hook make-window-hook
Hook called each time a new window is created. It has one argument, the
new window.
@end defvr

@defvar pub-screen
This window-local variable is only used on the Amiga version of Jade; it
holds the name of the public screen which windows are opened on. By default
this is the Workbench screen.

When a window is opened it inherits this value from the current window at
the time.
@end defvar

@node Closing Windows, Iconifying Windows, Opening Windows, Windows
@subsection Closing Windows
@cindex Closing windows
@cindex Windows, closing

Unlike buffers, window objects don't have indefinite extent, even when
a window is incapable of being referenced the object will not be
destroyed by the garbage collector; count the user looking at the window
as a reference!

When the window is closed (by the @code{destroy-window} function) the
object loses its `window-ness' and the garbage collector is free to
reclaim its memory.

@defun close-window &optional window
This function closes the window @var{window} (or the current window)
and deletes its entry from the @code{window-list} variable.

If this window is the only one the editor has open the user is asked if
it's okay to lose any modified buffers before the window is closed.
@end defun

@defun close-other-windows &optional window
Uses @code{close-window} to close all windows except @var{window} (or the
current window).
@end defun

@defun destroy-window window
Closes the window @var{window}. After a window object has been closed it is
no longer a member of the type `window'.

Before closing the window the @code{destroy-window-hook} is evaluated
with the window being destroyed as an argument.

When the last window is closed the editor will exit automatically.

Like the @code{destroy-buffer} function, this function is dangerous
if used carelessly.

Both @code{close-window} and @code{close-other-windows} eventually call
this function.
@end defun

@defvr Hook destroy-window-hook
Hook called by @code{destroy-window} before it does anything. It has
one argument --- the window to be destroyed.
@end defvr

@node Iconifying Windows, Displaying Messages, Closing Windows, Windows
@subsection Iconifying Windows
@cindex Iconifying windows
@cindex Windows, iconifying

When you don't want a window cluttering the display, but don't want to
kill it totally it can be iconified; the window will be displayed as
a small icon which can be reactivated when the window is wanted again.

@defun sleep-window &optional window
Iconifies the specified window.
@end defun

@defun unsleep-window &optional window
Uniconifies the specified window. This may be done automatically if
the user needs to be prompted.
@end defun

@defun toggle-iconic
Toggles the current window between the iconified and normal states. This
command is bound to the key sequence @kbd{Ctrl-z}.
@end defun

@defun window-asleep-p
Returns @code{t} when the current window is iconified.
@end defun

@node Displaying Messages, The Current Window, Iconifying Windows, Windows
@subsection Displaying Messages
@cindex Displaying messages
@cindex Messages, displaying
@cindex Windows, displaying messages

Often it is useful to be able to show the user a short one-line message,
this is what the @code{message} function does.

@defun message message &optional display-now
This function displays the string @var{message} in the status line of
the current window, then returns @var{message}.

If @var{display-now} is non-@code{nil} the message is rendered into the
window immediately, otherwise it will not be visible until the next
general redisplay (usually after each command exits).
@end defun

Note that an alternate way of writing in the status line is to use
the output stream @code{t}. @xref{Output Streams}.

When writing interactive programs it is sometimes useful to be able
to render the cursor in the status line. This shows that the next key press
will not be subject to normal editing key bindings but to the special
user interface (usually explained by a message in the status line).

For example the @code{y-or-n-p} function uses this technique to
show that it needs an answer.

@defvar status-line-cursor
When this window-local variable is non-@code{nil} the window's cursor is
rendered at the end of the message in the status line, not at the cursor's
position in the main display.
@end defvar

Another way of alerting the user is to use the @code{beep} function,

@defun beep
This function rings a bell or flashes the current window or screen depending
on your system.
@end defun

@node The Current Window, Window Font, Displaying Messages, Windows
@subsection The Current Window
@cindex Current window
@cindex Windows, current

The current window is the window that functions operate on by default; every
time the event loop receives some input from the user the window which
the input event originated in becomes the current window. It is also
possible for Lisp programs to set the current window, either permanently
or temporarily.

The @dfn{active window} is the window which the windowing system will send
any keyboard input to. Since Jade sets the current window to where it
receives input from, it is often the case that the current window is
the same as the active window. Jade also provides the means to set
the active window; in some cases this may be best left to the user though.

@defun current-window
This function returns the current window.

@lisp
(current-window)
    @result{} #<window 20971524 programmer.texi>
@end lisp
@end defun

@defun set-current-window window &optional activate
This function sets the current window to be the window @var{window}. If
the optional argument @var{activate} is non-@code{nil} this window will
also become the active window.

When using the @var{activate} argument bear in mind that it may be confusing
for the user if the active window is suddenly changed; only change the
active window synchronously with some input from the user.
@end defun

@defspec with-window window forms@dots{}
Temporarily sets the current window to the value of evaluating the form
@var{window}, then uses an implicit progn to evaluate the @var{forms}. The
old current window is then reinstated before returning the value of the
implicit progn.
@end defspec

@node Window Font, Window Information, The Current Window, Windows
@subsection Window Font
@cindex Window font
@cindex Font, window

Each window may use a different font; this font will be used for rendering
all text in the window. When windows are created they inherit their font
from the current window at the time.

Currently Jade only allows the use of fixed-width fonts; proportional
fonts won't work properly.

@deffn Command set-font font-name &optional window
This function sets the font used in the window @var{window} (or the current
window) to the font named by the string @var{font-name}.

The format of the string @var{font-name} depends on the underlying
windowing system:

@table @asis
@item X11
Simply use the standard name of the font, asterisk characters work
like usual (i.e. match zero or more characters).

@item Amiga
This is different to the normal Amiga conventions, use the name of the
font followed by a dash and then the size of the font. For example to
get an 8-point topaz font, use @samp{topaz.font-8}.
@end table

When this function is called interactively it will prompt for @var{font-name}.
@end deffn

@defun font-name &optional window
Returns the name of the font being used in the specified window.

Note that on an Amiga this will only return the name, and not the size
of the font. For example, if @code{set-font} has been used with an
argument of @code{"topaz.font-8"}, a call to @code{font-name} would
produce @code{"topaz.font"}.
@end defun

@defun font-x-size &optional window
Returns the width (in pixels) of a character in the specified window's
font.

@lisp
(font-x-size)
    @result{} 7
@end lisp
@end defun

@defun font-y-size &optional window
Returns the height in pixels of each character in the window's font.

@lisp
(font-y-size)
    @result{} 13
@end lisp
@end defun

@node Window Information, Rendering, Window Font, Windows
@subsection Window Information
@cindex Window information

There are a number of functions which provide information about the
current state of a window.

@defun window-id &optional window
Returns an integer which is the window system's `handle' on the window
@var{window} (or the current window). Under X11 this is the Window
identifier, on an Amiga it's a pointer to the window's @code{struct Window}.

@lisp
(window-id)
    @result{} 20971524
@end lisp
@end defun

@defun window-count
Returns the number of currently-opened windows.
@end defun

@defun screen-width
Returns the width of the root window or screen in pixels.
@end defun

@defun screen-height 
Returns the height in pixels of the root window.
@end defun

@defun window-left-edge
Returns the x coordinate of the current window relative to the root
window's top-left corner.
@end defun

@defun window-top-edge
The y coordinate of the current window relative to the root window's
top-left corner.
@end defun

@defun window-width
Returns the width, in pixels, of the current window.
@end defun

@defun window-height
Returns the height in pixels of the current window.
@end defun

@defun window-bar-height
Only used by Amigas, this returns the height of the current window's
title bar. This will always be zero in X.
@end defun

@defun screen-top-line
Returns the line number of the first line being shown in the current window.
@end defun

@defun screen-bottom-line
Returns the line number of the last line being shown in the current window.
@end defun

@defun screen-first-column
Returns the column number of the first column being shown in the current
window.
@end defun

@defun screen-last-column
Returns the column number of the last column being shown in the current
window.
@end defun

@node Rendering, Block Marking, Window Information, Windows
@subsection Rendering
@cindex Rendering
@cindex Windows, rendering

After each command is executed a full redisplay is done; the display of
each window is made to be consistent with the contents of the buffer
it is showing.

@defun refresh-all
This function calls the redisplay code, any windows, whose display is
inconsistent with what it should be displaying, are updated.
@end defun

@defun cursor on
Turns the cursor in the current window on or off (depending on whether
@var{on} is non-@code{nil} or not). Normally the cursor is erased while
Lisp programs are executing.

If you use this function be sure to leave the cursor undrawn when you've
finished.
@end defun

@defun centre-display &optional window
If possible, this function will arrange it so that the line which the cursor
is on (@pxref{The Cursor Position}) will be in the centre of the display.
@end defun

@defun next-screen &optional count
Move @var{count} (or 1 by default) screens forwards in the display, Lisp
programs shouldn't need to call this.
@end defun

@defun prev-screen &optional count
Move @var{count} screens backwards in the display. Don't call this from
Lisp programs.
@end defun

@defun flush-output
This function forces any locally-cached rendering operations to be
drawn into the actual window. This should be called after any use of
the @code{refresh-all} or @code{cursor} functions.

Currently this function only actually does anything in the X11 version
of Jade (it calls XFlush()), but to ensure the portability of Lisp programs
it should be used anyway.
@end defun

@defvar max-scroll
This window-local variable defines the maximum number of lines which
may be scrolled in one go; if more than this number of lines have to
be moved when a redisplay happens the whole window will be redrawn.
@end defvar

@defvar y-scroll-step-ratio
This window-local variable controls the actual number of lines scrolled
when the cursor moves out of the visible part of the window. The number
of lines to move the display origin is calculated with the formula:

@lisp
(/ @var{total-lines-in-window} y-scroll-step-ratio)
@end lisp

If the variable's value is zero then the window will be scrolled by the least
number of lines necessary to get the cursor back into the visible part.
@end defvar

@defvar x-scroll-step-ratio
Similar to @code{y-scroll-step-ratio}, except that it's used when the cursor
disappears to the left or the right of the display.
@end defvar

@node Block Marking, , Rendering, Windows
@subsection Block Marking
@cindex Marking blocks
@cindex Block marking
@cindex Windows, marking blocks

Each window may define one @dfn{block}, this is a region of the buffer
displayed in the window which is rendered in the opposite colours to
normal (i.e. the same as the normal cursor, when the cursor is in a block
it's drawn in the inverse of the block). Blocks are primarily used for
marking areas of a buffer which will subsequently be manipulated.

Normally the area of the buffer contained by a block is delimited by
two positions; the start and end of the block (these will track changes made
to the buffer and adjust themselves, like marks do). It is also possible
to mark rectangular blocks; these are also delimited by two positions,
but they define the two opposite corners of the rectangular block.

@defun blockp
Returns @code{t} if a block is marked in the current window.
@end defun

@defun mark-block start-pos end-pos
Define the beginning and end markers of the block to display in the
current window.
@end defun

@deffn Command block-kill
Unmark the block displayed in the current window.
@end deffn

@deffn Command mark-word count &optional pos
Mark @var{count} words from @var{pos} (or the cursor pos) in the current
window.
@end deffn

@deffn Command mark-whole-buffer
Mark the whole of the current buffer.
@end deffn

@defun block-start
Returns the position of the beginning of the block marked in the
current window. If no block is defined returns @code{nil}.
@end defun

@defun block-end
Returns the position of the end of the block, or @code{nil} if no block
is defined in the current window.
@end defun

@deffn Command block-toggle
Toggles between marking the beginning, marking the end and totally
unmarking the block in the current window.
@end deffn

@defun rect-blocks-p &optional window
Returns @code{t} if the block marked in the window is drawn as a rectangle.
@end defun

@defun set-rect-blocks window status
Defines whether or not the block drawn in @var{window} is drawn as a rectangle
or not. If @var{status} is @code{nil} it isn't.
@end defun

@deffn Command toggle-rect-blocks
Toggles between marking normal and rectangular blocks in the current window.
@end deffn

@node Positions, Marks, Windows, Programming Jade
@section Positions
@cindex Positions
@cindex Buffers, positions

A @dfn{position} is a Lisp object representing the location of one of the
characters in the contents of a buffer (@pxref{Buffers}). Since Jade stores
buffer contents as an array of lines, two index values are needed to reference
a single character. A position object contains two integers; the column
and line numbers of the character, both these values count upwards from zero
(i.e. the first character in a buffer has line and column numbers of zero).

Position objects have no read syntax; they print as,

@lisp
#<pos @var{column} @var{line}>
@end lisp

@defun posp object
This function returns @code{t} when its argument is a position object.
@end defun

@defun pos column line
Creates and returns a new position object, it points to column number
@var{column} and line number @var{line} (both integers).
@end defun

@defun copy-pos pos
Creates a new copy of the position object @var{pos}.
@end defun

@menu
* Position Components::         Accessing the members of a position
* The Cursor Position::         Where the cursor is drawn in the display
* Movement Functions::          Position-motion functions
* Positions and Offsets::       Converting between positions and buffer
                                  offsets
@end menu

@node Position Components, The Cursor Position, , Positions
@subsection Position Components
@cindex Position components

As previously noted, each position object has two components; one number
defining the column, the other defining the line that the position
represents. These components can be accessed individually.

@defun pos-col pos
Returns the column which the position object @var{pos} points to.

@lisp
(pos-col (pos 1 2))
    @result{} 1
@end lisp
@end defun

@defun pos-line pos
This function returns the line number which @var{pos} points to.
@end defun

@defun set-pos-col pos new-col
Sets the number of the column which the position object @var{pos} points
to, to @var{new-col} (an integer), then returns col.

@lisp
(setq x (pos 1 2))
    @result{} #<pos 1 2>
(set-pos-col x 3)
    @result{} 3
x
    @result{} #<pos 3 2>
@end lisp
@end defun

@defun set-pos-line pos new-line
Similar to @code{set-pos-col} except the line number is modified.
@end defun

@node The Cursor Position, Movement Functions, Position Components, Positions
@subsection The Cursor Position
@cindex Cursor position
@cindex Positions, cursor
@cindex Windows, cursor position

Each window displays a @dfn{cursor}, this is rendered as a character in
the opposite colour to what it would usually be (i.e. normally a dark
rectangle). The cursor is used to show the user where any characters they
type will be inserted, each window has a separate cursor position and
buffers which are not being displayed `remember' the last position of
their cursor.

@defun cursor-pos
This function returns a copy of the cursor position in the current window.

@lisp
(cursor-pos)
    @result{} #<pos 14 5638>
@end lisp
@end defun

@defun goto-char pos
Sets the position of the current window's cursor to the position object
@var{pos}, then returns @var{pos}.

Note that the components of @var{pos} are @emph{copied}, any subsequent
modification of @var{pos} will not affect the cursor.

If the line number of @var{pos} points to a non-existent line the cursor
won't be moved and @code{nil} will be returned.
@end defun

@node Movement Functions, Positions and Offsets, The Cursor Position, Positions
@subsection Movement Functions
@cindex Movement functions
@cindex Functions, movement

This section documents the functions which are used to create and modify
position objects so that they point to a different position which is
related to the original position in some way.

The functions which begin @code{goto-} set the cursor position of the
current window to the new position; the others do @emph{not} move the
cursor, they simply calculate the new position and return it.

In some cases the position argument itself will be modified and returned,
this may cause confusion; if there are existing references to the object
they subtle bugs may result. Consider the following,

@lisp
(setq x (cursor-pos)
      y (next-char 1 x))
@end lisp

At first glance this looks as though the variable @code{y} will point to
one character after the variable @code{x} does. Since the @code{next-char}
function @emph{modifies} its argument position @emph{both} variables will
contain the same object, and therefore, point to the same position.

A solution is,

@lisp
(setq x (cursor-pos)
      y (next-char 1 (copy-pos x)))
@end lisp

Read each function's description carefully to see if it alters its arguments!

@menu
* Buffer Extremes::             The edges of a buffer
* Character Movement::          Moving in terms of characters,
* Word Movement::               or maybe words,
* Tab Movement::                tabs,
* Line Movement::               lines,
* Expression Movement::         or even expressions.
@end menu

@node Buffer Extremes, Character Movement, , Movement Functions
@subsubsection Buffer Extremes
@cindex Buffer extremes
@cindex Positions, buffer extremes

@defun buffer-end &optional buffer
Create and return a new position object pointing to the character after the
last character in the buffer.
@end defun

@defun goto-buffer-end
Set the cursor to the character after the last character in the current
buffer.
@end defun

@defun buffer-start &optional buffer
Create a new position pointing to the first character in the buffer. Currently
this is always the position @code{#<pos 0 0>} and the @var{buffer} argument
is ignored.
@end defun

@defun goto-buffer-start
Set the cursor position to the first character in the buffer.
@end defun

@node Character Movement, Word Movement, Buffer Extremes, Movement Functions
@subsubsection Character Movement
@cindex Character movement
@cindex Movement, character

@defun left-char &optional count pos
Alter and return @var{pos} (or a copy of the cursor pos) so that it points
@var{count} characters (default is one) to the left of its current position.
If the resulting column number is less than zero @code{nil} is returned, else
the position.

@lisp
(goto-char (pos 20 0))
    @result{} #<pos 20 0>
(left-char)
    @result{} #<pos 19 0>

(setq x (pos 4 1))
    @result{} #<pos 4 1>
(left-char 3 x)
    @result{} #<pos 1 1>
x
    @result{} #<pos 1 1>
@end lisp
@end defun

@defun goto-left-char &optional count
Move @var{count} (or one) characters to the left.
@end defun

@defun right-char &optional count pos
Alter and return @var{pos} (or a copy of the cursor pos) so that it points
@var{count} (or one) characters to the right of its current position. May
return a position which points to a character past the end of the line.
@end defun

@defun goto-right-char &optional count
Move @var{count} (or one) characters to the right.
@end defun

The following functions results depends on the contents of the buffer
they are operating on; they move a certain number of @emph{characters},
and hence will cross line boundaries.

@defun next-char &optional count pos buffer
Alter and return @var{pos} (or a copy of the cursor pos) to point to
the character @var{count} characters in front of its current position.

If @var{count} is negative this function will work backwards through the
buffer.
@end defun

@defun goto-next-char &optional count
Move @var{count} characters forwards.
@end defun

@defun prev-char &optional count pos buffer
Similar to the @code{next-char} function but will work backwards
when @var{count} is positive and forwards when it is negative.
@end defun

@defun goto-prev-char count
Move @var{count} characters backwards.
@end defun

@node Word Movement, Tab Movement, Character Movement, Movement Functions
@subsubsection Word Movement
@cindex Word movement
@cindex Movement, word

There are two buffer-local variables which control the syntax of words
in each buffer.

@defvar word-regexp
This buffer-local variable contains a regular expression which will match
each character allowed to be in a word.

The standard value is @samp{[a-zA-Z0-9]}, i.e. all alphanumeric characters.
@end defvar

@defvar word-not-regexp
A buffer-local variable. Holds a regular expression which will match anything
not in a word.

The normal value is @samp{[^a-zA-Z0-9]|$}, i.e. anything which is not
alphanumeric or the end of a line.
@end defvar

The following functions use these variables when deciding what is and
what isn't a word.

@defun forward-word &optional count pos move
Return the position of the first character after the end of the word
at position @var{pos} (or the cursor).
@var{count} is the number of words to move, negative values mean go backwards.

If @var{move} is non-@code{nil} then the cursor is moved to the result.

Note that @var{pos} is not altered.
@end defun

@defun backward-word &optional count pos move
Similar to @code{forward-word} except that it works backwards. In fact,
all this function does is call @code{forward-word} with @var{count}
negated.
@end defun

@defun word-start &optional pos
Returns the position of the first character of the word at @var{pos} (or
the cursor position).
@end defun

@defun in-word-p &optional pos
This function returns @code{t} if @var{pos} (or the cursor) is in a word.
@end defun

@node Tab Movement, Line Movement, Word Movement, Movement Functions
@subsubsection Tab Movement
@cindex Tab movement
@cindex Movement, tab

@defun prev-tab &optional count pos size
Alter and return @var{pos} (or a copy of the cursor position) so that it
points @var{count} (default is one) tab stops to the left of its
current position. Returns @code{nil} if that position is before the start
of the line.

@var{size} is optionally the number of glyphs in each tab, or the value
of the @code{tab-size} variable.

Note that the position returned is not the position of a character but
of a glyph (@pxref{Glyph Positions}).

@lisp
(prev-tab 1 (pos 20 0))
    @result{} #<pos 16 0>
@end lisp
@end defun

@defun goto-prev-tab &optional count size
Move @var{count} tab stops to the left.
@end defun

@defun next-tab &optional count pos size
Alter and return @var{pos} (or a copy of the cursor position) so that it
points @var{count} tab stops to the right of its current position.

@var{size} is optionally the number of glyphs in each tab, or the value
of the @code{tab-size} variable.

Note that the position returned is not the position of a character but
of a glyph (@pxref{Glyph Positions}).
@end defun

@defun goto-next-tab &optional count size
Move @var{count} tab stops to the right.
@end defun

@node Line Movement, Expression Movement, Tab Movement, Movement Functions
@subsubsection Line Movement
@cindex Line movement
@cindex Movement, line

@defun next-line &optional count pos
Alter and return @var{pos} (or a copy of the cursor position) so that it
points @var{count} (or one) lines forwards, the column component is not
changed.

If @var{count} is negative (i.e. go backwards) and the resulting line
number is less than zero @code{nil} is returned.

@lisp
(next-line 2 (pos 1 1))
    @result{} #<pos 1 3>

(next-line -1 (pos 1 1))
    @result{} #<pos 1 0>
@end lisp
@end defun

@defun goto-next-line &optional count
Move @var{count} lines downwards, the column number of the cursor is
adjusted so that its glyph position is as close to its previous glyph
position as possible.
@end defun

@defun prev-line &optional count pos
Similar to @var{next-line} but goes backwards (or forwards with a
negative @var{count}).
@end defun

@defun goto-prev-line &optional count
Move @var{count} lines backwards, adjusting the column number of the
cursor as necessary.
@end defun

@node Expression Movement, , Line Movement, Movement Functions
@subsubsection Expression Movement
@cindex Expression movement
@cindex Movement, expression

Some major modes provide functions to move backwards and forwards over
expressions written in a buffer in the programming language that the mode
supports (@pxref{Mode-Specific Expressions}), for example the Lisp mode
defines the syntax of Lisp forms written in a buffer.

@defun forward-exp &optional count
This function moves the cursor over @var{count} expressions, as defined
in the current buffer. If the buffer has no expression definitions an
error is signalled.
@end defun

@defun backward-exp &optional count
Moves backwards over @var{count} (or one) expressions, leaving the cursor
at the beginning of the expression. If the buffer has no expression definition
functions an error is signalled.
@end defun

@node Positions and Offsets, , Movement Functions, Positions
@subsection Positions and Offsets
@cindex Positions and offsets
@cindex Offsets and positions

Although Jade stores the position of a character as a pair of two numbers
many other programs define the position of a character as its offset from
the beginning of the buffer or file it is in. The following functions
may be used to convert between these two types of positions in a specified
buffer.

@defun pos-to-offset &optional pos buffer
This function returns the offset of the character at the position @var{pos}
(or the cursor position by default) in the specified buffer. This will be
an integer, the first character in a buffer is represented by an offset
of zero.

@lisp
(pos-to-offset (pos 0 0))
    @result{} 0

(pos-to-offset)
    @result{} 195654
@end lisp
@end defun

@defun offset-to-pos offset &optional buffer
Creates a new position object which contains the position of the character
@var{offset} characters from the start of the specified buffer.

@lisp
(offset-to-pos 0)
    @result{} #<pos 0 0>

(offset-to-pos 195654)
    @result{} #<pos 14 5974>
@end lisp
@end defun

@node Marks, Glyph Tables, Positions, Programming Jade
@section Marks
@cindex Marks
@cindex Positions, marks

A @dfn{mark} is a Lisp object which points to a character in a file (or
buffer), as the buffer the file is stored in is modified the position
the mark points to is also modified so that the mark will @emph{always}
point to the same character.

The character that a mark points to does not have to be loaded into the
editor all the time either; if the file the character is in is not resident
in a buffer the mark will simply contain the character's position and
the file's name. When a file is loaded any marks pointing to the file
are altered so that they point straight to the buffer containing the file.

@defun markp object
This function returns @code{t} if its argument is a mark.
@end defun

@menu
* Mark Components::             Marks contain two values; position and file
* Mark Relocation::             How the position of a mark is updated as
                                  its buffer is modified
* Mark Residency::              Marks may point to files which have not
                                  been loaded
* Creating Marks::              Functions to allocate new mark objects
* Altering Marks::              Setting the components of a mark
* Moving to Marks::             Moving the cursor to the character a
                                  mark points to
@end menu

@node Mark Components, Mark Relocation, , Marks
@subsection Mark Components
@cindex Mark components

Each mark object has two main components; the position of the
character pointed to by the mark (a position object) and the file which
the character is contained by.

The file is the most complex component, it can be either a string naming
the file or a buffer. When the file component is a string the mark
is said to be @dfn{non-resident} since none of the editor buffers
contain the character which the mark points to.

@defun mark-pos mark
Returns the position object contained in the marker @var{mark}, no copy
is made: if you modify the position returned it will be reflected in the
position of the mark.

Note that if you later modify the buffer the mark is resident in the
position previously returned by @code{mark-pos} may be altered by
the mark relocation process. @xref{Mark Relocation}.
@end defun

@defun mark-file mark
Returns the file component of @var{mark}. This will be either the name of
the file or the buffer itself depending on whether the mark is resident
or not. @xref{Mark Residency}.
@end defun

@node Mark Relocation, Mark Residency, Mark Components, Marks
@subsection Mark Relocation
@cindex Mark relocation

An important feature of marks is that they always point to the same
character, even when the buffer has been modified, changing the position
of the character (i.e. if some text is deleted from somewhere before the
character its position will probably change).

Every time a buffer is modified each mark which points to a character
in that buffer is examined and then, if necessary, the position it points
to is changed to take account of the buffer's new state.

Basically, what happens is that each mark will try to point at the
same character all the time. If some text is inserted at the position
of the mark the mark's position will be advanced to the end of the insertion
and hence the original character.

The only time the mark will not point at the same character is when the
character is deleted from the buffer. In this case the mark will point
to the start of the deletion.

@node Mark Residency, Creating Marks, Mark Relocation, Marks
@subsection Mark Residency
@cindex Mark residency
@cindex Resident marks

As I have already explained, a mark does not necessarily have to point
at a character loaded into a buffer; it can also point at a character
in a file on disk somewhere. When this happens the mark is said to be
non-resident.

@defun mark-resident-p mark
This function returns @code{t} when the character pointed to by the marker
@var{mark} is resident in one of the editor's buffers.
@end defun

When the function @code{mark-file} (@pxref{Mark Components}) is applied
to a non-resident mark it returns the full name of the file, for example,

@lisp
(setq x (make-mark (pos 0 20) "/tmp/foo.c"))
    @result{} #<mark "/tmp/foo.c" #<pos 1 21>>
(mark-resident-p x)
    @result{} nil
(mark-file x)
    @result{} "/tmp/foo.c"
@end lisp

When a file is loaded into a buffer all existing non-resident marks
are examined to see if they point to that file. If so that mark has
its file component set to the buffer that the file was loaded into.

Similarly, when a buffer is deleted any marks pointing to characters in
that buffer are made non-resident: their file component is set to the
name of the file.

When the function which moves the cursor to the position of a specific
mark (@code{goto-mark}, @pxref{Moving to Marks}) is called with a
non-resident mark it will try to load the file into a buffer.

The following code fragment can be used to ensure that a mark @var{mark}
is resident,

@lisp
(or (mark-resident-p @var{mark})
    (open-file (mark-file @var{mark}))
    (error "Can't make mark resident, %S" @var{mark}))
@end lisp

@node Creating Marks, Altering Marks, Mark Residency, Marks
@subsection Creating Marks
@cindex Creating marks
@cindex Marks, creating

@defun make-mark &optional pos buffer-or-filename
This function allocates a new mark object and fills it in according
to the supplied arguments.

It will point at a character at position @var{pos}, or the position of the
cursor in the current window. Note that a copy of @var{pos} is made.

The @var{buffer-or-filename} argument specifies the file component of the
mark. If @var{buffer-or-filename} is a buffer (@code{nil} or undefined means
the current buffer) the mark will use it and therefore will be resident
(@pxref{Mark Residency}).

Alternatively, @var{buffer-or-filename} can be a string naming the file
explicitly. If the file is already loaded into a buffer that buffer will be
used and the mark will be resident. Otherwise the mark will be non-resident
and the string will be used as the file component.

With no arguments this function will produce a resident mark pointing at
the cursor in the current buffer.

@lisp
(make-mark)
    @result{} #<mark #<buffer programmer.texi> #<pos 46 6152>>

(make-mark (buffer-start) "/tmp/foo")
    @result{} #<mark "/tmp/foo" #<pos 0 0>>

(make-mark (pos 0 3))
    @result{} #<mark #<buffer programmer.texi> #<pos 0 3>>
@end lisp
@end defun

@node Altering Marks, Moving to Marks, Creating Marks, Marks
@subsection Altering Marks
@cindex Altering marks
@cindex Marks, altering

If you just want to set the position of a mark you can modify its
position component (@pxref{Mark Components}). Alternately the following
function may be used. When you need to set the file a mark points to
the only method is to use this function.

@defun set-mark mark &optional pos buffer-or-filename
This function sets either or both of the position and file components of
the mark object @var{mark}, then returns @var{mark}.

If @var{pos} is a position object the position component of @var{mark} will
be set to it (a copy of it actually).

If the @var{buffer-or-filename} argument is non-@code{nil} the file component
of @var{mark} will be set. This argument can be a buffer object or a string
naming a file. If a named file is already in a buffer that buffer will be
used instead.

@lisp
(setq x (make-mark))
    @result{} #<mark #<buffer programmer.texi> #<pos 46 6186>>
(set-mark x (buffer-start))
    @result{} #<mark #<buffer programmer.texi> #<pos 0 0>>
(set-mark x nil "/tmp/foo")
    @result{} #<mark "/tmp/foo" #<pos 0 0>>
@end lisp
@end defun

@node Moving to Marks, , Altering Marks, Marks
@subsection Moving to Marks
@cindex Moving to marks
@cindex Marks, moving to

@defun goto-mark mark
This function switches to the buffer containing @var{mark} (if necessary)
and then moves the cursor to the character that the mark points to.

If the mark is not currently resident an attempt will be made to load the
mark's file into a new buffer and use that.
@end defun

@node Glyph Tables, Input Events, Marks, Programming Jade
@section Glyph Tables
@cindex Glyph tables
@cindex Display, glyph tables
@cindex Rendering, glyph tables

A @dfn{glyph table} is a Lisp object used to define a mapping between
the characters which may occur in a buffer (anything with a numeric value
between 0 and 255 inclusive) and the sequences of glyphs which are
drawn into a window to represent these characters.

A @dfn{glyph} is a image which, when rendered into the display, takes up
one character position. Each character in a buffer is rendered as a sequence
of 1 or more glyphs.

@defun glyph-table-p object
This function returns @code{t} when its argument is a glyph table.
@end defun

@menu
* Glyph Table Basics::          How a glyph table defines mappings
* Glyph Positions::             The position of a character and its
                                  glyph sequence may be different
* Creating Glyph Tables::       Making new glyph tables
* Buffer Glyph Tables::         Each buffer may use a separate glyph
                                table for its display
@end menu

@node Glyph Table Basics, Glyph Positions, , Glyph Tables
@subsection Glyph Table Basics
@cindex Glyph table basics

A glyph table is basically an array that has 256 elements; each element
represents one character and contains between zero and four glyphs --- the
glyphs which will be printed for the character.

A special case exists for the tab character; when an element in the table
contains zero glyphs, enough spaces will be printed to fill in to the
next tab stop.

@defun get-glyph glyph-table character
This function returns a string containing the glyphs in the element of
the glyph table @var{glyph-table} for the character @var{character}.

@lisp
(get-glyph (default-glyph-table) ?a)
    @result{} "a"

(get-glyph (default-glyph-table) ?\t)
    @result{} ""        ;TAB is special

(get-glyph (default-glyph-table) ?\000)
    @result{} "^@@"      ;the NUL character
@end lisp
@end defun

@defun set-glyph glyph-table character glyph-string
This function sets the sequence of glyphs used to render the character
@var{character} in the glyph table @var{glyph-table} to the characters
in the string @var{glyph-string}.

An error is signalled if there are more than four characters in
@var{glyph-string}.

All buffers which use @var{glyph-table} for their rendering will be
totally redrawn at the next redisplay.
@end defun

@node Glyph Positions, Creating Glyph Tables, Glyph Table Basics, Glyph Tables
@subsection Glyph Positions
@cindex Glyph positions
@cindex Positions, glyph

Position objects are usually used to refer to the position of a character
in a buffer, this position (sometimes called the @dfn{character position}
may not be the same as the position of the sequence of glyphs printed
to represent the character. When a position object is used to refer
to the position of a glyph it is called a @dfn{glyph position}.

For example, consider a line in a buffer containing the string
@samp{a\tb} (where @samp{\t} represents a tab character). When this is
rendered in a buffer the glyphs which will actually be drawn are,

@example
a       b
@end example

@noindent
That is, an @samp{a} glyph, followed by seven (assuming @code{tab-size} is
set to 8) @samp{ } glyphs, and lastly a @samp{b} glyph.

The character position of the @samp{b} character in the buffer is
@code{#<pos 2 @var{line}>}, where @var{line} is the line's number.

Now the confusing bit: the @emph{glyph} position of the @samp{b} @emph{glyph}
is @code{#<pos 8 @var{line}>} since it is actually the ninth glyph to
be drawn.

The good news is that most of the time you can forget about glyph
positions, they only need to be considered when you're thinking about
how the buffer will look when rendered in the window. For example,
Lisp programs which indent source code will definitely need to use
glyph positions.

Two functions are provided for converting between character and glyph
positions and vice versa.

@defun char-to-glyph-pos &optional pos buffer
Return a new position object containing the glyph position of the character
at character position @var{pos} (or the cursor position) in the
specified buffer.
@end defun

@defun glyph-to-char-pos pos &optional buffer
This function returns a new position object containing the character position
of the glyph printed at glyph position @var{pos} in the specified
buffer.

If the glyph position @var{pos} is not the position of the first in
a sequence of glyphs representing a single character the position of
the next character will be returned.
@end defun

@node Creating Glyph Tables, Buffer Glyph Tables, Glyph Positions, Glyph Tables
@subsection Creating Glyph Tables
@cindex Creating glyph tables
@cindex Glyph tables, creating

@defun make-glyph-table source
This function creates a new glyph table, containing glyph sequences
defined by the @var{source} argument.

If @var{source} is a glyph table it will be copied, if it's a buffer
that buffer's glyph table will be copied or if @var{source} is
@code{nil} a copy of the default glyph table will be made.
@end defun

@node Buffer Glyph Tables, , Creating Glyph Tables, Glyph Tables
@subsection Buffer Glyph Tables
@cindex Buffer glyph tables
@cindex Glyph tables, buffer

Each buffer may define its own glyph table that will be used to provide
the character-to-glyph mappings for that buffer.

@defun buffer-glyph-table &optional buffer
Returns the glyph table installed in the buffer.
@end defun

@defun set-buffer-glyph-table glyph-table &optional buffer
Sets the glyph table being used in the buffer to @var{glyph-table}.
@end defun

@cindex Default glyph table
@cindex Glyph tables, default
By default, each buffer uses the @dfn{default glyph table}. This is
a glyph table set up when the editor initialise itself. The mappings
it provides are very generic, for more details see @ref{Character Images}.

@defun default-glyph-table
This function returns the default glyph table.
@end defun

Redefining some of the mappings in the default glyph table is an easy
way to affect rendering operations, for example if I want the UK
pound sign character (ASCII value is octal 243) to be printed as
itself and not the usual escape sequence I can do the following,

@lisp
(set-glyph (default-glyph-table) ?243 "\243")
@end lisp

@node Input Events, Keymaps, Glyph Tables, Programming Jade
@section Input Events
@cindex Input events
@cindex Events, input

An @dfn{input event} is a Lisp object representing an action initiated by the
user, i.e. a key press, pressing a mouse button and similar things.

Note that input events are often referred to as key presses, this isn't
really accurate but since most input events are key presses the term
sort of stuck. Anyway, wherever the phrase @samp{key press} occurs
in this manual it could be replaced by @samp{input event}.

Each input event is represented by a cons cell (@pxref{Cons Cells})
containing two integers, these integers encode the actual input event. The
encoding is opaque; the only way to access an event meaningfully is via
the functions provided.

@defun eventp object
This function returns @code{t} if its argument is an input event.
@end defun

Each event has a textual name, for the actual format of these names
see @ref{Key Names}.

Functions are available to convert between the name of an event and the
actual event itself, and vice versa.

@defun lookup-event event-name
Create and return a new input event whose name is @var{event-name}.

@lisp
(lookup-event "Ctrl-x")
    @result{} (120 . 9)

(lookup-event "Ctrl-Meta-LMB-Click1")
    @result{} (1 . 58)
@end lisp
@end defun

@defun event-name event
This function returns a string naming the input event @var{event}.

@lisp
(event-name (lookup-event "Ctrl-x"))
    @result{} "Ctrl-x"
@end lisp
@end defun

@node Keymaps, Event Loop, Input Events, Programming Jade
@section Keymaps
@cindex Keymaps

A @dfn{keymap} is a Lisp object defining a mapping between input events
(@pxref{Input Events}) and commands to be executed when the event loop
(@pxref{Event Loop}) receives the input event.

@defun keymapp object
Returns @code{t} when @var{object} is a keymap.
@end defun

@menu
* Types of Keymap::             Two different formats of keymap
* Creating Keymaps::            Allocating new keymaps
* Binding Keys::                Inserting and removing key bindings
* Key Lookup::                  How a key press is resolved into a command
* Prefix Keys::                 Chaining events into multiple-event
                                  bindings
* Standard Keymaps::            Predefined keymaps you can modify
@end menu

@node Types of Keymap, Creating Keymaps, , Keymaps
@subsection Types of Keymap
@cindex Types of keymap
@cindex Keymaps, types

There are two different types of keymap; one for keymaps which contain
only a few bindings, the other providing a more efficient method of storing
larger numbers of bindings.

@table @dfn
@item Key lists
These are used for keymaps which only contain a few bindings; they are
lists whose first element is the symbol @code{keymap}. All subsequent
elements define bindings, they are represented by three-element vectors. The
first two are the contents of the cons cell representing the input event,
the other element is the command to be invoked.

For example,

@lisp
(keymap [120 9 some-command])
@end lisp

@noindent
Since the event @code{(120 . 9)} is the key press @kbd{Ctrl-x}, this
keymap binds the command @code{some-command} to the key press @kbd{Ctrl-x}.

@item Key tables
Key tables are used for keymaps which contain a larger number of bindings.
They are vectors of 127 elements, a hash function is used to hash each
event contained in the keymap into one of the 127 buckets. Each bucket
is a list of key bindings in the same form as a key list (but without
the @code{keymap} symbol).
@end table

@node Creating Keymaps, Binding Keys, Types of Keymap, Keymaps
@subsection Creating Keymaps
@cindex Creating keymaps
@cindex Keymaps, creating

Since there are two different types of keymap (lists and tables) there
are two different functions for creating them with.

@defun make-keylist
Creates and returns a new key list containing no bindings.

@lisp
(make-keylist)
    @result{} (keymap)
@end lisp
@end defun

@defun make-keytab
This function returns a new key table; it will be totally empty.

@lisp
(make-keytab)
    @result{} [nil nil @dots{} nil]
@end lisp
@end defun

If you want to produce a new copy of a keymap use the @code{copy-sequence}
function (@pxref{Sequence Functions}) to duplicate the source keymap.

@node Binding Keys, Key Lookup, Creating Keymaps, Keymaps
@subsection Binding Keys
@cindex Binding keys
@cindex Keymaps, binding keys

The @code{bind-keys} function is used to install new key bindings
into a keymap (either a key list or table).

@defun bind-keys keymap &rest bindings
This function installs zero or more key bindings into the keymap
@var{keymap}.

Each binding is defined by two elements in the list of @var{bindings},
the first defines the name of the input event (or the event itself)
and the second defines the command to be associated with the event.

For example to bind two keys in the keymap @var{keymap}; the event @kbd{Ctrl-f}
to the command @code{goto-next-char} and the event @kbd{Ctrl-b} to the
command @code{goto-prev-command} the following form would be used,

@lisp
(bind-keys @var{keymap}
 "Ctrl-f" 'goto-next-char
 "Ctrl-b" 'goto-prev-char)
@end lisp
@end defun

@defun unbind-keys @var{keymap} &rest @var{keys}
This function removes the bindings of the events @var{keys} (these may
be the names of the events or the event objects themselves) from the
keymap @var{keymap}.

@lisp
(unbind-keys @var{keymap}
 "Ctrl-f"
 "Ctrl-b")
@end lisp
@end defun

@node Key Lookup, Prefix Keys, Binding Keys, Keymaps
@subsection Key Lookup
@cindex Key lookup
@cindex Keymaps, key lookup

Each time the event loop (@pxref{Event Loop}) receives an input event from
the window system it searches for a binding of that event.

The variables @code{keymap-path} and @code{next-keymap-path} are used
to determine the @dfn{keymap environment}, this is the list of keymaps
which are searched when looking for the binding.

@defun lookup-event-binding event &optional reset-path
This function examines the current keymap environment for a binding of
the event @var{event} (@pxref{Input Events}). If such a binding is found
its command is returned, otherwise @code{nil} is returned.

If the optional @var{reset-path} argument is non-@code{nil} the
@code{next-keymap-path} variable will be set to @code{nil}, otherwise it
will be left with its original value.
@end defun

@defvar keymap-path
A buffer-local variable providing the list of keymaps (or variables whose
values are keymaps) which will be searched for a binding when the value
of the @code{next-keymap-path} variable is @code{nil}.

@lisp
keymap-path
    @result{} (minor-mode-keymap texinfo-keymap global-keymap)
@end lisp
@end defvar

@defvar next-keymap-path
This variable is used to create multi-event key bindings. When it has a
non-@code{nil} value it overrides the @code{keymap-path} variable when a
key binding is being searched for.

After the value of this variable is used to search for a key binding
it is set to @code{nil}. This means that, unless another prefix key
occurred, the next input event received will be resolved through the
@code{keymap-path} variable.

When this variable is set the value of the @code{prefix-arg} variable is
set to the current value of the @code{current-prefix-arg} variable. This is
so a prefix argument given to a multi-event command is transmitted through
to the command.

For more details on multi-event bindings see @ref{Prefix Keys}.
@end defvar

@node Prefix Keys, Standard Keymaps, Key Lookup, Keymaps
@subsection Prefix Keys
@cindex Prefix keys
@cindex Keymaps, prefix keys

As briefly noted in the previous section it is possible to create
multi-event key bindings. The @code{next-keymap-path} variable is
used to link key presses (known as @dfn{prefix keys} since they prefix
the actual, command-invoking, binding) to a new keymap environment
which will be used to resolve the next key press. This method allows
key sequences of an arbitrary length to be used.

The best way to explain this is probably with an example. Consider the
following,

@lisp
(setq entry-keymap (make-keylist))
(bind-keys entry-keymap
 "Ctrl-x" '(setq next-keymap-path '(second-keymap)))

(setq second-keymap (make-keylist))
(bind-keys second-keymap
 "Ctrl-j" 'some-command)
@end lisp

@noindent
Two keymaps are created, the first of which, @code{entry-keymap}, would
be placed in the @code{keymap-path} list. When @kbd{Ctrl-x} is typed
the associated command would be invoked, installing the next piece of
the chain, the @code{second-keymap} into the @code{next-keymap-path}
variable.

So, after @kbd{Ctrl-x} is typed the keymap environment will be the list
of keymaps @code{(second-keymap)}, subsequently typing @kbd{Ctrl-j}
would then invoke the command @code{some-command}.

@node Standard Keymaps, , Prefix Keys, Keymaps
@subsection Standard Keymaps
@cindex Standard keymaps
@cindex Keymaps, predefined

Several keymaps are predefined by Jade.

@table @code
@item global-keymap
@vindex global-keymap
This keymap is the root of the global keymap structure; all buffers
which allow themselves to be edited have this keymap in their
@code{keymap-path}.

@item ctrl-x-keymap
@vindex ctrl-x-keymap
This is linked to the @code{global-keymap} via the key @kbd{Ctrl-x}.

@item ctrl-x-4-keymap
@vindex ctrl-x-4-keymap
The keymap for the global prefix @kbd{Ctrl-x 4}.

@item ctrl-x-5-keymap
@vindex ctrl-x-5-keymap
The keymap for the global prefix @kbd{Ctrl-x 5}.

@item user-keymap
@vindex user-keymap
This keymap is only to be bound by the @emph{user}, not by programmers!
It's linked to the global prefix @kbd{Ctrl-c} and is intended to allow
users to bind unmodified keys (modified keys with the prefix @kbd{Ctrl-c}
are usually bound to by modes) to commands which don't have bindings by
default.
@end table

@node Event Loop, Editing Files, Keymaps, Programming Jade
@section Event Loop
@cindex Event loop
@cindex Commands, event loop
@cindex Keys, event loop

Whenever Jade is not executing a command it is sitting in the
@dfn{event loop}. This is where the editor waits for any input events
which the window system sends it, invokes the commands they resolve to
and then redraws all the editor windows to reflect the modifications
made to any buffers.

@menu
* Event Loop Actions::          What actually happens
* Commands::                    Commands are Lisp functions which may
                                  be called interactively by the user
* Event Loop Info::             Information about the event loop
* Recursive Edits::             How to call the event loop from Lisp
                                  programs
* Reading Events::              Reading single events in Lisp
* Idle Actions::                What happens when nothing happens
@end menu

@node Event Loop Actions, Commands, , Event Loop
@subsection Event Loop Actions
@cindex Event loop actions

When Jade appears to be doing nothing it is probably sitting in the
event loop waiting for input to arrive. When an input event arrives from
the window system it is processed according to its type.

If the input event is a keyboard or mouse button event it is converted
into a Lisp input event (@pxref{Input Events}) and the current keymap
environment is searched for a binding of that event (@pxref{Key Lookup}).
If a binding of the event is found it defines a command (@pxref{Commands})
to be invoked, the @code{call-command} function (@pxref{Calling Commands})
is used to do this.

When no binding of a key or mouse button event exists the hook,
@code{unbound-key-hook}, is evaluated; if this returns @code{nil} and the
event is a keyboard event and no prefix keys (@pxref{Prefix Keys}) preceded
it the key is inserted into the current buffer before the cursor.

If the event was not a keyboard or mouse button event the event loop will
deal with it itself; these events are generally things which should be
transparent to Lisp programs (i.e. window exposure notification, etc@dots{}).

One exception is the event sent when a window should be closed (i.e. hitting
the close-window gadget in Intuition, or sending a window the delete-window
atom in X), the hook @code{window-closed-hook} is called. By default this
hook is setup to invoke the @code{close-window} command (as bound to
@kbd{Ctrl-x 0}).

Another function of the event loop is to wait for input from any of the
subprocesses currently executing (@pxref{Processes}); whenever input is
pending in a subprocess's standard output channel it is copied to the
process objects's output stream.

After processing an event or piece of subprocess output the event loop
will redisplay any part of any window which needs to be updated; this
may be necessary if a window is now displaying a different part of a
buffer, or if the part of the buffer it is displaying has been modified.
@xref{Rendering}.

Normally Jade will `sleep' while it's waiting for input, however after
every second it spends asleep the event loop will wake up and try to
do a sequence of operations; for more details see @ref{Idle Actions}.

@defvr Hook unbound-key-hook
The hook called when an unbound input event is received.
@end defvr

@defvr Hook window-closed-hook
The hook called when an event is received telling Jade to close a window;
the current window is the one which should be closed.
@end defvr

@node Commands, Event Loop Info, Event Loop Actions, Event Loop
@subsection Commands
@cindex Commands
@cindex Editor commands

A @dfn{command} is a Lisp function which may be called interactively, that is,
either as a binding of an input event or by name (with the @kbd{Meta-x}
key sequence).

Commands are defined in the same way as functions, using the @code{defun}
special form; the body forms of a command must contain an
@dfn{interactive declaration}. This shows that the function may be called
interactively part and tells the @code{call-command} function how to
compute the argument values to apply to the command.

@menu
* Interactive Declarations::    How to define a command
* Prefix Arguments::            Arguments to a command from the user
* Calling Commands::            The function used to invoke a command
* Example Commands::            A definition of a command
@end menu

@node Interactive Declarations, Prefix Arguments, , Commands
@subsubsection Interactive Declarations
@cindex Interactive declarations
@cindex Commands, interactive declarations

When you define a command (using the @code{defun} special form in the
same way you would define a function) the first of its body forms (after
the optional documentation string) @emph{must} be an interactive declaration.

This form looks like a call to the special form @code{interactive}, in actual
fact this special form always returns @code{nil} and has no side-effects. The
only effect of this form is to show the @code{call-command} function, which
invokes commands, that this function definition is actually a command (i.e.
it may be called interactively). The second element of the declaration
form (after the @code{interactive} symbol) defines how the argument
values applied to the command are computed.

The structure of an interactive declaration, then, is:

@lisp
(interactive [@var{calling-spec}])
@end lisp

When a command is defined this is how it is defined with the interactive
declaration:

@lisp
(defun some-command (arg1)
  "Optional documentation string."
  (interactive @dots{})
  @dots{}
@end lisp

The @var{calling-spec} form defines the argument values applied to the
command when it is called interactively, it may be one of,

@itemize @bullet
@item
@code{nil} or undefined (i.e. @code{(interactive)}); no arguments are
given to the command, this type of interactive declaration just shows
that the function may be called interactively.

@item
A string; zero or more lines (each separated by a newline character), each
line defines how to compute one argument value. The first character of
each line is a code letter defining exactly how to compute the argument,
the rest of the line is an optional prompt string which some code letters
show the user when prompting for the argument.

The currently available code letters are,

@table @samp
@item a
Prompt, with completion, for a function object.

@item b
Prompt, with completion, for an existing buffer object.

@item B
Prompt, with completion, for a buffer; if it doesn't yet exist it will
be created.

@item c
Prompt for a character.

@item C
Prompt with completion for a command.

@item d
The position of the cursor in the current window.

@item D
Prompt with completion for the name of a directory in the filing system.

@item e
The event which caused this command to be invoked.

@item E
The event which caused this command, cooked into a string.

@item f
Prompt with completion for the name of an existing file.

@item F
Prompt with completion for the name of a file; it doesn't have to exist.

@item k
Prompt for a single event.

@item m
The starting position of the marked block in the current window.

@item M
The ending position of the current block.

@item n
Prompt for a number.

@item N
The prefix argument (@pxref{Prefix Arguments}) as a number, if no prefix
argument exists, prompt for a number.

@item p
The prefix argument as a number, this will be 1 if no prefix argument
has been entered.

@item P
The raw prefix argument.

@item s
Prompt for a string.

@item S
Prompt with completion for a symbol.

@item t
The symbol @code{t}.

@item v
Prompt with completion for a variable.

@item x
Read one Lisp object.

@item X
Read a Lisp object, then evaluate it.
@end table

A null line produces an argument value of @code{nil}.

Any non-alphabetic characters at the beginning of the @var{calling-spec}
are used as flags, the currently recognised flags are,

@table @samp
@item *
If the active buffer is read-only an error will be signalled.

@item -
After building the argument list the block marked in the current window
will be unmarked.
@end table

@item
Anything else; the form is evaluated and expected to return a @emph{list}
of arguments to apply to the command.
@end itemize

Some example interactive declarations,

@lisp
;; No arguments, but the function may be called
;; as a command.
(interactive)

;; One argument, an existing buffer
(interactive "bBuffer to kill:")

;; If buffer isn't read-only, three arguments:
;; @code{nil}, a Lisp object and @code{t}.
(interactive "*\nxLisp form:\nt")
@end lisp

@node Prefix Arguments, Calling Commands, Interactive Declarations, Commands
@subsubsection Prefix Arguments
@cindex Prefix arguments
@cindex Commands, prefix arguments

When the you invoke a command it is often useful to be able to specify
arguments which the command will act on. @dfn{Prefix arguments} are
used for this purpose. They are called @emph{prefix} arguments since
they are entered before the command is invoked, and therefore prefix
the command with an argument. Prefix arguments are usually integers.

The easiest way for a command to access these arguments is through its
interactive declaration (@pxref{Interactive Declarations}) and the
@samp{N}, @samp{p} and @samp{P} code letters.

The two variables @code{prefix-arg} and @code{current-prefix-arg} are used
to store prefix arguments. Whenever a command is invoked the value of
@code{prefix-arg} is moved to @code{current-prefix-arg} and @code{prefix-arg}
set to @code{nil}. This allows commands to set the prefix argument of
the next command by assigning a value to the @code{prefix-arg} variable.

These variables store an object known as the @dfn{raw prefix argument},
when a command is called it normally uses the @dfn{numeric prefix argument},
this is an integer created from the raw argument using the following rules,

@itemize @bullet
@item
If the raw arg is @code{nil} the numeric value is 1.

@item
If the raw arg is any other symbol the value is -1.

@item
A number is used unchanged.

@item
A cons cell stores the numeric value in its car.
@end itemize

The @code{prefix-numeric-argument} function is used to convert the
raw argument into a numeric value.

@defun prefix-numeric-argument raw-arg
Returns the numeric value of the raw prefix argument @var{raw-arg}.
@end defun

@defvar prefix-arg
The value of the raw prefix argument used by the next command to be
invoked.
@end defvar

@defvar current-prefix-arg
The value of the raw prefix argument of the current command.
@end defvar

@node Calling Commands, Example Commands, Prefix Arguments, Commands
@subsubsection Calling Commands
@cindex Calling commands
@cindex Commands, calling

When a command is to be invoked, the @code{call-command} function is
used. This builds a list of argument values to apply to the command
(using its interactive declaration) then calls the command.

@defun commandp @var{object}
This function returns @code{t} if its argument may be called interactively.
If @var{object} is a function (i.e. a symbol or a lambda-expression) it
is a command if it contains an interactive declaration
(@pxref{Interactive Declarations}).

The only other object which is a command is a function call form; the
use of these types of commands is discouraged but they can be useful
sometimes.

@lisp
(commandp 'setq)
    @result{} nil

(commandp 'isearch-forward)
    @result{} t

(commandp '(setq x 20))
    @result{} t
@end lisp
@end defun

@deffn Command call-command command &optional prefix-arg
This function calls the command @var{command} interactively. See the
documentation of @code{commandp} above for what constitutes a command.

If the @var{prefix-argument} is non-nil it defines the value of
the @code{current-prefix-arg} variable for this command, normally
the value of this variable would be taken from the global @code{prefix-arg}
variable.

When called interactively, this function will prompt for a command
to invoke. This function is bound to the key sequence @kbd{Meta-x}.
@end deffn

@node Example Commands, , Calling Commands, Commands
@subsubsection Example Commands
@cindex Example commands
@cindex Commands, example command definitions

This is a couple of simple commands, taken from the source code of Jade.

@lisp
(defun backward-kill-word (count)
  "Kill COUNT words backwards."
  (interactive "p")
  (kill-area (forward-word (- count)) (cursor-pos)))
@end lisp

@lisp
(defun find-file (name)
  "Sets the current buffer to that containing the file NAME, if
NAME is unspecified it will be prompted for. If the file is not
already in memory `open-file' will be used to load it."
  (interactive "FFind file: ")
  (goto-buffer (open-file name)))
@end lisp

@node Event Loop Info, Recursive Edits, Commands, Event Loop
@subsection Event Loop Information
@cindex Event loop information

@defvar this-command
This variable contains the value of the command currently being executed.
@end defvar

@defvar last-command
Holds the previously executed command.
@end defvar

@defun current-event
Returns the event which caused this command to be invoked.
@end defun

@defun current-event-string
Returns a string which is the `cooked' representation of the current event.
@end defun

@defun last-event
Returns the event which caused the previous command.
@end defun

@node Recursive Edits, Reading Events, Event Loop Info, Event Loop
@subsection Recursive Edits
@cindex Recursive edits
@cindex Event loop, recursive edit

Entering a @dfn{recursive edit} basically means to recursively call the
event loop from a Lisp program, this latest instance of the event loop
will work like the normal event loop (the @dfn{top level} event loop)
until it is exited, at which point the Lisp program will regain control.

Recursive edits should be used sparingly since they can be very confusing
for the user; they are mainly used to implement interactive user
interfaces in the middle of a Lisp program or command. This can be
achieved by installing a special set of key bindings for the duration
of the recursive edit.

When programming with recursive edits @emph{a lot} of care should be
used; if proper cautions aren't taken an abnormal exit from a recursive
error can wreak havoc.

Note that @code{throw} and @code{catch} (@pxref{Catch and Throw}) can
be used @emph{through} recursive edits with no problems; the recursive
edit will automatically be aborted.

@deffn Command recursive-edit
Enter a new level of recursive editing.
@end deffn

@defun recursion-depth
This function returns the number of recursive edits currently in
progress. When in the top level this will return zero.
@end defun

@deffn Command top-level
Abort all recursive edits, control will be passed straight back to
the top level event loop.
@end deffn

@deffn Command abort-recursive-edit &optional edit-value
This function aborts the outermost recursive edit (but @emph{never} the
top level) returning @var{edit-value} (or @code{nil}) from the instance
of the @code{recursive-edit} function which invoked this recursive edit.
@end deffn

When using recursive edits it is important to remember that the buffer
and window configuration that existed when the edit was entered may
not still exist when the recursive edit terminates. This means
that some care has to be taken when installing and removing buffer-local
values of variables. For example, the @code{ask-y-or-n} function, which
uses a recursive edit, does something like this:

@lisp
(let
    ;; First save the old values of the variables to be altered.
    ;; The variables can't be directly bound to since this doesn't
    ;; work properly with buffer-local variables :-(
    ((old-u-k-h unbound-key-hook)
     (old-k-p keymap-path)
     (old-buf (current-buffer)))
  ;; Now install the new values
  (setq unbound-key-hook (cons #'(lambda ()
                                   (beep)
                                   t)
                               nil)
        keymap-path '(y-or-n-keymap)
        status-line-cursor t)
  ;; This is the important bit; ensure that the old values will
  ;; be reinstated even if an abnormal exit occurs. Also note
  ;; that they are always set in the original buffer.
  (unwind-protect
      (catch 'ask
        (recursive-edit))
    (with-buffer old-buf
      (setq keymap-path old-k-p
            unbound-key-hook old-u-k-h
            status-line-cursor nil)))))
@end lisp

@node Reading Events, Idle Actions, Recursive Edits, Event Loop
@subsection Reading Events
@cindex Reading events
@cindex Event loop, reading events

Most of the time it is unnecessary to read events manually; usually
a special-purpose keymap will be sufficient. However it is possible
to read single events from a Lisp program.

@defun read-event &optional prompt-string
Read the next input event from the current window and return it. If the
optional string @var{prompt-string} is defined it is a one-line message
to display while waiting for the event.

Note that this function isn't very efficient when used heavily; it uses
a recursive edit and the @code{unbound-key-hook} to read the event. If
possible use a keymap instead.
@end defun

@node Idle Actions, , Reading Events, Event Loop
@subsection Idle Actions
@cindex Idle actions
@cindex Event loop, idle actions

When a second goes by with no input events arriving, the editor assumes
that is has @dfn{idle time} available, and tries to use this period to
do non-essential tasks. These tasks include things like garbage collection
and auto-saving modified files.

Whenever idle time is detected one of the following tasks is performed. They
are listed in order of preference; once one of these has been done Jade
will again sleep until an input event is received or another second
elapses, whichever happens soonest.

@enumerate
@item
If prefix keys have been entered and are outstanding their names will
be printed in the status line. @xref{Prefix Keys}.

@item
If any buffers are ready to be auto-saved (i.e. enough time since their
last auto-save has elapsed) one of these buffers will be auto-saved.
Only one buffer is ever saved in each idle period. @xref{Auto-Saving Files}.

@item
If the total size of the data objects allocated since the last garbage
collection is greater than the value of the @code{idle-gc-threshold} variable
then the garbage collector is invoked.

@defvar idle-garbage-threshold
The number of bytes of Lisp data which must have been allocated since the
last garbage collection for the garbage collector to be called in an
idle period.

It is a good idea to set this variable much lower than the value of
the @code{gc-threshold} variable since garbage collections happening
while Jade is idle should usually be unnoticeable.
@end defvar

@xref{Garbage Collection}.

@item
If none of the other tasks have been performed the @code{idle-hook} hook
is dispatched. I'm not sure what this hook could be used for but you
never know@dots{}
@end enumerate

@node Editing Files, Text, Event Loop, Programming Jade
@section Editing Files
@cindex Editing files
@cindex Files, editing
@cindex Buffers, editing files

The main function of Jade is editing files of text; buffers (@pxref{Buffers})
are used to contain files to be edited. When the buffer is displayed
in a window (@pxref{Windows}) the user can edit the file interactively using
the keyboard and mouse.

This chapter documents the Lisp interface to all this; for the user's
perspective see @ref{Loading and Saving Files}.

@menu
* Reading Files Into Buffers::  How to read a file into a buffer
* Writing Buffers::             Functions to write buffers to files
* Buffer Date Stamps::          The last-modification time of each
                                  file is recorded
* Buffer Modification Counts::  Variables storing modification counts
* Making Backups::              How backup files can be made
* Controlling Auto-Saves::      Functions to control the auto-saving
                                  feature
@end menu

@node Reading Files Into Buffers, Writing Buffers, , Editing Files
@subsection Reading Files Info Buffers
@cindex Reading files into buffers
@cindex Files, reading into buffers
@cindex Buffers, reading files

Before a file can be edited it must be read into a buffer, this buffer
can then be modified and later saved over the original contents of the
file. Note that editing a buffer makes @emph{no} changes to the contents
of the file on disk; the buffer will have to be written back to the file
on the disk first. @xref{Writing Buffers}.

@defun open-file file-name
This function returns a buffer containing the contents of the file called
@var{file-name}.

If an existing buffer contains the file called @var{file-name} that buffer
is returned. Otherwise a new buffer is created and the file read into it.

When the file has successfully been read into the new buffer any local
variables defined at the end of the file are processed
(@pxref{File Variables}) and the function @code{init-mode} is used to try
to install a major mode for the new buffer. @xref{Installing Modes}.

If file may not be written to the buffer is marked to be read-only.

Note that the hook, @code{read-file-hook}, can be used to read the contents
of the file into the buffer if necessary. See the documentation of this
hook for more details.
@end defun

@defvr Hook read-file-hook
This hook is called by the @code{open-file} function when it wants to
read a file into a buffer. If the hook returns a non-@code{nil} value
@code{open-file} assumes that one member of the hook was successful
in reading the file, otherwise the file will be read verbatim into the
buffer.

The hook is called with two arguments: the name of the file and the
buffer to read it into respectively.

If any members of the hook decide to read the file they're responsible
for setting the @code{buffer-file-name} component of the buffer and
the buffer's @code{buffer-file-modtime} variables to suitable values.

See the @file{gzip.jl} file in the Lisp library directory for an example
of how this hook can be used (in this case to automatically decompress
gzip'ed files).
@end defvr

@defun read-buffer file-or-name &optional buffer
Replaces all text contained by the buffer by the contents of the
file @var{file-or-name}. This can be either a Lisp file object, in
which case bytes will be read until the end of the file is reached,
or the name of a file to read.
@end defun

The following commands are used to read a file into a buffer then display
that buffer in the current buffer.

@deffn Command find-file file-name
Display a buffer containing the file @var{file-name} in the current window.

When called interactively @var{file-name} will be prompted for.
@end deffn

@deffn Command find-alternate-file file-name
Replace the current buffer with one displaying the file @var{file-name}. What
actually happens is that the current buffer is killed and a new one
created.

When called interactively this function will prompt for its argument.
@end deffn

@deffn Command find-file-read-only file-name
Display a buffer containing @var{file-name} in the current window. The
buffer will be read-only.

This will prompt for its argument when called interactively.
@end deffn

There is also a command to insert the contents of a file into a buffer.

@deffn Command insert-file file-name &optional buffer
This command inserts the contents of the file @var{file-name} into
the buffer @var{buffer} (or the current buffer).

The hook @code{insert-file-hook} is called with @var{file-name} as an
argument to try and insert the file (into the current buffer at the
current position). If this hook returns @code{nil} (i.e. none of the
functions in the hook inserted the file) it will be inserted
normally.

If called interactively, @var{file-name} will be prompted for.
@end deffn

@defvr Hook insert-file-hook
Hook used to insert a file (given as the hook's argument) into the current
buffer at the current cursor position.
@end defvr

@deffn Command revert-buffer &optional buffer
Reloads the contents of the buffer from the file it was originally loaded
from; if any unsaved modifications will be lost the user is asked for
confirmation.
@end deffn

@node Writing Buffers, Buffer Date Stamps, Reading Files Into Buffers, Editing Files
@subsection Writing Buffers
@cindex Writing buffers
@cindex Buffers, writing to a file

After a buffer containing a file has been edited it must be written back
to a file on disk, otherwise the modifications will disappear when Jade
is exited!

@defun write-buffer &optional file-name buffer
The primitive to save a buffer's contents. The contents of
the buffer @var{buffer} (or the current buffer) is written to the
file @var{file-name} (or the @code{buffer-file-name} component of the
buffer).
@end defun

@defun write-buffer-area start-pos end-pos file-name &optional buffer
Writes the region of text from @var{start-pos} up to, but not including,
@var{end-pos} to the file @var{file-name}.
@end defun

@defun write-file buffer &optional file-name
Writes the contents of the buffer @var{buffer} to a file on disk. If the
optional argument @var{file-name} is defined it names the file to
write to. Otherwise, the value of the buffer's @code{buffer-file-name}
component is used.

The hook @code{write-file-hook} is used to try and write the file, if this
fails (i.e. the hook returns @code{nil}) the buffer is saved normally.

A backup may be made of the file to be overwritten (@pxref{Making Backups})
and the protection-modes of the overwritten file will be preserved if
possible.
@end defun

@defvr Hook write-file-hook
This hook is called by the @code{write-file} function when a buffer is
to be saved. If no member of the hook actually writes the buffer to a
file (i.e. the hook returns @code{nil}) @code{write-file} will do it
itself in a standard way.

The hook function is responsible for creating any required backup file
(use the function @code{backup-file}, @pxref{Making Backups}) and
resetting the protection-modes of the new file to their original
value.

See the file @file{gzip.jl} in the Lisp library directory for an
example, it uses it to compress certain files automatically.

Remember to make sure that if a member of the hook writes the buffer
it returns a non-@code{nil} value!

The following code fragment defines a function which does what the default
action of @code{write-file} is,

@lisp
(defun write-file-default-action (buffer name)
  (let
      ((modes (when (file-exists-p name) (file-modes name))))
    (backup-file name)
    (when (write-buffer name buffer)
      (when modes
        (set-file-modes name modes))
       t)))
@end lisp
@end defvr

The following commands call the @code{write-file} function to write out
a buffer, they also update the various variables containing information
about the state of the buffer. It is normally unnecessary to call
@code{write-file} yourself; these commands should suffice.

@deffn Command save-file &optional buffer
This command writes the buffer to the file that it was loaded from and
then updates all the necessary buffer-local variables.

If the file on disk has been modified since it was read into the
buffer the user is asked if they really want to save it (and risk losing
a version of the file).

If no modifications have been made to the file since it was last saved
it won't be saved again.

Any auto-saved version of the file is deleted.
@end deffn

@deffn Command save-file-as new-name &optional @var{buffer}
This command saves the buffer @var{buffer} (or the current buffer) to
the file called @var{new-name}. The @code{buffer-file-name} is set
to @var{new-name} and all the necessary buffer-local variables are
updated.

If an auto-saved version of @var{file-name} exists it is deleted.

When called interactively @var{new-name} will be prompted for.
@end deffn

@deffn Command save-some-buffers
For each buffer which contains unsaved modifications the user is asked
whether or not to save the buffer.

@code{t} is returned if no unsaved modifications exist in any buffers
(i.e. the user replied @samp{yes} to all files which could be saved).
@end deffn

@deffn Command save-and-quit
Calls @code{save-some-buffers} then quits Jade (after asking the user if any
unsaved buffers may be discarded).
@end deffn

@node Buffer Date Stamps, Buffer Modification Counts, Writing Buffers, Editing Files
@subsection Buffer Date Stamps
@cindex Buffer date stamps

When a file is read into a buffer its (the file's) time of last modification
is recorded, this can later be used to see if the file (on disk) has been
modified since it was loaded into a buffer.

@defvar buffer-file-modtime
This buffer-local variable contains the file-modtime of the file stored
in the buffer when it (the file) was last read from disk.
@end defvar

@xref{File Information}.

@node Buffer Modification Counts, Making Backups, Buffer Date Stamps, Editing Files
@subsection Buffer Modification Counts
@cindex Buffer modification counts

Two buffer-local variables are used to record the modification count
(@pxref{Buffer Attributes}) of a buffer when it is saved.

@defvar last-save-changes
A buffer-local variable containing the number of modifications made to
the buffer the last time it was saved (either auto-saved or by the user).
@end defvar

@defvar last-user-save-changes
This buffer-local variable holds the number of modifications made to the
buffer when it was last saved by the user.
@end defvar

@defvar last-save-time
A buffer-local variable holding the system time (from the @code{current-time}
function) from when the buffer was last saved (auto-saved or by the user).
@end defvar

@node Making Backups, Controlling Auto-Saves, Buffer Modification Counts, Editing Files
@subsection Making Backups
@cindex Making backups
@cindex Backup files, making

For details of the variables which control whether and how backup files
are made see @ref{Backup Files}.

@defun backup-file file-name
When necessary, make a backup of the file @var{file-name}. This should be
called when the file @var{file-name} is about to be overwritten.

Note that this function doesn't define whether or not the file @var{file-name}
will still exist when this function returns. Sometimes it will, sometimes
it won't@dots{}
@end defun

@node Controlling Auto-Saves, , Making Backups, Editing Files
@subsection Controlling Auto-Saves
@cindex Controlling auto-saves
@cindex Auto-saves, controlling

For the documentation of the variables controlling the making of auto-save
files see @ref{Auto-Saving Files}.

@defun make-auto-save-name file-name
Returns a string naming the file which should hold the auto-saved version
of the file @var{file-name}.

@lisp
(make-auto-save-name "/tmp/foo")
    @result{} "/tmp/#foo#"
@end lisp
@end defun

@defun auto-save-function buffer
This function is called automatically whenever a buffer (@var{buffer}) needs
to be auto-saved.

It firstly tries to use the @code{auto-save-hook} hook to auto-save the
file, if this fails (i.e. the hook returns @code{nil}) it is done
manually (using the @code{write-buffer} function).
@end defun

@defvr Hook auto-save-hook
Called by @code{auto-save-function} (with the buffer as an argument)
when a buffer is to be auto-saved.
@end defvr

@deffn Command delete-auto-save-file &optional buffer
This command deletes the auto-saved version of the buffer, if one exists.
@end deffn

@defun auto-save-file-newer-p file-name
This function returns @code{t} when there is an auto-saved version of
the file called @var{file-name} which is newer than @var{file-name}.
@end defun

@deffn Command recover-file &optional buffer
If an auto-saved version of the buffer exists it is read into the buffer,
overwriting its current contents. If any changes to the buffer will
be lost the user is asked for confirmation.
@end deffn

@node Text, Writing Modes, Editing Files, Programming Jade
@section Text
@cindex Text
@cindex Buffers, text

This chapter describes all the functions used for editing and referencing
the text stored in a buffer.

Note that where a command has a @var{count} argument specifying the
number of items to process; this argument will normally use the numeric
value of the prefix argument when the function is called interactively.

@menu
* Buffer Contents::             Accessing the contents of a buffer
* Insertion Functions::         Inserting strings into a buffer
* Deletion Functions::          Deleting regions of text
* Kill Functions::              Recording regions of text
* Transpose Functions::         Swapping two regions of text
* Indentation Functions::       Functions for managing indentation
* Translation Functions::       Applying a mapping to characters in a buffer
* Search and Match Functions::  Regexps and general string matching
* Rectangular Editing::         Manipulating rectangular regions
* Controlling Undo::            How undo works
* Misc Text Functions::         Other stuff
@end menu

@node Buffer Contents, Insertion Functions, , Text
@subsection Buffer Contents
@cindex Buffer contents
@cindex Text, buffer contents

@defun get-char &optional pos buffer
Returns the character at position @var{pos} (or the cursor position) in
the specified buffer.
@end defun

@defun set-char character &optional pos buffer
Sets the character at position @var{pos} (or the cursor) in the buffer
@var{buffer} (or the current buffer) to the character @var{character},
then returns @var{character}.
@end defun

@defun copy-area start-pos end-pos &optional buffer
This function creates and returns a string containing the contents of
the buffer @var{buffer} (or the current buffer) between the two
positions @var{start-pos} (inclusive) and @var{end-pos} (exclusive).
@end defun

@defun copy-block
If a block is marked in the current window returns a string containing
the text marked then unmark the block, otherwise returns @code{nil}.

If the marked block is rectangular the @code{copy-rect} function
(@pxref{Rectangular Editing} is used to get the string.
@end defun

@defun clear-buffer &optional buffer
Removes all text from the specified buffer. No precautions are taken
against losing any unsaved modifications that the buffer might contain!
@end defun

@node Insertion Functions, Deletion Functions, Buffer Contents, Text
@subsection Insertion Functions
@cindex Insertion functions
@cindex Text, insertion functions

Note that the @code{format} function can be used to provide
formatted insertion; simply give it a suitable output stream.
@xref{Streams}.

@deffn Command insert string &optional pos buffer
Inserts the string @var{string} into the specified buffer at the
cursor position (or @var{pos}, if defined).

Returns the position of the first character after the end of the inserted
text.

When called interactively the string to insert is prompted for.
@end deffn

@deffn Command insert-block &optional pos
If a block is marked in the current window, the text it contains is
inserted at the position @var{pos} (or the cursor) and the block
is unmarked.

If the marked block is rectangular the block is copied and inserted
as a rectangle.
@end deffn

@deffn Command yank &optional dont-yank-block
Inserts a string before the cursor. If a block is marked in the current buffer
and @var{dont-yank-block} is @code{nil} insert the text in the block. Else
yank the last killed text. @xref{Kill Functions}.

When called interactively the raw prefix arg is used as the value of
the @var{dont-yank-block} argument.
@end deffn

@deffn Command yank-to-mouse
Moves the cursor to the current position of the mouse pointer then calls the
@code{yank} function.
@end deffn

@deffn Command open-line count
Break the current line at the cursor, creating @var{count} new lines. The
cursor is left in its original position.
@end deffn

@deffn Command split-line
This function inserts a newline character (@samp{\n}) at the current
cursor position.
@end deffn

@node Deletion Functions, Kill Functions, Insertion Functions, Text
@subsection Deletion Functions
@cindex Deletion functions
@cindex Text, deletion functions

@defun delete-area start-pos end-pos &optional buffer
This function deletes all text starting from the position @var{start-pos}
up to, but not including, the position @var{end-pos}.

If @var{buffer} is defined it specifies the buffer to delete from, usually
the current buffer is used.
@end defun

@defun cut-area start-pos end-pos &optional buffer
This function is a combination of the @code{copy-area} and @code{delete-area}
functions; it copies the specified region then deletes it before returning
the copy it made.

@lisp
(cut-area @var{start} @var{end})
@equiv{}
(let
    ((text (copy-area @var{start} @var{end})))
  (delete-area @var{start} @var{end})
  text)
@end lisp
@end defun

@deffn Command delete-block
Deletes the block marked in the current window (if one exists). This function
knows about rectangular blocks.
@end deffn

@defun cut-block
Copies the block marked in the current window if one exists, then deletes
it before returning the copied string. If the block is rectangular it
is copied and cut as a rectangle.
@end defun

@deffn Command delete-char count
Deletes @var{count} characters, starting at the cursor position and
working forwards.
@end deffn

@deffn Command backspace-char count
Deletes the @var{count} characters preceding the cursor, if the cursor
is past the end of the line, simply move @var{count} characters to the
left.
@end deffn

@node Kill Functions, Transpose Functions, Deletion Functions, Text
@subsection Kill Functions
@cindex Kill functions
@cindex Text, kill functions

@dfn{Killing} a piece of text means to delete it then store a copy of it
in a special place. This string is later available to other functions,
such as @code{yank} which inserts it into a buffer.

@defun kill-string string
This function adds the string @var{string} to the kill buffer. If the
last command also killed something @var{string} is appended to the
current value of the kill buffer.

The @code{this-command} variable is set to the value @code{kill} to
flag that the current command did some killing.

Returns @var{string}.
@end defun

@defun killed-string &optional depth
Returns the string in the kill buffer number @var{depth}, currently
only the last kill is stored so @var{depth} must either be zero or
undefined.
@end defun

@deffn Command kill-area start-pos end-pos
This command kills a region of text in the current buffer, from @var{start-pos}
up to, but not including, @var{end-pos}.

When called interactively the currently marked block (if one exists) is
used to provide the two arguments, then the block is unmarked.
@end deffn

@deffn Command copy-area-as-kill start-pos end-pos
Similar to @code{kill-area} except that the region killed is not
actually deleted from the buffer.
@end deffn

@deffn Command kill-block
Kills the block marked in the current window.
@end deffn

@deffn Command copy-block-as-kill
Kills the block marked in this window but doesn't actually delete it from
the buffer.
@end deffn

@deffn Command kill-line &optional arg
This command kills lines from the cursor position. @var{arg} is a
raw prefix argument (@pxref{Prefix Arguments}). What gets killed depends
on @var{arg},

@itemize @bullet
@item
When @var{arg} is @code{nil} it kills from the cursor position to the end
of the line, if the cursor is already at the end of the line it kills the
newline character.

@item 
If the numeric value of @var{arg} is greater than zero it kills from the
cursor for that many whole lines.

@item
If the numeric value is less than or equal to zero it kills that number
of whole lines @emph{backwards} from the cursor.
@end itemize
@end deffn

@deffn Command kill-whole-line count
Kills @emph{all} of the @var{count} (an integer) next following lines.
@end deffn

@deffn Command kill-word count
Kills @var{count} words, starting at the cursor position.

When called interactively @var{count} is the numeric prefix arg.
@end deffn

@deffn Command backwards-kill-word count
Kills the @var{count} previous words, starting from the cursor.

When called interactively @var{count} is the numeric prefix arg.
@end deffn

@deffn Command kill-exp &optional count
Kill @var{count} expressions from the cursor position.
@xref{Mode-Specific Expressions}.
@end deffn

@deffn Command backward-kill-exp &optional count
Kills @var{count} expressions, working backwards from the cursor.
@xref{Mode-Specific Expressions}.
@end deffn

@node Transpose Functions, Indentation Functions, Kill Functions, Text
@subsection Transpose Functions
@cindex Transpose functions
@cindex Text, transpose functions

@dfn{Transposing} two regions of text in a buffer means to swap their
positions.

@defun transpose-items forward-item-fun backward-item-fun count
This function transposes the areas defined by the functions
@var{forward-item-fun} and @var{backward-item-fun} (these functions
must work in the style of @code{forward-word} and @code{backward-word}
respectively).

What actually happens is that the item before the cursor is dragged
forward over the next @var{count} items.
@end defun

@deffn Command transpose-words count
Uses @code{transpose-items} with each item being a word.

When called interactively, @var{count} is the value of the numeric
prefix argument.
@end deffn

@deffn Command transpose-chars count
Transposes characters.
@end deffn

@deffn Command transpose-exps count
If the major mode in the current buffer has installed functions which
define expressions then this command transposes expressions.
@xref{Mode-Specific Expressions}.
@end deffn

@node Indentation Functions, Translation Functions, Transpose Functions, Text
@subsection Indentation Functions
@cindex Indentation functions
@cindex Text, indentation functions

@defun indent-pos &optional pos buffer
This function returns the @emph{glyph} position (@pxref{Glyph Positions})
of the first character in the line pointed to by @var{pos} (or the cursor)
which is not a TAB or SPC character.
@end defun

@defun set-indent-pos indent-pos &optional buffer only-spaces
Sets the indentation of the line pointed to by @var{pos} to the column
pointed to by @var{pos} by putting the optimal sequence of TAB and SPC
characters at the start of the line.

If the @var{only-spaces} argument is non-@code{nil} no TAB characters
will be used.
@end defun

@deffn Command indent-to column &optional only-spaces
This function inserts enough TAB and SPC characters to move the cursor to
glyph column @var{column}.

If the @var{only-spaces} argument is non-@code{nil} no TAB characters are used.

Note that @var{column} counts from zero.

When called interactively the @var{column} argument is either the
numeric value of the prefix argument or, if no prefix argument has been
entered, the result of prompting for a number.
@end deffn

@deffn Command tab-with-spaces
This command inserts enough spaces at the cursor position to move the
cursor to the next tab stop.
@end deffn

Some major modes provide their own method of indentation (for example
Lisp mode will indent Lisp programs in the proper style), see
@ref{Mode-Specific Indentation}.

@deffn Command indent-line
If the current buffer has a method for indentation installed, use it
to indent the current line to its correct depth.
@end deffn

@deffn Command newline-and-indent
Insert a newline character, then indent the new line; if no function for
indenting lines has been installed in this buffer a single TAB character
is inserted.
@end deffn

@deffn Command indent-area start-pos end-pos
Uses the buffer's indentation method to indent all lines in the specified
region to their correct depth.

When called interactively the currently-marked block is used to get the
values of the two arguments, the block is then unmarked.
@end deffn

@node Translation Functions, Search and Match Functions, Indentation Functions, Text
@subsection Translation Functions
@cindex Translation functions
@cindex Text, translation functions

@defun translate-area start-pos end-pos translation-table &optional buffer
This function applies the mapping @var{translation-table} to each character
in the region starting at the position @var{start-pos} up to, but not
including, @var{end-pos}.

@var{translation-table} is a string, each character represents the mapping
for an ASCII character of that character's position in the string. If the
string is less than 256 characters in length any undefined characters
will remain unchanged (i.e. a @var{translation-table} of @samp{} would
leave the region unaltered).
@end defun

@defun translate-string string translation-table
This function uses a similar method to that used in the @code{translate-area}
function. Instead of applying the mapping to a region of a buffer it
applies it to the string @var{string}. @var{string} is returned (after
being modified).

Note that the @var{string} really is modified, no copy is made!

@lisp
(translate-string "abc" upcase-table)
    @result{} "ABC"
@end lisp
@end defun

@defvar upcase-table
This is a 256-character long string which may be used as a translation table
to convert from lower-case to upper-case with the functions
@code{translate-string} and @code{translate-area}.
@end defvar

@defvar downcase-table
Similar to @code{upcase-table} except that it is used to convert from
upper-case to lower-case.
@end defvar

The following functions use the translation functions and the two
translation tables described above.

@deffn Command upcase-area start-pos end-pos &optional buffer
Makes all alphabetic characters in the specified region of text upper-case.

When called interactively uses the block marks for its arguments; note
that this won't work properly with rectangular blocks.
@end deffn

@deffn Command downcase-area start-pos end-pos &optional buffer
Similar to @code{upcase-area} but makes all alphabetic characters lower-case.
@end deffn

@deffn Command upcase-word count
For the next @var{count} words starting at the cursor position, make their
alphabetic characters upper-case.
@end deffn

@deffn Command downcase-word count
Does the opposite of @code{upcase-word}, makes words lower-case!
@end deffn

@deffn Command capitalize-word
The first character of this word (normally the one under the cursor) is
made upper-case, the rest lower.
@end deffn

@node Search and Match Functions, Rectangular Editing, Translation Functions, Text
@subsection Searching and Matching Functions
@cindex Searching and matching functions
@cindex Text, searching and matching functions

The most powerful of the searching and matching functions are those using
regular expressions, for details of the regexp syntax used by Jade see
@ref{Regular Expressions}.

Note that the regexp matcher @emph{does not work across lines}, at the
moment no regexp may span more than one line. Also the regexp routines
choke on NUL bytes; hopefully I'll correct these problems soon@dots{}

@menu
* Searching Buffers::           Scanning buffers for something
* String Matching::             Matching regexps to text
* Replacing Strings::           Replacing a found string or regexp with
                                  something else
* Regexp Functions::            General regexp utility functions
@end menu

@node Searching Buffers, String Matching, , Search and Match Functions
@subsubsection Searching Buffers
@cindex Searching buffers
@cindex Search and match functions, searching buffers
@cindex Text, searching buffers

@defun find-next-regexp regexp &optional pos buffer ignore-case
This function returns the position of the next substring in the buffer
matching the regular expression string @var{regexp}. It starts searching
at @var{pos}, or the cursor position if @var{pos} is undefined.

If no match of the regexp occurs before the end of the buffer @code{nil}
is returned.

If the @var{ignore-case} argument is non-@code{nil} then the case of
matched strings is ignored (note that character ranges are still
case-significant).
@end defun

@defun find-prev-regexp regexp &optional pos buffer ignore-case
Similar to @code{find-next-regexp} except this searches in the opposite
direction, from @var{pos} (or the cursor) to the @emph{start} of the
buffer.
@end defun

@defun find-next-string string &optional pos buffer
Scans forwards from @var{pos} (or the cursor), in @var{buffer} (or the current
buffer), looking for a match with the string @var{string}. Returns the
position of the next match or @code{nil}.

Note that matches can't span more than one line.
@end defun

@defun find-prev-string string &optional pos buffer
A backwards-searching version of @code{find-next-string}.
@end defun

@defun find-next-char character &optional pos buffer
Search forwards for an occurrence of the character @var{character} and
returns its position, or @code{nil} if no occurrence exists.
@end defun

@defun find-prev-char character &optional pos buffer
This function searches backwards for an occurrence of the character
@var{character}.
@end defun

@node String Matching, Replacing Strings, Searching Buffers, Search and Match Functions
@subsubsection String Matching
@cindex String matching
@cindex Search and match functions, string matching
@cindex Text, string matching

@defun looking-at regexp &optional pos buffer ignore-case
Returns @code{t} if the regular expression @var{regexp} matches the text
at position @var{pos} in the buffer @var{buffer} (or the current buffer).

Only the text from @var{pos} to the end of the line is matched against.
@end defun

@defun regexp-match regexp string &optional ignore-case
This function returns @code{t} if the regular expression @var{regexp}
matches the string @var{string}.

Note that the match is unanchored so if you want test for a match of the
whole of @var{string} use the @samp{^} and @samp{$} regexp meta-characters.
For example,

@lisp
(regexp-match "(a|b)+" "fooabababar")
    @result{} t

(regexp-match "^(a|b)+$" "fooabababar")
    @result{} nil

(regexp-match "^(a|b)+$" "ababbabba")
    @result{} t
@end lisp

When the @var{ignore-case} argument is non-@code{nil} the case of strings
being matched is insignificant (except in character ranges).
@end defun

@defun regexp-expand regexp string template &optional ignore-case
This function matches the regular expression @var{regexp} against the
string @var{string}, if the match is successful a string is created
by expanding the template string @var{template}.

For details of what meta-characters are allowed in @var{template} see
@ref{Regular Expressions}.

@lisp
(regexp-expand "^([a-z]+):([0-9]+)$"
               "foobar:42"
               "The \\1 is \\2.")
    @result{} "The foobar is 42."
@end lisp
@end defun

@defun regexp-match-line regexp &optional line-pos buffer ignore-case
This function is similar to @code{regexp-match}, instead of explicitly
supplying the string to match against it is one whole line of the specified
buffer, the line pointed to by @var{line-pos} (or the line that the cursor
is on).

@code{t} is returned if the match is successful.
@end defun

@defun regexp-expand-line regexp template &optional line-pos buffer ignore-case
As @code{regexp-match-line} is similar to @code{regexp-match}, this function
is similar to @code{regexp-expand}.

The whole of the line at the position @var{line-pos} (or the cursor) is
matched with the regular expression @var{regexp}. If the match is
successful the @var{template} is used to expand a string which is
returned.
@end defun

@node Replacing Strings, Regexp Functions, String Matching, Search and Match Functions
@subsubsection Replacing Strings
@cindex Replacing strings
@cindex Search and match functions, replacing strings
@cindex Text, replacing strings

@defun replace-regexp regexp template &optional pos buffer ignore-case
If a substring of the buffer at @var{pos} (or the cursor) matches
the regular expression @var{regexp} the text that matched is replaced
with the result of expanding the template string @var{template}.

For details about templates see @ref{Regular Expressions}.

@code{nil} is returned if the match failed, and therefore no replacement
occurred.
@end defun

@defun replace-string old-string new-string &optional pos buffer
If a substring of the buffer at @var{pos} (or the cursor) matches
the string @var{old-string} it is replaced by the string @var{new-string}.

If the match fails @code{nil} is returned, otherwise some non-@code{nil}
value.
@end defun

@node Regexp Functions, , Replacing Strings, Search and Match Functions
@subsubsection Regexp Functions
@cindex Regexp functions
@cindex Search and match functions, regexp functions
@cindex Text, regexp functions

It is often useful to construct regular expressions by concatenating
several strings together; the problem with doing this is you may not
know if a string contains any characters which the regexp compiler
reacts specially to (i.e. @samp{*}, @samp{|}, @dots{}). Obviously
these characters should be protected by a backslash, the following
function will do this for you.

@defun regexp-quote string
This function returns a new version of the string @var{string}, any
characters in @var{string} which are regexp meta-characters are
quoted with a backslash.

If the string contains no meta-characters the original string is returned,
without being copied.

@lisp
(regexp-quote "foo*bar+baz")
    @result{} "foo\\*bar\\+baz"
@end lisp

@noindent
Note that in the above example the backslashes in the returned string
are only single backslashes; the print functions print a single backslash
character as @samp{\\} so they can be read back in.

This function is usually used when a part of a regexp being constructed
is unknown at compile time, often provided by the user.
@end defun

As the section describing regexp syntax notes, the strings that parenthesised
expressions match are recorded, the following two functions allow Lisp
programs to access the positions of these strings.

@defun match-start &optional expression-index
This function returns the position which the parenthesised expression
number @var{expression-index} started at in the last successful regexp
match.

If @var{expression-index} is @code{nil} or zero the start of the whole string
matched is returned instead.

The returned value will either be a position object if the last match was
in a buffer, or an integer if the last match was in a string (i.e.
@code{regexp-match}).

@lisp
(regexp-match "foo(bar)" "xyzfoobarsaalsd")
    @result{} t
(match-start)
    @result{} 3
(match-start 1)
    @result{} 6
@end lisp
@end defun

@defun match-end &optional expression-index
Return the position which the parenthesised expression number
@var{expression-index} ended at in the last successful regexp match.

If @var{expression-index} is @code{nil} or zero the end of the whole match
is returned instead.

The returned value will either be a position object if the last match was
in a buffer, or an integer if the last match was in a string (i.e.
@code{regexp-match}).

@lisp
(regexp-match "foo(bar)" "xyzfoobarsaalsd")
    @result{} t
(match-end)
    @result{} 9
(match-end 1)
    @result{} 9
@end lisp
@end defun

@node Rectangular Editing, Controlling Undo, Search and Match Functions, Text
@subsection Rectangular Editing
@cindex Rectangular editing
@cindex Text, rectangular editing

These functions are used to manipulate rectangular regions of buffers. Two
position objects are used to define a rectangle, these represent opposite
corners of the rectangle. Note that the corner on the right hand side of
the rectangle specifies the column @emph{after} the last column included
in the rectangle.

@defun delete-rect start-pos end-pos &optional buffer
This function deletes a rectangle, defined by @var{start-pos} and
@var{end-pos}, from the specified buffer.
@end defun

@defun copy-rect start-pos end-pos &optional buffer
Returns a string containing the rectangle of text defined by the
two positions @var{start-pos} and @var{end-pos}. Any TAB characters
are expanded to SPC characters, newline characters mark the end
of each line in the rectangle.
@end defun

@defun cut-rect start-pos end-pos &optional buffer
A combination of the @code{copy-rect} and @code{delete-rect} functions;
it makes a copy of the rectangle's contents which is returned after the
rectangle is deleted from the buffer.
@end defun

@deffn Command insert-rect string &optional pos buffer
Inserts the string @var{string} into the buffer at the specified
position, treating @var{string} as a rectangle of text. This means
that each successive line of @var{string} (separated by newline characters)
is inserted at the @emph{same} column in successive lines.

If the end of the buffer is reached and there is still some of the string
left to insert extra lines are created at the end of the buffer.
@end deffn

@deffn Command yank-rectangle &optional dont-yank-block
This function is similar to the @code{yank} function
(@pxref{Insertion Functions}), except that it uses the @code{insert-rect}
function to insert the piece of text.
@end deffn

@node Controlling Undo, Misc Text Functions, Rectangular Editing, Text
@subsection Controlling Undo
@cindex Controlling undo
@cindex Text, controlling undo
@cindex Undo, controlling

For the description of one part of controlling the undo feature, the
maximum size of the undo-list, see @ref{Undo}.

@defvar buffer-record-undo
A buffer-local variable which, when set to @code{nil}, stops any
undo-information being recorded for the buffer.

When a buffer is created, this variable is always set to @code{t}.
@end defvar

@defvar buffer-undo-list
This buffer-local variable stores the actual list of undo-information;
each element defines one modification to the buffer.

Don't try to be clever and access the contents of this list; the structure
may well change in future revisions of Jade.

The only thing you're allowed to do is set it to @code{nil}, this clears
all undo-information for the buffer.
@end defvar

@deffn Command undo
Undo every change to the contents of the buffer back to the previous
command. Successive calls to this command work backwards through the
buffer's undo-list.
@end deffn

@node Misc Text Functions, , Controlling Undo, Text
@subsection Miscellaneous Text Functions
@cindex Misc text functions
@cindex Text, misc functions

@defun empty-line-p &optional pos buffer
This function returns @code{t} if the line pointed to by @var{pos} (or
by the cursor) consists totally of TAB or SPC characters.
@end defun

@node Writing Modes, Prompting, Text, Programming Jade
@section Writing Modes
@cindex Writing modes

Modes are used to customise individual buffers so that the text it
contains can be edited in a special way. Each buffer has a single
@dfn{Major mode}, tailoring the buffer to the type of file contained
in it (i.e. C source code uses @code{c-mode}). @xref{Editing Modes}.

@dfn{Minor modes} provide individual features which may be enabled and
disabled individually, each buffer may have any number of minor modes
enabled at once. @xref{Minor Modes}.

@menu
* Writing Major Modes::         How to define a new major mode
* Installing Modes::            Functions and variables used to
                                  install major modes in buffers
* Writing Minor Modes::         Minor modes are totally different
                                  to major modes
* Mode-Specific Indentation::   Each major mode may define its own
                                  method of indentation,
* Mode-Specific Expressions::     expression handling,
* Mode-Specific Comments::        and comment insertion.
@end menu

@node Writing Major Modes, Installing Modes, , Writing Modes
@subsection Writing Major Modes
@cindex Writing major modes
@cindex Major modes, writing

Each major mode must define a command whose name ends in @samp{-mode}
(i.e. @code{c-mode}, @code{lisp-mode}, etc@dots{}). This command is
called when the major mode is to be installed in the current buffer. It's
first action @emph{must} be to check for an already installed mode and
remove it. The following code fragment does this,

@lisp
(when major-mode-kill
  (funcall major-mode-kill))
@end lisp

@emph{All} major modes must do this!

Now the major mode is free to install itself; generally this will entail
setting the buffer-local values of the @code{mode-name}, @code{major-mode},
@code{major-mode-kill} and @code{keymap-path} variables. For example
the @code{lisp-mode} sets these variables as follows,

@lisp
(setq mode-name "Lisp"
      major-mode 'lisp-mode
      major-mode-kill 'lisp-mode-kill
      keymap-path (cons 'lisp-mode-keymap keymap-path))
@end lisp

@noindent
Note how the major mode's own keymap (with all the mode's local key bindings
installed in it) is consed onto the front of the @code{keymap-path}; this
ensures that mode-local bindings take precedence over bindings in the
global keymaps.

After installing itself a major mode should call a hook (generally called
@code{@var{x}-mode-hook} where @var{x} is the name of the mode) to
allow customisation of the mode itself.

The @code{major-mode-kill} variable holds a function to be called when the
major mode is to be removed from the current buffer; basically it should
remove its keymap and set all the mode-local variables to @code{nil}.
For example the @code{lisp-mode-kill} function does the following to
negate the effects of the code fragment above,

@lisp
(setq keymap-path (delq 'lisp-mode-keymap keymap-path)
      major-mode nil
      major-mode-kill nil
      mode-name nil)
@end lisp

@defvar major-mode
This buffer-local variable contains the symbol whose function definition
was used to install the buffer's major mode (i.e. @code{c-mode}, etc@dots{}).

When it is @code{nil} the buffer uses the `generic' mode; this is simply
the bog standard editor.
@end defvar

@defvar major-mode-kill
This buffer-local variable contains the function which should be called
to remove the buffer's currently installed major-mode.

Note that the @code{kill-buffer} function calls this (if it's non-@code{nil})
just before destroying a buffer; so if necessary, an error signalled
within this function will prevent a buffer being killed.
@end defvar

@defvar mode-name
A buffer-local variable containing the `pretty' name of the buffer's
major mode, a string which will be printed in the status line.
@end defvar

Many modes bind commands to keys with the prefix @kbd{Ctrl-c}, to save
each mode creating a new root keymap the buffer-local variable
@code{ctrl-c-keymap} exists.

@defvar ctrl-c-keymap
This buffer-local variable can be used by major modes to hang their
keymap for the @kbd{Ctrl-c} prefix from. Simply set this variable to
the keymap your mode wants to be installed after a @kbd{Ctrl-c} prefix.
@end defvar

The definitions for many different types of modes can be found in Jade's
lisp directory.

@node Installing Modes, Writing Minor Modes, Writing Major Modes, Writing Modes
@subsection Installing Modes
@cindex Installing modes
@cindex Modes, installing

Before a major mode can be used to edit a buffer with it must be installed
in that buffer. The most straightforward method of doing this is simply
to invoke the mode's command which does this (i.e. @code{c-mode}).

It could be a bit annoying to have to this every time a new buffer is
created so the @code{mode-alist} variable allows major modes to be
installed automatically, when the buffer is opened.

@defun init-mode buffer &optional string
This function attempts to install a major mode into @var{buffer}. If the
@code{major-mode} variable is non-@code{nil} it defines the function to
call to install the mode; this function will be called.

Otherwise the @code{mode-alist} variable is searched; each regular
expression is matched against a string, when a match occurs the associated
function is called to install the mode.

The string matched against is defined by the first of the following
choices which is not @code{nil} or undefined.

@enumerate
@item
The value of the optional @var{string} argument.

@item
The word specified on the first line of the buffer bracketed by the
string @samp{-*-}. For example if the first line contained the string
@samp{-*-Text-*-} the string @samp{Text} would be used.

@item
The value of the variable mode-name.

@item
The name of the file being edited in the buffer.
@end enumerate

Note that each match is case-insensitive.
@end defun

@defvar mode-alist
An association list (@pxref{Association Lists}) defining regular expressions
which associate with a particular major mode.

When the @code{init-mode} function matches a regular expression to the
string it is using to find the mode for the buffer the associated mode
is installed.

For example, @code{mode-alist} could be,

@lisp
(("\\.(c|h)$|^c(|-mode)$" . c-mode)
 ("\\.jl$|^lisp(|-mode)$" . lisp-mode)
 ("\\.(text|doc|txt|article|letter)$" . text-mode)
 ("^(text(|-mode)|(.*/|)draft)$" . text-mode)
 ("^indented-text(|-mode)$" . indented-text-mode)
 ("\\.[s]$|^asm(|-mode)$" . asm-mode)
 ("\\.[S]$|^asm-cpp(|-mode)$" . asm-cpp-mode)
 ("\\.texi(|nfo)|^texinfo(|-mode)$" . texinfo-mode))
@end lisp
@end defvar

@defun kill-mode &optional buffer
This function removes the major mode currently installed in the
specified buffer.
@end defun

@node Writing Minor Modes, Mode-Specific Indentation, Installing Modes, Writing Modes
@subsection Writing Minor Modes
@cindex Writing minor modes
@cindex Minor modes, writing

Minor modes are generally harder to write properly than major modes
since they have to peacefully coexist with all the other minor modes
which may also be enabled in a buffer.

Generally each minor mode maintains a buffer-local variable saying
whether or not it's installed in the buffer. The minor mode's
function usually toggles the mode on or off depending on the state of
this variable.

There are two functions which @emph{must} be used to install and remove a
minor mode --- @code{add-minor-mode} and @code{remove-minor-mode}, see their
documentation for details.

Each buffer has a keymap containing the bindings of all the minor modes
enabled in the buffer (the variable @code{minor-mode-keymap}). These bindings
have to be added when the mode is enabled and removed when it
is disabled.

@defvar minor-mode-list
This buffer-local variable is a list of all the minor modes enabled in
a buffer.
@end defvar

@defvar minor-mode-names
This buffer-local variable contains a list of strings, each string
names one of the minor modes currently enabled in the buffer.
@end defvar

@defvar minor-mode-keymap
A buffer-local keymap to be used by minor-modes. This is only created
the first time a minor mode calls @code{add-minor-mode} in the buffer.
@end defvar

@defun add-minor-mode mode name &optional no-keymap
This function installs a minor mode (the symbol @var{mode}) into
the current buffer. All minor modes should call this before doing
anything drastic.

@var{name} is the string to be displayed in the status line as the
name of this minor mode.

When @var{no-keymap} is @code{nil} or undefined this function ensures
that the @code{minor-mode-keymap} variable has a valid value in this buffer.
@end defun

@defun remove-minor-mode mode name
Removes a minor mode from the current buffer, the @var{mode} and
@var{name} arguments must have the same value as the arguments given
to @code{add-minor-mode} when the mode was enabled.
@end defun

The following code fragment is an example minor mode taken from Jade's
source code.

@lisp
(provide 'fill-mode)

(defvar fill-column 72
  "Position at which the text filling commands break lines.")

(defvar fill-mode-p nil)
(make-variable-buffer-local 'fill-mode-p)

;;;###autoload
(defun fill-mode ()
  "Minor mode for automatically filling lines, i.e. word-wrapping.
This makes the SPC key checks if the cursor is past the fill-column. If
so, the next line is started."
  (interactive)
  (if fill-mode-p
      (progn
        (setq fill-mode-p nil)
        (remove-minor-mode 'fill-mode "Fill")
        (unbind-keys minor-mode-keymap "SPC"))
    (add-minor-mode 'fill-mode "Fill")
    (setq fill-mode-p t)
    (bind-keys minor-mode-keymap
      "SPC" 'fill-mode-spc)))

(defun fill-mode-spc ()
  (interactive)
  (when (> (pos-col (cursor-pos)) fill-column)
    (let
        ((pos (cursor-pos)))
      (set-pos-col pos (1+ fill-column))
      (setq pos (unless (word-start pos) (forward-word -1 pos)))
      (insert "\n" pos)
      (let
          ((end (left-char 1 (copy-pos pos))))
        (when (equal (get-char end) ?\ )
          (delete-area end pos)))))
  (insert " "))
@end lisp

@node Mode-Specific Indentation, Mode-Specific Expressions, Writing Minor Modes, Writing Modes
@subsection Mode-Specific Indentation
@cindex Mode-specific indentation
@cindex Writing modes, indentation
@cindex Indentation, mode-specific

Some major modes provide functions which manage the indentation of
the buffer they are installed in. These modes are usually those which
are designed for a particular programming language; for example C mode
understands how to indent C source and Lisp mode knows about Lisp code.

To simplify matters there is a unified interface to the indentation
process; each major mode simply sets the value of a buffer-local variable
to the function used to indent a line in that buffer. This variable
is then referenced by the functions which provide indentation.

@defvar mode-indent-line
This buffer-local variable should contain a function when the buffer's
major mode provides special indentation.

The function should take one optional argument, the position of the line
to indent. If the value of this argument is @code{nil} the current line
should be indented. The function should set the indentation of the
line to the correct depth then return the glyph position
(@pxref{Glyph Positions}) of the first non-whitespace character.

For example Lisp mode sets this variable to @code{lisp-indent-line}, this
function is defined as,

@lisp
(defun lisp-indent-line (&optional pos)
  (set-indent-pos (lisp-indent-pos (or pos (cursor-pos)))))
@end lisp

@noindent
Where the function @code{lisp-indent-pos} calculates the proper indentation
for the line pointed to by its argument.
@end defvar

For the functions dealing with indentation see @ref{Indentation Functions}.

@node Mode-Specific Expressions, Mode-Specific Comments, Mode-Specific Indentation, Writing Modes
@subsection Mode-Specific Expressions
@cindex Mode-specific expressions
@cindex Writing modes, expressions
@cindex Expressions, modes-specific

Most programming use the concept of an @dfn{expression}, Jade allows
major modes to define two functions which define the syntax of
an expression in a particular programming language. Commands exist
which use these functions to allow the manipulation of expressions
as entities in a buffer, much like words.

@defvar mode-forward-exp
This buffer-local variable contains a function which calculates the
position of the end of an expression in that language.

The lambda-list of the function (i.e. its arguments) must be
@code{(&optional @var{count} @var{pos})}. @var{count} is the number
of expressions to move forwards over (default is one), @var{pos} is
the position to start from (default is the cursor position).

The function should return the position of the character following
the end of @var{count} expressions starting from @var{pos}.
@end defvar

@defvar mode-backward-exp
Similar to @code{mode-forward-exp} but works backwards from the character
after the expression (at @var{pos}) to the start of the previous @var{count}
expressions.
@end defvar

These functions can often be quite complex but their structure is
usually the same; these two examples are taken from the Lisp mode,

@lisp
(defun lisp-forward-sexp (&optional number pos)
  "Return the position of the NUMBER'th next s-expression from POS."
  (unless number
    (setq number 1))
  (while (> number 0)
    ;; Move @code{pos} over one expression
    @dots{}
    (setq number (1- number)))
  pos)

(defun lisp-backward-sexp (&optional number orig-pos)
  "Return the position of the NUMBER'th previous s-expression
from ORIG-POS."
  (unless number
    (setq number 1))
  (unless orig-pos 
    (setq orig-pos (cursor-pos)))
  (let
      ((pos (copy-pos orig-pos)))
    (while (> number 0)
       ;; Move @code{pos} backwards over one expression
       @dots{}
      (setq number (1- number)))
    pos))
@end lisp

@node Mode-Specific Comments, , Mode-Specific Expressions, Writing Modes
@subsection Mode-Specific Comments
@cindex Mode-specific comments
@cindex Writing modes, comments
@cindex Comments, mode-specific

When you wish to enter a comment in a piece of source code Jade has
a command to do this (@code{insert-comment}); each major mode which wishes
to allow comments (created by this command) must give the following
variable a suitable function.

@defvar mode-comment-fun
This buffer-local variable contains the function to call when a comment
is to be entered, basically the @code{insert-comment} command just calls
this function.
@end defvar

@defun find-comment-pos
This function moves the cursor to a suitable position for inserting
a comment in the current line.
@end defun

@defvar comment-column
Buffer-local variable containing the canonical column number which
comments should begin at (used by the @code{find-comment-pos} function).
If the line extends past this column the next tab stop after the end of
the line is used instead.
@end defvar

The following function is an example of what is needed in the
@code{mode-comment-fun} variable; it is used by the C mode.

@lisp
(defun c-insert-comment ()
  (interactive)
  (find-comment-pos)
  (insert "/*  */")
  (goto-left-char 3))
@end lisp

@node Prompting, Files, Writing Modes, Programming Jade
@section Prompting
@cindex Prompting
@cindex Interactive prompts

The most common way to ask the user for a response is to encode the
question in the command's interactive declaration
(@pxref{Interactive Declarations}), sometimes this is inconvenient;
functions are available which have the same effect as the code letters
in an interactive declaration.

The following two functions don't have an equivalent code for the
interactive declaration.

@defun y-or-n-p question
This function prompts the user for a single key response to the string
@var{question} asking a question which can be answered yes or no.

Returns @code{t} when @var{question} is answered with a @kbd{y} and
@code{nil} when @kbd{n} is typed.
@end defun

@defun yes-or-no-p question
Similar to @code{y-or-n-p} but the answer must be either the word @samp{yes}
or the word @code{no} entered in full. This function should be used when
a mistyped answer could be catastrophic (i.e. losing changes to a buffer).

Returns @code{t} for @samp{yes}, @code{nil} for anything else.
@end defun

The following functions are the functions used by the @code{call-command}
function to resolve interactive arguments.

Note that these function don't return the string entered (except for
@code{prompt-for-string}) --- they return some Lisp object which the
string entered represents somehow.

@defun prompt-for-file &optional prompt existing start
Prompts for the name of a file. @var{prompt} is the string to display
at the head of the prompt, when @var{existing} is non-@code{nil} only
files which actually exist are allowed to be entered. The @var{start}
argument may be a string defining the starting contents of the prompt.
@end defun

@defun prompt-for-directory &optional prompt existing start
Prompts for the name of a directory, all arguments are similar to
in the @code{prompt-for-file} function.
@end defun

@defun prompt-for-buffer &optional prompt existing default
This function prompts for a buffer object, if @var{existing} is non-@code{nil}
the buffer selected must exist, otherwise the buffer will be created if
it doesn't already exist. @var{default} is the value to return if the
user enters the null string, if @code{nil} the current buffer is returned.

Note that this returns the @emph{actual buffer}, not its name as a string.
@end defun

@defun prompt-for-symbol &optional prompt predicate
Prompt for a symbol, @var{prompt} is displayed at the head of the prompt
buffer. If the @var{predicate} argument is defined it is a predicate
function; only symbols which when applied to the function @var{predicate}
return non-@code{nil} will be allowed to be entered.
@end defun

@defun prompt-for-lisp &optional prompt
Prompt for and return a Lisp object.
@end defun

@defun prompt-for-function &optional prompt
Prompts for a function.

@lisp
(prompt-for-function @var{prompt})
@equiv{}
(prompt-for-symbol @var{prompt} 'functionp)
@end lisp
@end defun

@defun prompt-for-variable &optional prompt
Prompts for a variable (a symbol whose value is not void).

@lisp
(prompt-for-variable @var{prompt})
@equiv{}
(prompt-for-symbol @var{prompt} 'boundp)
@end lisp
@end defun

@defun prompt-for-command &optional prompt
Prompts for a command (a function which may be called interactively).

@lisp
(prompt-for-command @var{prompt})
@equiv{}
(prompt-for-symbol @var{prompt} 'commandp)
@end lisp
@end defun

@defun prompt-for-string &optional prompt
Prompt for a string, whatever string is entered is returned as-is.
@end defun

@defun prompt-for-number &optional prompt
Prompts for a number which is then returned.
@end defun

The following function is useful when a number of options have to be
chosen between, for example the menu command in Info-mode uses this
function.

@defun prompt-from-list option-list prompt &optional start
Returns a selected choice from the list of options (strings)
@var{option-list}. @var{prompt} is the title displayed, @var{start} the
optional starting choice.
@end defun

@node Files, Processes, Prompting, Programming Jade
@section Files
@cindex Files

Jade allows you to manipulate files in the operating system's filing
system; a special type of Lisp object, a @dfn{file object}, is used
to represent files which have been opened for reading or writing (through
the streams mechanism, @pxref{Streams}).

Names of files are represented by strings, the syntax of file names is
defined by the underlying operating system: Jade simply treats it as a
string.

@menu
* File Names::                  Files are named by a string
* File Objects::                Lisp objects representing files
* File Information::            Predicates on files
* Manipulating Files::          Deleting, renaming and copying files
* Reading Directories::         Getting a list of the files in a directory
* Reading and Writing Files::   Accessing the contents of a file in one go
@end menu

@node File Names, File Objects, , Files
@subsection File Names
@cindex File names
@cindex Names of files

A @dfn{file name} is a string identifying an individual file (or directory)
in the filing system (i.e. the disk). The exact syntax of file names depends
on the operating system.

@defun file-name-directory file-name
This function returns the directory part of the file name string @var{file-name}.
This is the substring of @var{file-name} defining the directory containing
the file.

@lisp
(file-name-directory "/tmp/foo")
    @result{} "/tmp/"

(file-name-directory "foo")
    @result{} ""

(file-name-directory "foo/bar/")
    @result{} "/foo/bar/"
@end lisp
@end defun

@defun file-name-nondirectory file-name
Returns the substring of the file name @var{file-name} which is @emph{not}
the directory part.

@lisp
(file-name-nondirectory "/tmp/foo")
    @result{} "foo"

(file-name-nondirectory "foo")
    @result{} "foo"

(file-name-nondirectory "foo/bar/")
    @result{} ""
@end lisp
@end defun

@defun file-name-concat &rest parts
This function returns a file name constructed by concatenating each of the
@var{parts} of the file name together. Each part is separated by the
necessary string (i.e. @samp{/} on Unix) when necessary. Note that each
part may contain more than one component of the file name.

@lisp
(file-name-concat "/tmp" "foo" "bar")
    @result{} "/tmp/foo/bar"

(file-name-concat "/tmp/" "foo/" "bar")
    @result{} "/tmp/foo/bar"

(file-name-concat "/tmp/foo" "bar")
    @result{} "/tmp/foo/bar"
@end lisp
@end defun

@defun expand-file-name file-name &optional make-absolute
This function expands the string @var{file-name} into a valid file name.
Currently it only checks for a leading tilde character (@samp{~}) when running
on Unix, if one is found it's expanded to the user's home directory.

When the optional argument @var{make-absolute} is non-@code{nil} @var{file-name}
is altered so that it is not relative to the current working directory.
Generally this involves prefixing it by the absolute name of the current
directory.

@lisp
(expand-file-name "~/src")
    @result{} "/home/jsh/src"

(expand-file-name "foo.c" t)
    @result{} "/var/src/jade/foo.c"
@end lisp
@end defun

@defun tmp-file-name
This function returns the name of a file which, when created, may be used
for temporary storage. Each time this function is called a unique name is
computed.

@lisp
(tmp-file-name)
    @result{} "/tmp/00088aaa"

(tmp-file-name)
    @result{} "/tmp/00088baa"
@end lisp
@end defun

@node File Objects, File Information, File Names, Files
@subsection File Objects
@cindex File objects

A file object is a Lisp object which represents a file in the filing
system. Any file object may be used as a stream (either input or output)
to access the contents of the file serially, @ref{Streams}.

@menu
* Creating File Objects::       Opening files
* Destroying File Objects::     Closing files
* File Object Predicates::      Predicates for file objects
* Functions on File Objects::   Functions operating on file objects
@end menu

@node Creating File Objects, Destroying File Objects, , File Objects
@subsubsection Creating File Objects
@cindex Creating file objects
@cindex File objects, creating
@cindex Files, opening

@defun open file-name mode-string &optional file-object
This function opens the file called @var{file-name} (@pxref{File Names})
and returns the file's object.

The @var{mode-string} argument is a string defining the access modes used
to open the file with; this string is passed as-is to the C library's
@code{fopen()} function. Usually one of the following strings is used,

@table @samp
@item r
Open an existing file for reading only.

@item w
Open the file for writing only, if the file exists it is truncated to
zero length. Otherwise a new file is created.

@item a
Open the file for appending to, i.e. writing to the end of the file. If
the file doesn't exist it is created.
@end table

Other options exist; consult a C library manual for details.

When the @var{file-object} argument is defined it should be a file object,
the file it points to will be closed and the new file will be opened on
this object.
@end defun

@node Destroying File Objects, File Object Predicates, Creating File Objects, File Objects
@subsubsection Destroying File Objects
@cindex Destroying file objects
@cindex File objects, destroying
@cindex Files, closing

The easiest way to close a file is simply to eliminate all references to it,
subsequently the garbage collector will close it for you. It is better
to close files explicitly though since only a limited number of files may be
opened concurrently.

@defun close file-object
This function closes the file pointed to by the file object @var{file-object}.

Until a new file is opened on @var{file-object} any read/write accesses
to it are illegal and an error will be signalled.
@end defun

@node File Object Predicates, Functions on File Objects, Destroying File Objects, File Objects
@subsubsection File Object Predicates
@cindex File object predicates

@defun filep object
This function returns @code{t} when its argument is a file object.
@end defun

@defun file-bound-p file-object
Returns @code{t} when the file object @var{file-object} is currently
bound to a physical file (i.e. the @code{close} function hasn't been
called on it yet).
@end defun

@defun file-eof-p file-object
This function returns @code{t} when the current position of the file
object @var{file-object} is the end of the file (i.e. when reading
a character from the file would return @code{nil}).
@end defun

@node Functions on File Objects, , File Object Predicates, File Objects
@subsubsection Functions on File Objects
@cindex Functions on File Objects
@cindex File objects, functions

@defun flush-file file-object
This function flushes any buffered output to the file object @var{file-object}
to disk.

Note that when using a file which was opened with the @samp{+} option
it's necessary to call this function when switching from reading to
writing or vice versa.
@end defun

@defun file-binding file-object
Returns the name of the file which the file object @var{file-object} is
currently bound to.
@end defun

@defun read-file-until file-object regexp &optional ignore-case
This function reads lines from the file object @var{file-object} until
a line matching the regular expression @var{regexp} is found. The matching
line is returned, or @code{nil} if the end of the file is reached.

When the @var{ignore-case} option is non-@code{nil} all regexp matching
is done case-insignificantly (except for matching ranges).
@end defun

@node File Information, Manipulating Files, File Objects, Files
@subsection File Information
@cindex File information

A number of functions exist which when given the name of a file return
some information about that file.

@defun file-exists-p file-name
Returns @code{t} when a file @var{file-name} exists.
@end defun

@defun file-regular-p file-name
Returns @code{t} when the file @var{file-name} is a `normal' file. This means
that it isn't a directory, device, symbolic link or whatever.
@end defun

@defun file-directory-p file-name
Returns @code{t} when the file @var{file-name} is a directory.
@end defun

@defun file-symlink-p file-name
Returns @code{t} when the file @var{file-name} is a symbolic link.
@end defun

@defun file-readable-p file-name
Returns @code{t} when the file @var{file-name} is readable.
@end defun

@defun file-writable-p file-name
Returns @code{t} when the file @var{file-name} is writable.
@end defun

@defun file-owner-p file-name
Returns @code{t} when the ownership of the file @var{file-name} is
the same as that of any files written by the editor.

Note that currently this always returns @code{t} in the Amiga version.
@end defun

@defun file-nlinks file-name
Returns the number of hard links pointing to the file @var{file-name}. If
@var{file-name} has only one name the number will be one.

Note that this always returns one in the Amiga version of Jade.
@end defun

@defun file-modes file-name
This function returns the access permissions of the file @var{file-name}.
This will be an integer whose format is undefined; it differs from
operating system to operating system.
@end defun

@defun set-file-modes file-name modes
This function sets the access permissions of the file @var{file-name} to
the integer @var{modes} (as returned by the @code{file-modes} function).
@end defun

@defun file-modtime file-name
Returns the system time at the last modification to the file @var{file-name},
this will be an integer. @xref{System Time}.
@end defun

@defun file-newer-than-file-p file-name1 file-name2
This function returns @code{t} if the file @var{file-name1} was modified
more recently than the file @var{file-name2} was.

@lisp
(file-newer-than-file-p @var{file1} @var{file2})
@equiv{}
(> (file-modtime @var{file1}) (file-modtime @var{file2}))
@end lisp
@end defun

@node Manipulating Files, Reading Directories, File Information, Files
@subsection Manipulating Files
@cindex Manipulating files
@cindex Files, manipulating

@deffn Command delete-file file-name
This function deletes the file called @var{file-name}. When called
interactively @var{file-name} is prompted for.
@end deffn

@deffn Command rename-file file-name new-name
This function attempts to change the name of the file @var{new-name}
to @var{new-name}.

This won't work from one file system to another or if a file called
@var{new-name} already exists, in these cases an error is signalled.

This prompts for its arguments when called interactively.
@end deffn

@deffn Command copy-file file-name destination-name
Creates a new copy of the file @var{file-name} with the name
@var{destination-name}.

The access modes of the new file will be the same as those of the original
file.

The arguments are prompted for when this function is called interactively.
@end deffn

@node Reading Directories, Reading and Writing Files, Manipulating Files, Files
@subsection Reading Directories
@cindex Reading directories
@cindex Files, reading directories

@defun directory-files directory-name
This function returns a list of the names of all files in the directory
whose file name is @var{directory-name}. The names in the list will be
relative to the directory @var{directory-name}, any directories in
the list will have a @samp{/} character appended to them.

@lisp
(directory-files "/tmp/foo"
    @result{} ("bar" "subdir/" "xyz" "." "..")
@end lisp
@end defun

@node Reading and Writing Files, , Reading Directories, Files
@subsection Reading and Writing Files
@cindex Reading and writing files
@cindex Files, reading and writing

@defun read-file file-name
This function returns a string containing the contents of the file
called @var{file-name}.
@end defun

@defun write-file file-name contents
This function creates or overwrites the file called @var{file-name} with
the string @var{contents} as its contents.
@end defun

@node Processes, Miscellaneous Functions, Files, Programming Jade
@section Processes
@cindex Processes

When running on a Unix-style operating system (i.e. the X11 version) Jade
allows you to launch and control an arbitrary number of subprocesses. These
subprocesses can run either synchronously or asynchronously in respect to
the editor; data can be sent to the stdin channel and any output from
the process is automatically written to a programmer-defined Lisp stream.

Currently there is @emph{no} way to manipulate subprocesses in the Amiga
version of Jade (sorry!).

@menu
* Process Objects::             Lisp objects associated with subprocesses
* Asynchronous Processes::      Subprocesses running in parallel with Jade
* Synchronous Processes::       Subprocesses which Jade runs serially
* Process I/O::                 Input and output with subprocesses
* Process States::              Suspending subprocesses
* Signalling Processes::        Sending signals to subprocesses
* Process Information::         Information stored in a process object
* Interactive Processes::       Shell mode lets the user interact with a
                                  subprocess
@end menu

@node Process Objects, Asynchronous Processes, , Processes
@subsection Process Objects
@cindex Process objects

A @dfn{process object} is a type of Lisp object used to provide a link
between a `physical' process running in the operating system and Jade's
Lisp system. Each process object consists of a number of components (references
to other Lisp objects); these components are used when the object is
used to run a subprocess.

Process objects which aren't currently being used to run a subprocess
store the exit value of the last subprocess which was run on that object.

@defun processp object
This function returns @code{t} when its argument is a process object.
@end defun

The programmer-accessible components of a process object are,

@table @dfn
@item Output stream
A normal Lisp output stream (@pxref{Output Streams}), all data which the
subprocess outputs to its @code{stdout} channel is copied to this
output stream. @xref{Process I/O}.

@item State change function
A Lisp function, called each time the state of the subprocess being run
on the object changes. @xref{Process States}.

@item Program name
The name of the program (a string) to execute when the subprocess is created.

@item Program arguments
A list of strings defining the arguments which the program executed
is given.

@item Directory
When a subprocess is started its current working directory is set to
the directory named by this component of its process object.

@item Connection type
Asynchronous subprocesses (@pxref{Asynchronous Processes}) use this
component to decide how to connect to the I/O channels of the subprocess.
Current options include pseudo-terminals and pipes.
@end table

@defun make-process &optional output-stream state-function directory program args
This functions creates and returns a new process object. @emph{No subprocess
will be started.}

The optional arguments are used to define the values of the components of
the new process object, any undefined components will be set to default
or null values.
@end defun

For each component of a process object two functions exist; one to
read the component's value in a specific process object, the other
to set the component's value.

@defun process-prog process
Returns the value of the program name component of the process object
@var{process}.
@end defun

@defun set-process-prog process prog-name
Sets the value of the program name component of the process object
@var{process} to the string @var{prog-name}, then returns @var{prog-name}.
@end defun

@defun process-args process
Returns the value of the program arguments component of the process object
@var{process}.
@end defun

@defun set-process-args process arg-list
Sets the value of the program arguments component of the process object
@var{process} to the list @var{arg-list}, then returns @var{arg-list}.
@end defun

@defun process-dir process
Returns the value of the directory component of the process object
@var{process}.
@end defun

@defun set-process-directory process directory
Sets the value of the directory component of the process object
@var{process} to the string @var{directory}, then returns @var{directory}.
@end defun

@node Asynchronous Processes, Synchronous Processes, Process Objects, Processes
@subsection Asynchronous Processes
@cindex Asynchronous processes
@cindex Processes, asynchronous

An @dfn{asynchronous process} is one that runs in parallel with the editor,
basically this means that once the subprocess has been started (by the
@code{start-process} function) Jade will carry on as normal.

The event loop checks for output from asynchronous processes, any found
is copied to the process' output stream, and calls the the process' state
change function when necessary (@pxref{Process States}).

When using asynchronous processes you have a choice as to the Unix
mechanism used to connect the @code{stdin}, @code{stdout} and @code{stderr}
streams of the subprocess to Jade's process (note that whatever the choice
@code{stdout} and @code{stderr} always go to the same place).

The two options currently available are pipes or pseudo-terminals; in
general pseudo-terminals should only be used to provide a direct interface
between the user and a process (i.e. the @samp{*shell*} buffer) since they
allow job control to work properly. At other times pipes will be more
efficient and are used by default.

@defun start-process &optional process-object program &rest args
This function starts an asynchronous subprocess running on the process
object @var{process-object}. If @var{process-object} is undefined a
new process object is created (by calling the function @code{make-process}
with all arguments undefined).

The function always returns the process object which the subprocess
has been started on. If for some reason the subprocess can't be created
an error of type @code{process-error} is signalled.

The optional argument @var{program} is a string defining the name of the
program to execute, it will be searched for in all the directories
in the @code{PATH} environment variable. The @var{args} are strings
to pass to the subprocess as its arguments.

When defined, the optional arguments overrule the values of the related
components of the process object.

The following example runs the @code{ls} program asynchronously, its output
is inserted into the current buffer.

@lisp
(let
    ((process (make-process (current-buffer))))
  (start-process process "ls" "-s"))
@end lisp
@end defun

Note that when Jade terminates it kills all of its asynchronous
subprocesses which are still running without warning.

@defun process-connection-type process
Returns the value of the connection type component of the process object
@var{process}. See the documentation of the @code{set-process-connection-type}
function for the values this may take.
@end defun

@defun set-process-connection-type process symbol
Sets the value of the connection type component of the process object
@var{process} to @var{symbol}, then returns @var{symbol}.

@var{symbol} should be one of the following symbols,

@table @code
@item pty
Use pseudo-terminals to connect to subprocesses running asynchronously on
this process object.

@item pipe
Use standard Unix pipes to connect, this is the default value of this
component.
@end table
@end defun

@node Synchronous Processes, Process I/O, Asynchronous Processes, Processes
@subsection Synchronous Processes
@cindex Synchronous processes
@cindex Processes, synchronous

When a @dfn{synchronous process} is started Jade waits for it to
terminated before continuing; they are usually used when a Lisp program
must invoke an external program as part of its function, i.e. the
auto-compression feature runs the compression program @code{gzip}
synchronously when it needs to compress a buffer.

Unlike asynchronous processes their is no choice between pipes and
pseudo-terminals for connecting to a subprocess. Instead, it is possible
to link the @code{stdin} channel of a synchronous process to a named
file.

@defun run-process &optional process-object input-file-name program &rest args
This function starts a process running on the process object
@var{process-object}. If @var{process-object} is undefined a new process object
is created by calling the @code{make-process} function.

If defined, the string @var{input-file-name} names the file to connect to
the standard input of the subprocess, otherwise the subprocess' input
comes from the null device (@file{/dev/null}).

The optional arguments @var{program} and @var{args} define the name of the
program to invoke and any arguments to pass to it. The program will be searched
for in all directories listed in the @code{PATH} environment variable.

If any of the optional parameters are unspecified they should have been
set in the @var{process-object} prior to calling this function.

After successfully creating the new subprocess, this function simply copies
any output from the process to the output stream defined by the output stream
component of the process object. When the subprocess exits its exit-value
is returned (an integer). Note that the exit-value is the value returned
by the @code{process-exit-value} function, see @ref{Process Information}.

If, for some reason, the new subprocess can't be created an error of type
@code{process-error} is signalled.
@end defun

The following function definition is taken from the @file{gzip.jl} file,
it shows how the @code{run-process} function can be used to uncompress
a file into a buffer.

@lisp
;; Uncompress FILE-NAME into the current buffer
(defun gzip-uncompress (file-name)
  (let
      ((proc (make-process (current-buffer))))
    (message (concat "Uncompressing `" file-name "'") t)
    ;; gunzip can do .Z files as well
    (unless (zerop (run-process proc nil "gunzip" "-c" file-name))
      (signal 'file-error (list "Can't gunzip file" file-name)))))
@end lisp

@node Process I/O, Process States, Synchronous Processes, Processes
@subsection Process I/O
@cindex Process I/O

It is only possible for lisp programs to explicitly send input data
to @emph{asynchronous} processes (by the time it's possible to call a function
to send data to a synchronous process, the process will already have
terminated!). Simply use the process object which an asynchronous process
is running on as a normal Lisp input stream, any strings or characters
written to the stream will immediately be copied to the @code{stdin} channel
of the subprocess.

With synchronous processes, the only control over input data possible is
by giving the @code{run-process} function the name of a file containing
the subprocess' input data.

Output data from subprocesses is handled the same way by both asynchronous
and synchronous processes: it is simply copied to the stream defined by
the output stream component of the subprocess' process object.

@defun process-output-stream process
Returns the value of the output stream component of the process object
@var{process}.
@end defun

@defun set-process-output-stream process stream
Sets the value of the output stream component of the process object
@var{process} to the stream @var{stream}, then returns @var{stream}.
@end defun

@xref{Streams}.

@node Process States, Signalling Processes, Process I/O, Processes
@subsection Process States
@cindex Process states

Each process object has a @dfn{state} associated with it; this depends on
the status of the subprocess currently running on the process object (or
not as the case may be).

The possible states are,

@table @dfn
@item running
This state means that the subprocess using this process object is currently
running, i.e. it hasn't been stopped.

@item stopped
Means that the subprocess has been temporarily suspended from running.

@item unused
This means that the process object is free to have a new subprocess created
on it.
@end table

Predicates exist which test whether a given process object is in one of
these states.

@defun process-running-p process-object
Returns @code{t} when @var{process-object} is in the running state.
@end defun

@defun process-stopped-p process-object
Returns @code{t} when @var{process-object} is in the stopped state.
@end defun

@defun process-in-use-p process-object
Returns @code{t} when @var{process-object} is @emph{not} in the unused
state.
@end defun

The following two functions are used to stop and then subsequently
continue a process running.

@defun stop-process process-object &optional whole-group
This function suspends execution of the subprocess running on the
process object @var{process-object}.

If @var{whole-group} is non-@code{nil} all subprocesses in the
process group of @var{process-object} are stopped.
@end defun

@defun continue-process process-object &optional whole-group
Use this function to continue a subprocess executing after it has been
stopped (by the @code{stop-process} function).

If @var{whole-group} is non-@code{nil} all subprocesses in the
process group of @var{process-object} are continued.
@end defun

The state change function component of a process object defines a function
which will be called each time the state of the process object changes. If
your program needs to be informed when an asynchronous process terminates
this function is the way to do it.

@defun process-function process
Returns the value of the state change function component of the process object
@var{process}.
@end defun

@defun set-process-function process function
Sets the value of the state change function component of the process object
@var{process} to the function @var{function}, then returns @var{function}.
@end defun

@node Signalling Processes, Process Information, Process States, Processes
@subsection Signalling Processes
@cindex Signalling processes
@cindex Processes, signalling

@defun signal-process process-object signal-number &optional whole-group
If the process object @var{process-object} is being used to run an asynchronous
subprocess send the signal numbered @var{signal-number} to it.

When the optional argument @var{whole-group} is non-@code{nil} the
signal is also sent to all processes in the process group of the subprocess.
@end defun

The following functions use the @code{signal-process} function to send some
common signals to processes.

@defun interrupt-process process-object &optional whole-group
Sends the @code{SIGINT} signal to @var{process-object}.

@lisp
(interrupt-process @var{process-object} @var{whole-group})
@equiv{}
(signal-process @var{process-object} @code{SIGINT} @var{whole-group})
@end lisp
@end defun

@defun kill-process process-object &optional whole-group
Sends the @code{SIGKILL} signal to the @var{process-object}.

@lisp
(kill-process @var{process-object} @var{whole-group})
@equiv{}
(signal-process @var{process-object} @code{SIGKILL} @var{whole-group})
@end lisp
@end defun

Note that the functions @code{stop-process} and @code{continue-process}
also send signals to the subprocess.

@node Process Information, Interactive Processes, Signalling Processes, Processes
@subsection Process Information
@cindex Process information

@defun process-id process-object
This function returns the operating-system identifier associated with the
subprocess currently running on the process object @var{process-object}.
@end defun

@defun process-exit-value process-object
Returns the integer representing the return code of the last subprocess
to be run on @var{process-object}.

If no subprocess has been run on @var{process-object}, @var{process-object}
is currently in the running state or the last subprocess exited abnormally
(i.e. from a terminal signal) @code{nil} is returned.
@end defun

@defun process-exit-status process-object
This function returns the integer that was the exit status of the last
subprocess which was run on the process object @var{process-object}.

Note that the exit status is @emph{not} the value given to the @code{exit}
function in a C program, use the @code{process-exit-value} to access this
value.

If no process has been run on @var{process-object}, or the process is currently
in the running state @code{nil} is returned.
@end defun

@node Interactive Processes, , Process Information, Processes
@subsection Interactive Processes
@cindex Interactive processes
@cindex Processes, interactive
@cindex Shell mode, programming

The Shell mode is usually used to run a shell process in a buffer (with
the @code{shell} command, @pxref{Shell}) but in actual fact it is
capable of running (nearly) any type of interactive process. For
example the gdb interface (@pxref{Debugging Programs}) uses the Shell
mode to handle its user interaction.

The following buffer-local variables control the Shell mode.

@defvar shell-program
This variable defines the name of the program to execute. By default it
is the user's shell.
@end defvar

@defvar shell-program-args
A list of arguments which should be given to the process when it is
started.
@end defvar

@defvar shell-prompt-regexp
This regular expression must match the prompt that the process emits
each time it waits for input. Its standard value of
@samp{^[^]#$%>)]*[]#$%>)] *} will need to be tailored to the program
that you are executing.
@end defvar

@defvar shell-callback-function
Every time the state of the subprocess changes (@pxref{Process States})
this function is called in the context of the process' buffer.
@end defvar

@defvar shell-output-stream
All output from the subprocess is copied to this output stream. If it is
@code{nil} all output goes to the end of the process' buffer.

Note that this variable is only referenced when the process is started.
@end defvar

To use the Shell mode to create an interface with a program simply
use the following steps.

@enumerate
@item
Select the buffer which you want to run the subprocess in. The value
of the @code{buffer-file-name} attribute of the buffer defines the
working directory of the subprocess.

@item
Set the variables described above to suitable values.

@item
Call the @code{shell-mode} function.

@item
Reset the values of the @code{mode-name} and @code{major-mode} if
necessary and install your own keymaps.

Remember that commands essential to the Shell mode (and hence your
program) are contained in the two keymaps @code{shell-keymap} and
@code{shell-ctrl-c-keymap}. If you need to bind your own commands to
either of these prefixes make copies of these keymaps (using the
function @code{copy-sequence}) and bind to the copies.

For example the gdb interface installs its own key bindings from the
@kbd{Ctrl-c} prefix by doing the following in its initialisation.

@lisp
(defvar gdb-ctrl-c-keymap (copy-sequence shell-ctrl-c-keymap))
(bind-keys gdb-ctrl-c-keymap
 ;; Gdb mode `Ctrl-c' prefix bindings follow
 @dots{}
@end lisp
@end enumerate

@defun shell-mode
This function installs the Shell mode and starts a subprocess running in
the current buffer.

The variables @code{shell-program}, @code{shell-program-args},
@code{shell-prompt-regexp}, @code{shell-callback-function} and
@code{shell-output-stream} control the program executed and how it will
execute.

The process object created is stored in the buffer-local variable
@code{shell-process}.
@end defun

@defvar shell-process
This buffer-local variable contains the process object which the Shell
mode started running in this buffer. If it is @code{nil} no such process
exists.
@end defvar

@defvar shell-keymap
The root keymap of the Shell mode.
@end defvar

@defvar shell-ctrl-c-keymap
The keymap containing the key bindings of the commands in Shell mode
with a prefix of @kbd{Ctrl-c}.
@end defvar

See the Lisp program @file{gdb.jl} for an example of how to use the
Shell mode as the user interface with an external program.

@node Miscellaneous Functions, Debugging, Processes, Programming Jade
@section Miscellaneous Functions
@cindex Miscellaneous functions

This section of the manual documents functions and features which don't
comfortably fit elsewhere in this manual.

@menu
* System Information::          Getting details about the host
* User Information::            The name of the user
* Environment Variables::       Reading and writing the environment
* System Time::                 Getting the current time
* Revision Information::        How to check Jade's revision numbers
@end menu

@node System Information, User Information, , Miscellaneous Functions
@subsection System Information
@cindex System information

@defun x11-p
This function returns @code{t} when Jade is running on the X11 window system.
@end defun

@defun unix-p
This function returns @code{t} when Jade is running on a variant of the Unix
operating system.
@end defun

@defun amiga-p
This function returns @code{t} when Jade is running on an Amiga.
@end defun

@defun system-name
This function returns a string naming the host that Jade is running on. When
possible this will include the name of the domain as well.

In the Amiga version of Jade the environment variable @code{HOSTNAME} is
assumed to contain the host's name.
@end defun

@node User Information, Environment Variables, System Information, Miscellaneous Functions
@subsection User Information
@cindex User information

@defun user-login-name
This function returns a string containing the login name of the user.

In the Amiga version this is taken from the environment variable
@code{USERNAME}.

@lisp
(user-login-name)
    @result{} "jsh"
@end lisp
@end defun

@defun user-real-name
This function returns a string containing the `real' name of the user; the
format of the string will depend on the host system.

In the Amiga version this is taken from the @code{REALNAME} environment
variable.

@lisp
(user-real-name)
    @result{} "John Harper"
@end lisp
@end defun

@defun user-home-directory
This function returns the name of the user's home directory terminated by
a slash character (@samp{/}).

The first place this is looked for is in the @code{HOME} environment
variable; if this variable doesn't exist we either use the @file{SYS:}
logical device in AmigaDOS or consult the passwd file when in Unix.

@lisp
(user-home-directory)
    @result{} "/home/jsh/"
@end lisp
@end defun

@node Environment Variables, System Time, User Information, Miscellaneous Functions
@subsection Environment Variables
@cindex Environment variables

@defun getenv variable-name
This function returns the value (a string) of the environment variable
called @var{variable-name}. If the specified variable doesn't exist @code{nil}
is returned.

@lisp
(getenv "OSTYPE")
    @result{} "Linux"
@end lisp
@end defun

@defun setenv variable-name new-value
This function sets the value of the environment variable called
@var{variable-name} to @var{new-value}. @var{new-value} can either be
a string containing the new contents of the variable or @code{nil}, in which
case the environment variable is deleted.
@end defun

@node System Time, Revision Information, Environment Variables, Miscellaneous Functions
@subsection System Time
@cindex System time
@cindex Time, system
@cindex Current time

No matter what operating system Jade is running on it always an integer
to store a time value. Generally this will be the number of seconds since
some previous date.

The only thing a Lisp program is allowed to assume about a time value is
that as time passes the time value @emph{increases}. This means that it's
possible to compare two time values and know which is the newer.

@defun current-time
Returns an integer denoting the current time.

@lisp
(current-time)
    @result{} 780935736
@end lisp
@end defun

@defun current-time-string
This function returns a string stating the current time and date in a fixed
format. An example of the format is,

@example
Fri Sep 30 15:20:56 1994
@end example

Each field will always be in the same place, for example,

@example
Thu Sep  1 12:13:14 1994
@end example

@lisp
(current-time-string)
    @result{} "Fri Sep 30 15:20:56 1994"
@end lisp
@end defun

@node Revision Information, , System Time, Miscellaneous Functions
@subsection Revision Information
@cindex Revision information
@cindex Version numbers

@defun major-version-number
This function returns a number defining the major version of the editor.

@lisp
(major-version-number)
    @result{} 3
@end lisp
@end defun

@defun minor-version-number
Returns a number defining the minor version of the editor.

@lisp
(minor-version-number)
    @result{} 2
@end lisp
@end defun

@node Debugging, Tips, Miscellaneous Functions, Programming Jade
@section Debugging
@cindex Debugging

When you have written a Lisp program you will have to debug it (unless
all your programs work first time?). There are two main classes of errors;
syntax errors and semantic errors.

Syntax errors occur when the text you've typed out to represent your
program is not a valid representation of a Lisp object (since a program is
simply an ordered set of Lisp objects). When you try to load your program
the Lisp reader will find the syntax error and tell you about, unfortunately
though it probably won't be able to tell you exactly where the error is.

The most common source of syntax errors is too few or too many parentheses;
the @kbd{Ctrl-Meta-f} and @kbd{Ctrl-Meta-b} commands can be used to show
the structure of the program as the Lisp reader sees it.

Semantic errors are what we normally call bugs --- errors in logic, the program
is syntactically correct but doesn't do what you want it to. For these
types of errors Jade provides a simple debugger which allows you to single
step through the Lisp forms of your program as they are being evaluated.

There are several ways to enter the Lisp debugger; functions can be marked
so that they cause the debugger to be entered when they are called, breakpoints
can be written in functions or it can be called explicitly with a form to
step through.

@deffn Command trace symbol
This command marks the symbol @var{symbol} so that each time the function
stored in the function cell of @var{symbol} is called the debugger is
entered immediately.

When called interactively @var{symbol} is prompted for.
@end deffn

@deffn Command untrace symbol
The opposite of @code{trace} --- unmarks the symbol.
@end deffn

@defun break
This function causes the debugger to be entered immediately. By putting the
form @code{(break)} at suitable points in your program simple breakpoints
can be created.
@end defun

@deffn Command step form
This function invokes the debugger to step through the form @var{form}.

When called interactively @var{form} is prompted for.
@end deffn

Whenever the Lisp debugger is entered the form waiting to be evaluated
is printed at the bottom of the buffer, at this point the special debugger
commands available are,

@table @kbd
@item Ctrl-c Ctrl-s
@kindex Ctrl-c Ctrl-s
Step into the current form; this means that in a list form the debugger is
used to evaluated each argument in turn.

@item Ctrl-c Ctrl-i
@kindex Ctrl-c Ctrl-i
Ignore the current form; makes the current form immediately return @code{nil}.

@item Ctrl-c Ctrl-n
@kindex Ctrl-c Ctrl-n
Continue evaluating forms normally until the next form at the current level
is entered, then re-enter the debugger.

@item Ctrl-c Ctrl-r
@kindex Ctrl-c Ctrl-r
Continue execution normally. Note that this command is the one to use when
an error has been trapped.

@item Ctrl-c Ctrl-b
@kindex Ctrl-c Ctrl-b
Print a backtrace of the current Lisp call stack, note that calls of
primitive functions aren't currently recorded in this stack.

@item Ctrl-c Ctrl-x
@kindex Ctrl-c Ctrl-x
Prompt for a Lisp form, evaluate it and return this value as the result of
the current form.
@end table

After the form has been evaluated (i.e. after you've typed one of the
commands above) the value of the form is printed in the buffer, prefixed by
the string @samp{=> }.

Note that it is also possible to make certain types of errors invoke the
debugger immediately they are signalled, see @ref{Errors}.

@node Tips, , Debugging, Programming Jade
@section Tips
@cindex Tips

This section of the manual gives advice about programming in Jade.

Obviously there is no @emph{need} to religiously follow every single
one, but following these tips will make your programs easier to
read and (hopefully) more efficient overall.

For advice on getting the most out of the compiler, see @ref{Compilation Tips}.

@menu
* Comment Styles::              Differrent types of comments
* Program Layout::              How I lay out the programs I write
* General Tips::                Do's and Don't's of Jade programming
@end menu

@node Comment Styles, Program Layout, , Tips
@subsection Comment Styles
@cindex Comment styles
@cindex Tips, comment styles
@cindex Style, comments

As already described, single-line comments in Lisp are introduced by
a semi-colon (@samp{;}) character. By convention a different number of
semi-colons is used to introduce different types of comments,

@table @samp
@item ;
A comment referring to the line of Lisp code that it occurs on, comments
of this type are usually indented to the same depth, on the right of the
Lisp code. When editing in Lisp mode the command @kbd{Meta-;} can be used
to insert a comment of this type.

For example,

@lisp
(defconst op-call 0x08)	        ;call (stk[n] stk[n-1] ... stk[0])
                                ; pops n values, replacing the
                                ; function with the result.
(defconst op-push 0x10)	        ;pushes constant # n
@end lisp

@item ;;
Comments starting with two semi-colons are written on a line of their
own and indented to the same depth as the next line of Lisp code. They
describe the following lines of code.

For example,

@lisp
;; Be sure to remove any partially written dst-file.
(let
    ((fname (concat file-name ?c)))
  (when (file-exists-p fname)
    (delete-file fname)))
@end lisp

Comments of this type are also placed before a function definition
to describe the function. This saves wasting memory with a documentation
string in a module's internal functions.

For example,

@lisp
;; Compile a form which occurred at the `top-level' into a
;; byte code form.
;; defuns, defmacros, defvars, etc... are treated specially.
;; require forms are evaluated before being output uncompiled;
;; this is so any macros are brought in before they're used.
(defun comp-compile-top-form (form)
  @dots{}
@end lisp

@item ;;;
This type of comment always starts in the first column of the line, they
are used to make general comments about a program and don't refer to any
function or piece of code in particular.

For example,

@lisp
;;; Notes:
;;;
;;; Instruction Encoding
;;; ====================
;;; Instructions which get an argument (with opcodes of zero up to
@dots{}
@end lisp

@item ;;;;
Each program should have a comment of this type as its first line, the
body of the comment is the name of the file, two dashes and a brief
description of what the program does. They always start in the first
column.

For example,

@lisp
;;;; compiler.jl -- Simple compiler for Lisp files/forms
@end lisp
@end table

If you adhere to these standards the indentation functions provide by
the Lisp mode will indent your comments to the correct depth.

@node Program Layout, General Tips, Comment Styles, Tips
@subsection Program Layout
@cindex Program layout
@cindex Tips, program layout
@cindex Layout of programs

The layout that I have used for all the Lisp programs included with
Jade is as follows, obviously this isn't ideal but it seems ok.

@enumerate
@item
The first line of the file is the header comment, including the
name of the file and its general function.

@item
Copyright banner.

@item
Any @code{require} forms needed followed by a @code{provide} form for
this module. The @code{require} forms should be before the
@code{provide} in case the required modules aren't available.

@item
Variable and constant definitions. As a variable is defined any
initialisation it needs is done immediately afterwards. For example
a keymap is defined with @code{defvar} then initialised with
the @code{bind-keys} function.

For example,

@lisp
(defvar debug-buffer (make-buffer "*debugger*")
  "Buffer to use for the Lisp debugger.")
(set-buffer-special debug-buffer t)
(add-buffer debug-buffer)

(defvar debug-ctrl-c-keymap (make-keylist)
  "Keymap for debugger's ctrl-c prefix.")
(bind-keys debug-ctrl-c-keymap
  "Ctrl-s" 'debug-step
  @dots{}
@end lisp

@item
Finally the functions which make up the program, it often improves
readability if the entry points to the program are defined first.
@end enumerate

@node General Tips, , Program Layout, Tips
@subsection General Tips
@cindex General tips
@cindex Tips, general

The following are some general items of advice; you don't have to follow
them but they are the result of experience!

@itemize @bullet
@item
Jade only has one name-space for all the symbols ever created, this could
lead to naming clashes if care isn't taken.

When you write a program all the symbols it creates should be prefixed
by a name derived from the name of the program in some way. For example,
in the program @file{isearch.jl} all functions and variable names are
prefixed by the string @samp{isearch-}, giving @code{isearch-cancel}
and so on. Note that the prefix doesn't have to be the exact name of the
file, the program @file{buffer-menu.jl} uses the prefix @samp{bm-}.

The entry points to a module (i.e. the names of the commands it provides)
should @emph{not} have a prefix, simply give them a descriptive name (but
try not to make it too long!).

Don't bother giving local variables these prefixes unless they are used
by several functions in the program.

@item
Use the @code{recursive-edit} function as little as possible; it can be
@emph{very} confusing for the user! When at all possible use keymaps to
create user interfaces.

@item
Use the Lisp mode to indent your programs; not only does it save a lot
of time it also makes it easier for other people to read them.

@item
Errors should always be reported by either @code{error} or @code{signal},
don't just print a message or call @code{beep}.

@item
Don't redefine existing functions unless absolutely possible: try to
use hooks. If there is no hook where you want one, mail me about it and
I may put one in the next release.

@item
Don't compile your program until you're sure it works! The debugger only
works properly with uncompiled code.

@item
Use constants sparingly: personally, I only use them where the constants
are numeric.

@item
Remember to define macros before they are used, otherwise they won't be
compiled inline. The same can happen if you don't @code{require} a file
that a macro is defined in before using the macro definition.

@item
As I said in the compilation tips (@pxref{Compilation Tips}), try to
use iteration instead of recursion. Also the @code{memq} and @code{assq}
types of functions can be used to search some types of list structures
very quickly.

@item
When writing modes don't bind any unmodified keys to the prefix @kbd{Ctrl-c},
these are reserved for customisation by users.
@end itemize
